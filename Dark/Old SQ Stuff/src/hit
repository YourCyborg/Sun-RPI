act_comm.c:    if ( !str_cmp( ch->name, pnote->sender ) )
act_comm.c:    if ( is_name( ch->name, pnote->to_list ) )
act_comm.c:    if ( ch->pnote != NULL )
act_comm.c:	pnote	  = alloc_perm( sizeof(*ch->pnote) );
act_comm.c:    pnote->sender	= str_dup( ch->name );
act_comm.c:    ch->pnote		= pnote;
act_comm.c:	REMOVE_BIT(ch->act, PLR_AFK);
act_comm.c:    if (IS_SET(ch->act, PLR_AFK)) {
act_comm.c:       REMOVE_BIT(ch->act, PLR_AFK);
act_comm.c:	SET_BIT(ch->act, PLR_AFK);
act_comm.c:	if ( to_one[0] != '\0' && str_cmp( ch->name, to_one ) )
act_comm.c:    if ( str_cmp( ch->name, pnote->sender ) && to_new[0] != '\0' 
act_comm.c:    if ( ch->pnote == NULL || ch->pnote->text[0] == '\0' )
act_comm.c:    oldb = ch->pnote->text;
act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
act_comm.c:	ch->pnote->text = str_dup( buf );
act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
act_comm.c:	ch->pnote->text = str_dup( buf );
act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
act_comm.c:	ch->pnote->text = str_dup( buf );
act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
act_comm.c:	ch->pnote->text = str_dup( buf );
act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
act_comm.c:	ch->pnote->text = str_dup( buf );
act_comm.c:	    free_string( ch->pnote->text, MEM_GENERAL );
act_comm.c:	    ch->pnote->text = str_dup( buf );
act_comm.c:	send_to_char( ch->pnote->text, ch );
act_comm.c:	strcpy( buf, ch->pnote->text );
act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
act_comm.c:	ch->pnote->text = str_dup( buf );
act_comm.c:	free_string( ch->pnote->subject, MEM_GENERAL );
act_comm.c:	ch->pnote->subject = str_dup( argument );
act_comm.c:	free_string( ch->pnote->to_list, MEM_GENERAL );
act_comm.c:	ch->pnote->to_list = str_dup( argument );
act_comm.c:	if ( ch->pnote != NULL )
act_comm.c:	    free_string( ch->pnote->text, MEM_GENERAL );
act_comm.c:	    free_string( ch->pnote->subject, MEM_GENERAL );
act_comm.c:	    free_string( ch->pnote->to_list, MEM_GENERAL );
act_comm.c:	    free_string( ch->pnote->date, MEM_GENERAL );
act_comm.c:	    free_string( ch->pnote->sender, MEM_GENERAL );
act_comm.c:	    ch->pnote->next	= note_free;
act_comm.c:	    note_free		= ch->pnote;
act_comm.c:	    ch->pnote		= NULL;
act_comm.c:	if ( ch->pnote == NULL )
act_comm.c:	    ch->pnote->sender,
act_comm.c:	    ch->pnote->subject,
act_comm.c:	    ch->pnote->to_list
act_comm.c:	send_to_char( ch->pnote->text, ch );
act_comm.c:	if ( ch->pnote == NULL )
act_comm.c:	ch->pnote->next			= NULL;
act_comm.c:	ch->pnote->date			= str_dup( strtime );
act_comm.c:	    note_list	= ch->pnote;
act_comm.c:	    pnote->next	= ch->pnote;
act_comm.c:	pnote		= ch->pnote;
act_comm.c:	ch->pnote	= NULL;
act_comm.c:    REMOVE_BIT(ch->deaf, channel);
act_comm.c:	position	= ch->position;
act_comm.c:	ch->position	= POS_STANDING;
act_comm.c:	ch->position	= position;
act_comm.c:	&&  !IS_SET(och->deaf, channel) )
act_comm.c:	    position		= vch->position;
act_comm.c:	    vch->position	= position;
act_comm.c:  gsn = *language_table[ch->language].pgsn;
act_comm.c:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
act_comm.c:    if ( ch->in_room->exit[door] == NULL
act_comm.c:    || ( room = ch->in_room->exit[door]->to_room ) == NULL )
act_comm.c:    for ( vch = room->people; vch != NULL; vch = vch->next_in_room )
act_comm.c:  gsn = *language_table[ch->language].pgsn;
act_comm.c:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
act_comm.c:           sprintf(log_buf, "%s wishes to all \"%s\"",ch->name,argument );
act_comm.c:    || ( IS_NPC(victim) && victim->in_room != ch->in_room ) )
act_comm.c:	 || IS_SET(ch->act, PLR_WIZINVIS))
act_comm.c:        sprintf( log_buf, "%s sends to %s \"%s\"", ch->name, victim->name, argument );
act_comm.c:        sprintf( log_buf, "%s wishes to %s \"%s\"", ch->name, victim->name, argument );
act_comm.c:    if ( ( victim = ch->reply ) == NULL )
act_comm.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_NO_EMOTE) )
act_comm.c:    if ( ch->position  < POS_STUNNED  )
act_comm.c:    if ( ch->in_room && !IS_SET( ch->in_room->room_flags, ROOM_RENT )
act_comm.c:    sprintf( log_buf, "%s has quit.", ch->name );
act_comm.c:  //  d = ch->desc;
act_comm.c:    d = ch->desc;
act_comm.c:    if (!IS_SET(ch->act, PLR_AFK))
act_comm.c:    if ( IS_AFFECTED(ch, AFF_CHARM) && ch->master != NULL )
act_comm.c:	act( "You don't wish to leave your beloved master!", ch, ch->master, NULL, NULL, NULL, TO_CHAR, SENSE_SIXTH );
act_comm.c:	if ( ch->master == NULL )
act_comm.c:    if ( ch->master != NULL )
act_comm.c:    if ( ch->master != NULL )
act_comm.c:    ch->master        = master;
act_comm.c:    ch->leader        = NULL;
act_comm.c:    if ( ch->master == NULL )
act_comm.c:	REMOVE_BIT( ch->affected_by, AFF_CHARM );
act_comm.c:    act( "You stop following $N.", ch, ch->master, NULL, NULL, NULL, TO_CHAR, SENSE_SIXTH );
act_comm.c:    ch->master = NULL;
act_comm.c:    ch->leader = NULL;
act_comm.c:    if ( ch->master != NULL )
act_comm.c:    ch->leader = NULL;
act_comm.c:    for ( fch = char_list; fch != NULL; fch = fch->next )
act_comm.c:	if ( fch->master == ch )
act_comm.c:	if ( fch->leader == ch )
act_comm.c:	    fch->leader = fch;
act_comm.c:    for ( och = ch->in_room->people; och != NULL; och = och_next )
act_comm.c:	och_next = och->next_in_room;
act_comm.c:	&&   och->master == ch
act_comm.c:	leader = (ch->leader != NULL) ? ch->leader : ch;
act_comm.c:	for ( gch = char_list; gch != NULL; gch = gch->next )
act_comm.c:    if ( ch->master != NULL || ( ch->leader != NULL && ch->leader != ch ) )
act_comm.c:    if ( IS_SET( ch->act, PLR_NO_TELL ) )
act_comm.c:    sprintf( buf, "%s tells the group '%s'.\n\r", ch->name, argument );
act_comm.c:    for ( gch = char_list; gch != NULL; gch = gch->next )
act_comm.c:    if ( ach->leader != NULL ) ach = ach->leader;
act_comm.c:    if ( bch->leader != NULL ) bch = bch->leader;
act_info.c:    if ( ch->desc == NULL )
act_info.c:	    if ( IS_NPC(ch) || IS_SET(ch->act, PLR_COMBINE) )
act_info.c:	if ( IS_NPC(ch) || IS_SET(ch->act, PLR_COMBINE) )
act_info.c:	if ( IS_NPC(ch) || IS_SET(ch->act, PLR_COMBINE) )
act_info.c:	      rch != NULL; rch = rch->next_in_room ) {
act_info.c:	    if ( rch->riding == victim ) {
act_info.c:    for ( rch = list; rch != NULL; rch = rch->next_in_room )
act_info.c:	&&   IS_SET(rch->act, PLR_WIZINVIS)
act_info.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_HOLYLIGHT) )
act_info.c:    if ( ch->desc == NULL )
act_info.c:    if ( ch->position < POS_SLEEPING )
act_info.c:    if ( ch->position == POS_SLEEPING )
act_info.c:    &&   !IS_SET(ch->act, PLR_HOLYLIGHT)
act_info.c:    &&   room_is_dark( ch->in_room, ch ) == VISION_TOO_DARK )
act_info.c:	show_char_to_char( ch->in_room->people, ch );
act_info.c:    &&   !IS_SET(ch->act, PLR_HOLYLIGHT)
act_info.c:    &&   room_is_dark( ch->in_room, ch ) == VISION_TOO_BRIGHT )
act_info.c:	show_char_to_char( ch->in_room->people, ch );
act_info.c:	 sprintf(buf2,"[%d] ", ch->in_room->vnum);
act_info.c:     send_to_char( ch->in_room->name, ch );
act_info.c:	  ( !IS_NPC( ch ) && !IS_SET( ch->act, PLR_BRIEF ) ) )
act_info.c:	 send_to_char( ch->in_room->description, ch );
act_info.c:     if ( IS_SET(ch->act, PLR_AUTOWEATHER) && IS_OUTDOORS(ch))
act_info.c:     update_flora( ch->in_room );
act_info.c:     display_flora( ch, ch->in_room->flora, 0 );
act_info.c:     show_list_to_char( ch->in_room->contents, ch, FALSE, FALSE, FALSE );
act_info.c:     show_char_to_char( ch->in_room->people,   ch );
act_info.c:	for ( obj = ch->in_room->contents; obj != NULL; obj = obj->next_content )
act_info.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
act_info.c:    for ( obj = ch->in_room->contents; obj != NULL; obj = obj->next_content )
act_info.c:    pdesc = get_extra_descr( arg1, ch->in_room->extra_descr );
act_info.c:	if ( (pexit = ch->in_room->exit[door]) == NULL )
act_info.c:    if ( ( pexit = ch->in_room->exit[door] ) == NULL )
act_info.c:    dist = URANGE( 1, ch->vision_range, 200 );
act_info.c:    in_room = ch->in_room;
act_info.c:    update_flora( ch->in_room );
act_info.c:    if ( !IS_SET( ch->in_room->sector->flags, SECTOR_OUTDOORS ) )
act_info.c:    soil_condition( ch, get_water_value( ch->in_room ) );
act_info.c:	if ( ( pexit = ch->in_room->exit[door] ) != NULL
act_info.c:       // && IS_SET( ch->act, PLR_HOLYLIGHT ))
act_info.c:	ch->name,
act_info.c:	IS_NPC(ch) ? "" : ch->short_descr );
act_info.c:	(is_vowel(race_array[ch->race]->race_name[0]) ? "an" : "a" ),
act_info.c:	race_array[ch->race]->race_name);
act_info.c:    if ( get_trust( ch ) != ch->level )
act_info.c:	ch->hit[HIT_LOC_BODY],  ch->max_hit,
act_info.c:	ch->mana, ch->max_mana,
act_info.c:	ch->move, ch->max_move );
act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->condition[COND_DRUNK]   > 10 )
act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->condition[COND_THIRST] ==  0 )
act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->condition[COND_FULL]   ==  0 )
act_info.c:    switch ( ch->position )
act_info.c:    switch( ch->move_speed )
act_info.c:      skill_table[*language_table[ch->language].pgsn].name );
act_info.c:   free_string( ch->prompt, MEM_GENERAL );
act_info.c:   ch->prompt = str_dup( buf );
act_info.c:	if ( ( fImmortalOnly  && wch->level < LEVEL_IMMORTAL ) )
act_info.c:/*	switch ( wch->level )
act_info.c:	if ( IS_IMMORTAL( ch ) || wch->level > LEVEL_IMMORTAL )
act_info.c:		     (IS_SET(wch->act, PLR_AFK) ? "[AFK]" : " "),
act_info.c:                     (IS_SET(wch->act, PLR_WIZINVIS) ? "[INVIS]" : " "),
act_info.c:		     wch->name,
act_info.c:		     wch->short_descr);
act_info.c:    show_list_to_char( ch->carrying, ch, TRUE, TRUE, FALSE );
act_info.c:	for ( obj = ch->wearing[iWear]; obj != NULL; obj = obj->next_worn )
act_info.c:	for ( obj2 = ch->carrying; obj2 != NULL; obj2 = obj2->next_content )
act_info.c:	    &&   victim->in_room->area == ch->in_room->area
act_info.c:	    &&   victim->in_room->area == ch->in_room->area
act_info.c:	    if ( ch->description != NULL )
act_info.c:		strcat( buf, ch->description );
act_info.c:	free_string( ch->description, MEM_GENERAL );
act_info.c:	ch->description = str_dup( buf );
act_info.c:    send_to_char( ch->description ? ch->description : "(None).\n\r", ch );
act_info.c:    if ( strcmp( crypt( arg1, ch->pcdata->pwd ), ch->pcdata->pwd ) )
act_info.c:    pwdnew = crypt( arg2, ch->name );
act_info.c:    free_string( ch->pcdata->pwd, MEM_PCDATA );
act_info.c:    ch->pcdata->pwd = str_dup( pwdnew );
act_info.c:	send_to_char( !IS_SET(ch->deaf, CHANNEL_CHAT)
act_info.c:	    send_to_char( !IS_SET(ch->deaf, CHANNEL_IMMTALK)
act_info.c:	    send_to_char( !IS_SET(ch->deaf, CHANNEL_LOG)
act_info.c:	    REMOVE_BIT (ch->deaf, bit);
act_info.c:	    SET_BIT    (ch->deaf, bit);
act_info.c:	if ( IS_SET(ch->act,PLR_BRIEF))
act_info.c:	    REMOVE_BIT(ch->act,PLR_BRIEF);
act_info.c:	    SET_BIT(ch->act,PLR_BRIEF);
act_info.c:	if ( IS_SET(ch->act,PLR_BLANK))
act_info.c:	    REMOVE_BIT(ch->act,PLR_BLANK);
act_info.c:	    SET_BIT(ch->act,PLR_BLANK);
act_info.c:	if ( IS_SET(ch->act,PLR_PEACEFUL))
act_info.c:	    REMOVE_BIT(ch->act,PLR_PEACEFUL);
act_info.c:	    SET_BIT(ch->act,PLR_PEACEFUL);
act_info.c:	send_to_char(  IS_SET(ch->act, PLR_BLANK)
act_info.c:	send_to_char(  IS_SET(ch->act, PLR_BRIEF)
act_info.c:	send_to_char(  IS_SET(ch->act, PLR_COMBINE)
act_info.c:	send_to_char(  IS_SET(ch->act, PLR_PEACEFUL)
act_info.c:	send_to_char(  IS_SET(ch->act, PLR_PROMPT)
act_info.c:	send_to_char(  IS_SET(ch->act, PLR_TELNET_GA)
act_info.c:	send_to_char( !IS_SET(ch->act, PLR_NO_EMOTE)
act_info.c:	send_to_char( !IS_SET(ch->act, PLR_NO_TELL)
act_info.c:	    SET_BIT    (ch->act, bit);
act_info.c:	    REMOVE_BIT (ch->act, bit);
act_info.c:    ch->pcdata->pagelen = i;
act_info.c:  sprintf( buf, "Page Length (pagelen):  %d\n\r", ch->pcdata->pagelen );
act_move.c:  in_room = ch->in_room;
act_move.c:  if ( ch->riding != NULL && ch->riding->in_room != in_room )
act_move.c:    ch->riding = NULL;
act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
act_move.c:       &&   ch->master != NULL
act_move.c:       &&   in_room == ch->master->in_room 
act_move.c:       &&   !IS_SET(ch->act, PLR_HOLYWALK)) {
act_move.c:      &&  !IS_SET(ch->act, PLR_HOLYWALK)) {
act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
act_move.c:      for ( obj = ch->carrying; obj != NULL; obj = obj->next_content) {
act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
act_move.c:  if ( ch->move_speed < 0 || ch->move_speed >= MOVE_MAX )
act_move.c:    ch->move_speed = MOVE_WALK;
act_move.c:  if ( ch->move < move && ch->riding == NULL )
act_move.c:  if ( ch->riding != NULL && ch->riding->move < 2 * move )
act_move.c:  if ( ch->riding == NULL )
act_move.c:    ch->move -= move;
act_move.c:    ch->riding->move -= 2 * move;
act_move.c:  if ( ch->move_speed == MOVE_SNEAK && ch->riding == NULL )
act_move.c:      if ( ch->next_in_room != NULL )
act_move.c:    if ( ch->riding == NULL )
act_move.c:        move_names[ch->move_speed], TO_ROOM, SENSE_SIGHT|SENSE_HEARING );
act_move.c:      act( "$n leaves $t, riding $N.", ch, ch->riding, NULL, dir_name[door],
act_move.c:  if ( ch->riding != NULL )
act_move.c:    char_from_room( ch->riding );
act_move.c:    char_to_room( ch->riding, to_room, TRUE );
act_move.c:    if ( ch->riding == NULL )
act_move.c:        dir_name_2[rev_dir[door]], move_names[ch->move_speed],
act_move.c:      act( "$n has arrived from $t, riding $N.", ch, ch->riding, NULL,
act_move.c:    fch_next = fch->next_in_room;
act_move.c:    if ( fch->master == ch && fch->position == POS_STANDING
act_move.c:  if (!IS_UNSWITCHED_MOB(ch) && IS_SET(ch->act, PLR_HOLYWALK))
act_move.c:  switch( ch->move_speed )
act_move.c:  if (!IS_UNSWITCHED_MOB(ch) && IS_SET(ch->act, PLR_HOLYWALK))
act_move.c:  switch( ch->move_speed )
act_move.c:	    if ( ( pexit = ch->in_room->exit[door] ) != NULL
act_move.c:    if ( ( pexit = ch->in_room->exit[door] ) == NULL )
act_move.c:	    if ( ( pexit = ch->in_room->exit[dir] ) != NULL
act_move.c:    if ( ( pexit = ch->in_room->exit[dir] ) == NULL
act_move.c:	damage( ch, ch, UMIN(dice(1,pain),dice(1,ch->hit[0])), gsn_tumbling, NULL, gn_wear_none );
act_move.c:	pexit = ch->in_room->exit[door];
act_move.c:	&&   pexit_rev->to_room == ch->in_room )
act_move.c:	    for ( rch = to_room->people; rch != NULL; rch = rch->next_in_room )
act_move.c:	pexit = ch->in_room->exit[door];
act_move.c:	&&   pexit_rev->to_room == ch->in_room )
act_move.c:	    for ( rch = to_room->people; rch != NULL; rch = rch->next_in_room )
act_move.c:	pexit	= ch->in_room->exit[door];
act_move.c:	&&   pexit_rev->to_room == ch->in_room )
act_move.c:	    for ( rch = to_room->people; rch != NULL; rch = rch->next_in_room )
act_move.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
act_move.c:	if ( building->value[0] != ch->in_room->vnum )
act_move.c:	pexit	= ch->in_room->exit[door];
act_move.c:	&&   pexit_rev->to_room == ch->in_room )
act_move.c:	pexit = ch->in_room->exit[door];
act_move.c:	&&   pexit_rev->to_room == ch->in_room )
act_move.c:  for ( fi = ch->in_room->flora; fi != NULL; fi = fi->next )
act_move.c:    pexit = ch->in_room->exit[door];
act_move.c:    &&   pexit_rev->to_room == ch->in_room )
act_move.c:    switch ( ch->position )
act_move.c:	ch->position = POS_STANDING;
act_move.c:    switch ( ch->position )
act_move.c:	ch->position = POS_RESTING;
act_move.c:	ch->position = POS_RESTING;
act_move.c:    switch ( ch->position )
act_move.c:	ch->position = POS_RESTING;
act_move.c:    if ( ch->riding != NULL )
act_move.c:    for ( rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room )
act_move.c:	if ( rch->riding == mount )
act_move.c:    if ( rch != NULL && rch->riding == mount )
act_move.c:    ch->riding = mount;
act_move.c:    switch ( ch->position )
act_move.c:	ch->position = POS_SLEEPING;
act_move.c:	if (ch->position != POS_SLEEPING)
act_move.c:	ch->position = POS_RESTING;
act_move.c:  ch->move_speed = MOVE_WALK;
act_move.c:  ch->move_speed = MOVE_RUN;
act_move.c:  ch->move_speed = MOVE_SNEAK;
act_move.c:    if ( ch->riding == NULL )
act_move.c:    act("You stop riding $N.", ch, ch->riding, NULL, NULL, NULL, TO_CHAR, SENSE_SIGHT );
act_move.c:    act("$n stops riding $N.", ch, ch->riding, NULL, NULL, NULL, TO_ROOM, SENSE_SIGHT );
act_move.c:    ch->riding = NULL;
act_move.c:    for ( controls = ch->in_room->contents; controls != NULL; controls = controls->next_content )
act_move.c:        in_room = ch->in_room;
act_move.c:    for ( vch = in_room->people; vch != NULL; vch = vch->next_in_room )
act_move.c:    in_room = ch->in_room;
act_move.c:    for ( vch = to_room->people; vch != NULL; vch = vch->next_in_room )
act_move.c:    for ( building = ch->in_room->contents; building != NULL; building = building->next_content )
act_move.c:	REMOVE_BIT(ch->affected_by, AFF_HIDE);
act_move.c:	SET_BIT(ch->affected_by, AFF_HIDE);
act_move.c:    if (IS_SET(ch->affected_by, AFF_INVISIBLE) )
act_move.c:        REMOVE_BIT   ( ch->affected_by, AFF_INVISIBLE	);
act_obj.c:    if ( ch->carry_number + 1 > can_carry_n( ch ) )
act_obj.c:    if ( ch->carry_weight + get_obj_weight( obj ) > can_carry_w( ch ) )
act_obj.c:	    obj = get_obj_list( ch, arg1, ch->in_room->contents );
act_obj.c:	    for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
act_obj.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
act_obj.c:	for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
act_obj.c:	obj_to_room( create_money( amount, coin ), ch->in_room, TRUE );
act_obj.c:	obj_to_room( obj, ch->in_room, TRUE );
act_obj.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
act_obj.c:		obj_to_room( obj, ch->in_room, TRUE );
act_obj.c:    if ( !str_cmp( arg, "channel" ) && is_name( arg, ch->in_room->name ) )
act_obj.c:    if ( !str_cmp( arg, "lake" ) && is_name( arg, ch->in_room->name ) )
act_obj.c:    if ( !str_cmp( arg, "river" ) && is_name( arg, ch->in_room->name ) )
act_obj.c:    if ( !str_cmp( arg, "stream" ) && is_name( arg, ch->in_room->name ) )
act_obj.c:    if ( !str_cmp( arg, "waterfall" ) && is_name( arg, ch->in_room->name ) )
act_obj.c:	if ( !IS_SET( ch->in_room->room_flags, ROOM_DRINKABLE_WATER )
act_obj.c:    && IS_SET( ch->in_room->sector->flags, SECTOR_OUTDOORS ) )
act_obj.c:      ch->in_room->water += obj->value[1];
act_obj.c:    && IS_SET( ch->in_room->sector->flags, SECTOR_OUTDOORS ) )
act_obj.c:	for ( obj = ch->in_room->contents; obj; obj = obj->next_content )
act_obj.c:	&& ( !IS_SET( ch->in_room->room_flags, ROOM_DRINKABLE_WATER )
act_obj.c:    && ch->pcdata->condition[COND_DRUNK] > 10
act_obj.c:	ch->pcdata->condition[COND_THIRST] = 48;
act_obj.c:	    ch->pcdata->condition[COND_THIRST] = 48;
act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_DRUNK]  > 10 )
act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_FULL]   > 40 )
act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_THIRST] > 40 )
act_obj.c:	    ch->pcdata->condition[COND_FULL] = UMIN( ch->pcdata->condition[COND_FULL], 48 );
act_obj.c:	    ch->pcdata->condition[COND_THIRST] = UMIN( ch->pcdata->condition[COND_THIRST], 48 );
act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_FULL] > 40 )
act_obj.c:	    condition = ch->pcdata->condition[COND_FULL];
act_obj.c:	    if ( condition == 0 && ch->pcdata->condition[COND_FULL] > 0 )
act_obj.c:	    else if ( ch->pcdata->condition[COND_FULL] > 40 )
act_obj.c:    && ch->wearing[*wear_info[location].dependency] == NULL )
act_obj.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
act_obj.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
act_obj.c:    && ch->wearing[*wear_info[gn_wear_on_belt].dependency] == NULL )
act_obj.c:    for ( obj = ch->wearing[gn_wear_on_belt]; obj != NULL; obj = obj->next_worn )
act_obj.c:	  for ( vch = ch->in_room->people; vch != NULL; vch = vch_next )
act_obj.c:	    vch_next	= vch->next_in_room;
act_obj.c:	if ( ( obj = get_obj_list( ch, arg1, ch->in_room->contents ) ) == NULL )
act_obj.c:/*        if ( IS_SET(ch->act, PLR_HOLYWALK) )
act_obj.c:    && ( objfrom = get_obj_list( ch, arg2, ch->in_room->contents ) ) == NULL )
act_obj.c:/*        if ( IS_SET(ch->act, PLR_HOLYWALK ) )
act_obj.c:/*    if ( IS_SET(ch->act, PLR_HOLYWALK ) )
act_obj.c:    if ( ch->predelay_info == NULL )
act_obj.c:    type =  ch->predelay_info->number;
act_obj.c:    victim = ch->predelay_info->victim1;
act_obj.c:    obj = ch->predelay_info->obj1;
act_obj.c:    objfrom = ch->predelay_info->obj2;
act_obj.c:	|| obj->in_room != ch->in_room )
act_obj.c:	|| objfrom->in_room != ch->in_room )
act_obj.c:      || victim->in_room != ch->in_room
act_obj.c:	sprintf( buf, "%s is a bloody thief!", ch->name );
act_obj.c:    if ( ch->carry_number + 1 > can_carry_n( ch ) )
act_obj.c:    if ( ch->carry_weight + get_obj_weight( obj ) > can_carry_w( ch ) )
act_obj.c:	    obj_to_room( obj, ch->in_room, TRUE );
act_obj.c:	obj_to_room( item, ch->in_room, TRUE );
act_obj.c:	obj_to_room( item, ch->in_room, TRUE );
act_wiz.c:	free_string( ch->pcdata->bamfin, MEM_PCDATA );
act_wiz.c:	ch->pcdata->bamfin = str_dup( argument );
act_wiz.c:    for ( rch = char_list; rch != NULL; rch = rch->next )
act_wiz.c:	if ( !IS_NPC(rch) && !str_cmp( rch->name, name ) )
act_wiz.c:    rch->next = char_list;
act_wiz.c:	free_string( ch->pcdata->bamfout, MEM_PCDATA );
act_wiz.c:	ch->pcdata->bamfout = str_dup( argument );
act_wiz.c:	&&   d->character->in_room == ch->in_room )
act_wiz.c:	location = ch->in_room;
act_wiz.c:	&& !can_build( ( ch->desc->original != NULL ?
act_wiz.c:	                 ch->desc->original : ch), victim->pIndexData->area ) )
act_wiz.c:    original = ch->in_room;
act_wiz.c:    for ( wch = char_list; wch != NULL; wch = wch->next )
act_wiz.c:    if ( !IS_SET(ch->act, PLR_WIZINVIS) )
act_wiz.c:	    (ch->pcdata != NULL && ch->pcdata->bamfout[0] != '\0')
act_wiz.c:	    ? ch->pcdata->bamfout : "leaves in a swirling mist",
act_wiz.c:    if ( !IS_SET(ch->act, PLR_WIZINVIS) )
act_wiz.c:	    (ch->pcdata != NULL && ch->pcdata->bamfin[0] != '\0')
act_wiz.c:	    ? ch->pcdata->bamfin : "appears in a swirling mist",
act_wiz.c:    location = ( arg[0] == '\0' ) ? ch->in_room : find_location( ch, arg );
act_wiz.c:    if ( ch->in_room != location && room_is_private( location )
act_wiz.c:    for ( rch = location->people; rch; rch = rch->next_in_room )
act_wiz.c:	one_argument( rch->name, buf );
act_wiz.c:    sprintf( buf, "Reboot by %s.", ch->name );
act_wiz.c:        sprintf( buf, "Reboot for code by %s.", ch->name );
act_wiz.c:    sprintf( buf, "Shutdown by %s.", ch->name );
act_wiz.c:	    if ( d->snoop_by == ch->desc )
act_wiz.c:    if ( ch->desc != NULL )
act_wiz.c:	for ( d = ch->desc->snoop_by; d != NULL; d = d->snoop_by )
act_wiz.c:    victim->desc->snoop_by = ch->desc;
act_wiz.c:    if ( ch->desc == NULL )
act_wiz.c:    if ( ch->desc->original != NULL )
act_wiz.c:    ch->desc->character = victim;
act_wiz.c:    ch->desc->original  = ch;
act_wiz.c:    victim->desc        = ch->desc;
act_wiz.c:    ch->desc            = NULL;
act_wiz.c:    ch->switched_into	= victim;
act_wiz.c:    if ( ch->desc == NULL )
act_wiz.c:    if ( ch->desc->original == NULL )
act_wiz.c:    ch->desc->character       = ch->desc->original;
act_wiz.c:    ch->desc->original        = NULL;
act_wiz.c:    ch->desc->character->desc = ch->desc; 
act_wiz.c:    ch->desc                  = NULL;
act_wiz.c:    ch->switched_into	      = NULL;
act_wiz.c:    char_to_room( victim, ch->in_room, TRUE );
act_wiz.c:	obj_to_room( obj, ch->in_room, TRUE );
act_wiz.c:	for ( victim = ch->in_room->people; victim != NULL; victim = vnext )
act_wiz.c:	for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
act_wiz.c:    for ( rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room )
act_wiz.c:        sprintf( log_buf, "Log: %s changed %s's password.",ch->name,victim->name );
act_wiz.c:        sprintf( log_buf, "%s changed %s's password.",ch->name,victim->name );
act_wiz.c:    sprintf( log_buf, "%s: %s %s %s",ch->name,arg1,arg2,arg3 );
act_wiz.c:    if ( !can_build( ch, ch->in_room->area ) )
act_wiz.c:    location = ch->in_room;
act_wiz.c:      s = sector_lookup( arg3, ch->in_room->area );
act_wiz.c:	    vch_next = vch->next;
act_wiz.c:		if (IS_SET(vch->act, PLR_AFK)) {
act_wiz.c:		    REMOVE_BIT(vch->act, PLR_AFK);
act_wiz.c:		if (was_afk) SET_BIT(vch->act, PLR_AFK);
act_wiz.c:    if ( IS_SET(ch->act, PLR_WIZINVIS) )
act_wiz.c:	REMOVE_BIT(ch->act, PLR_WIZINVIS);
act_wiz.c:	SET_BIT(ch->act, PLR_WIZINVIS);
act_wiz.c:    if (IS_SET(ch->act, PLR_HOLYLIGHT)) {
act_wiz.c:        REMOVE_BIT(ch->act, PLR_HOLYLIGHT);
act_wiz.c:        SET_BIT(ch->act, PLR_HOLYLIGHT);
act_wiz.c:	REMOVE_BIT(ch->act, PLR_HOLYSPEECH);
act_wiz.c:	SET_BIT(ch->act, PLR_HOLYSPEECH);
act_wiz.c:    if (IS_SET(ch->act, PLR_HOLYNAME)) {
act_wiz.c:        REMOVE_BIT(ch->act, PLR_HOLYNAME);
act_wiz.c:        SET_BIT(ch->act, PLR_HOLYNAME);
act_wiz.c:    if (IS_SET(ch->act, PLR_HOLYWALK)) {
act_wiz.c:        REMOVE_BIT(ch->act, PLR_HOLYWALK);
act_wiz.c:        SET_BIT(ch->act, PLR_HOLYWALK);
act_wiz.c:    if (IS_SET(ch->act, PLR_HOLYVNUM)) {
act_wiz.c:        REMOVE_BIT(ch->act, PLR_HOLYVNUM);
act_wiz.c:        SET_BIT(ch->act, PLR_HOLYVNUM);
act_wiz.c:	    IS_SET(ch->act, PLR_HOLYLIGHT) ? "ON" : "OFF");
act_wiz.c:	    IS_SET(ch->act, PLR_HOLYNAME) ? "ON" : "OFF");
act_wiz.c:	    IS_SET(ch->act, PLR_HOLYWALK) ? "ON" : "OFF");
act_wiz.c:	    IS_SET(ch->act, PLR_HOLYVNUM) ? "ON" : "OFF");
change.c:  if ( ch->dynamic_descr )
change.c:    free_string( ch->dynamic_descr, MEM_GENERAL );
change.c:  ch->dynamic_descr = NULL;
change.c:        ch->dynamic_descr = str_dup( c );
change.c:        send_to_char( ch->dynamic_descr, ch );
change.c:      ch->language = i; 
character:act_wiz.c:	&&   d->character->in_room == ch->in_room )
character:act_wiz.c:	    if ( d->snoop_by == ch->desc )
character:act_wiz.c:	for ( d = ch->desc->snoop_by; d != NULL; d = d->snoop_by )
character:comm.c:	sprintf( log_buf, "%s@%s has connected.", ch->name, d->host );
character:comm.c:	sprintf( log_buf, "%s@%s has entered the game.", ch->name, d->host );
character:comm.c:	  ch->name, d->host );
character:comm.c:	&& !str_cmp( d->character->name, ch->name ) )
character:comm.c:		d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
character:comm.c:    sprintf( log_buf, "%s@%s reconnected.", ch->name, d->host );
character:handler.c:    for ( paf_old = ch->affected; paf_old != NULL; paf_old = paf_old->next )
character:olc.c:	for ( ed = ch->in_room->extra_descr; ed != NULL; ed = ed->next )
character:olc.c:	ed->description = str_dup_tab( ch->pnote->text, TRUE );
character:olc.c:	for ( ed = ch->in_room->extra_descr; ed != NULL; ed = ed->next )
character:olc.c:	ch->pnote->text = str_dup_tab( ed->description, FALSE );
character:olc.c:		pAppend->next = ch->in_room->area->reset_first;
character:olc.c:    for ( ed = ch->in_room->extra_descr; ed != NULL; ed = ed->next )
character:olc.c:	ed->next = ch->in_room->extra_descr;
character:olc.c:	    ch->in_room->extra_descr = ed->next;
comm.c:	sprintf( log_buf, "Closing link to %s.", ch->name );
comm.c:	    ch->desc = NULL;
comm.c:	if ( IS_SET(ch->act, PLR_BLANK) )
comm.c:	if ( IS_SET(ch->act, PLR_TELNET_GA) )
comm.c:   if( ch->prompt == NULL )
comm.c:   else if ( ch->prompt[0] == '\0' )
comm.c:            sprintf( buf2, "%d", ch->hit[HIT_LOC_BODY] );
comm.c:            sprintf( buf2, "%d", ch->max_hit );
comm.c:            if ( IS_IMMORTAL(ch) && IS_SET(ch->act, PLR_WIZINVIS) )
comm.c:            sprintf( buf2, "%d", ch->mana );
comm.c:            sprintf( buf2, "%d", ch->max_mana );
comm.c:            sprintf( buf2, "%d", ch->move );
comm.c:            sprintf( buf2, "%d", ch->max_move );
comm.c:            if( ch->in_room != NULL )
comm.c:		((!IS_NPC(ch) && IS_SET(ch->act,PLR_HOLYLIGHT)) ||
comm.c:		 (!IS_AFFECTED(ch,AFF_BLIND) && !room_is_dark( ch->in_room, ch ) != VISION_NORMAL))
comm.c:		? ch->in_room->name : "darkness");
comm.c:            if( ch->in_room != NULL )
comm.c:               sprintf( buf2, "%s", ch->in_room->name );
comm.c:            if( IS_IMMORTAL( ch ) && ch->in_room != NULL )
comm.c:               sprintf( buf2, "%d", ch->in_room->vnum );
comm.c:            if( IS_IMMORTAL( ch ) && ch->in_room != NULL )
comm.c:               sprintf( buf2, "%s", ch->in_room->area->name );
comm.c:   write_to_buffer( ch->desc, buf, point - buf );
comm.c:	if ( strcmp( crypt( argument, ch->pcdata->pwd ), ch->pcdata->pwd ) )
comm.c:	if ( check_reconnect( d, ch->name, TRUE ) )
comm.c:	if ( IS_SET( ch->act, PLR_REJECTED ) )
comm.c:		ch->pcdata->rejected );
comm.c:		REJECTED_DIR, capitalize( ch->name ) );
comm.c:	if (IS_SET(ch->act, PLR_AFK))
comm.c:	    REMOVE_BIT(ch->act, PLR_AFK);
comm.c:	sprintf( log_buf, "%s@%s has connected.", ch->name, d->host );
comm.c:	sprintf( buf, "\n\rWelcome back, %s.\n\r", ch->name );
comm.c:	if ( IS_SET( ch->act, PLR_UNAPPROVED ) )
comm.c:	ch->next	= char_list;
comm.c:	if ( ch->level == 0 )
comm.c:	    ch->perm_stat_phys_str
comm.c:	      = number_stat() + race_array[ch->race]->stat_phys_str_mod;
comm.c:	    ch->perm_stat_phys_dex
comm.c:	      = number_stat() + race_array[ch->race]->stat_phys_dex_mod;
comm.c:	    ch->perm_stat_phys_tou
comm.c:	      = number_stat() + race_array[ch->race]->stat_phys_tou_mod;
comm.c:	    ch->perm_stat_phys_qui
comm.c:	      = number_stat() + race_array[ch->race]->stat_phys_qui_mod;
comm.c:	    ch->perm_stat_ment_int
comm.c:	      = number_stat() + race_array[ch->race]->stat_ment_int_mod;
comm.c:	    ch->perm_offense = 10;
comm.c:	    ch->level	= 1;
comm.c:	    ch->max_hit = race_array[ch->race]->hits_base
comm.c:    + dice( race_array[ch->race]->hitnodice, race_array[ch->race]->hitsizedice );
comm.c:	    ch->hit[HIT_LOC_BODY]	= ch->max_hit;
comm.c:	    ch->max_mana = race_array[ch->race]->mana;
comm.c:	    ch->mana	= ch->max_mana;
comm.c:	    ch->max_move = race_array[ch->race]->move;
comm.c:	    ch->move	= ch->max_move;
comm.c:	    ch->vision_min = race_array[ch->race]->vision_min;
comm.c:	    ch->vision_max = race_array[ch->race]->vision_max;
comm.c:	    ch->vision_range = race_array[ch->race]->vision_range;
comm.c:	    ch->prompt = NULL;
comm.c:	    ch->height = race_array[ch->race]->height_base
comm.c:                         + dice( race_array[ch->race]->heightnodice,
comm.c:                                 race_array[ch->race]->heightsizedice );
comm.c:	    ch->weight = race_array[ch->race]->weight_base
comm.c:                         + dice( race_array[ch->race]->weightnodice,
comm.c:                                 race_array[ch->race]->weightsizedice );
comm.c:            ch->pcdata->learned[gsn_common] = 100;
comm.c:	else if ( ch->in_room != NULL )
comm.c:	    char_to_room( ch, ch->in_room, FALSE );
comm.c:	sprintf( log_buf, "%s@%s has entered the game.", ch->name, d->host );
comm.c:	if ( IS_SET(ch->act, PLR_DENY) )
comm.c:        if (IS_SET(ch->act, PLR_DEAD) )
comm.c:	pwdnew = crypt( argument, ch->name );
comm.c:	free_string( ch->pcdata->pwd, MEM_PCDATA );
comm.c:	ch->pcdata->pwd	= str_dup( pwdnew );
comm.c:	if ( strcmp( crypt( argument, ch->pcdata->pwd ), ch->pcdata->pwd ) )
comm.c:	case 'm': case 'M': ch->sex = SEX_MALE;    break;
comm.c:	case 'f': case 'F': ch->sex = SEX_FEMALE;  break;
comm.c:		ch->race = iRace;
comm.c:	    if ( race_array[ch->race]->classes[iClass] == TRUE )
comm.c:		ch->class = iClass;
comm.c:	if ( iClass == MAX_CLASS || race_array[ch->race]->classes[iClass] == FALSE )
comm.c:	ch->long_descr = str_dup( argument );
comm.c:	ch->short_descr = str_dup( argument );
comm.c:	ch->namelist = str_dup( argument );
comm.c:	    strcpy( buf, ch->description );
comm.c:	    free_string( ch->description, MEM_PCDATA );
comm.c:	    ch->description = str_dup( buf );
comm.c:	ch->pcdata->email_address = str_dup( argument );
comm.c:	ch->pcdata->rejected = str_dup( "" );
comm.c:	SET_BIT( ch->act, PLR_UNAPPROVED );
comm.c:        SET_BIT( ch->act, PLR_HOLYLIGHT );
comm.c:	  ch->name, d->host );
comm.c:    for ( ch = char_list; ch != NULL; ch = ch->next )
comm.c:	&& ( ch->name && !str_cmp( ch->name, name ) )
comm.c:	&& IS_SET( ch->act, PLR_REVIEWING ) )
comm.c:    for ( ch = char_list; ch != NULL; ch = ch->next )
comm.c:	&& ( !fConn || ch->desc == NULL )
comm.c:	&& !str_cmp( d->character->name, ch->name ) )
comm.c:		d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
comm.c:		if ( ch->switched_into != NULL )
comm.c:		    do_return( ch->switched_into, "" );
comm.c:    if ( ch->desc != NULL )
comm.c:	free_descriptor( ch->desc );
comm.c:    ch->desc         = d;
comm.c:    ch->timer        = 0;
comm.c:    sprintf( log_buf, "%s@%s reconnected.", ch->name, d->host );
comm.c:    if (IS_SET(ch->act, PLR_AFK)) 
comm.c:	REMOVE_BIT(ch->act, PLR_AFK);
comm.c:    ||   ch->desc == NULL
comm.c:    ||   ch->desc->connected != CON_PLAYING
comm.c:    ||   ch->was_in_room == NULL 
comm.c:    ||   ch->in_room != get_room_index( ROOM_VNUM_LIMBO ) )
comm.c:    ch->timer = 0;
comm.c:    char_to_room( ch, ch->was_in_room, FALSE );
comm.c:    ch->was_in_room	= NULL;
comm.c:    if ( txt == NULL || ch->desc == NULL )
comm.c:    if ( ch->desc->showstr_point )
comm.c:	write_to_buffer( ch->desc, txt, strlen( txt ) );
comm.c:    ch->desc->showstr_head = alloc_mem( strlen( txt ) + 1 );
comm.c:    strcpy( ch->desc->showstr_head, txt );
comm.c:    ch->desc->showstr_point = ch->desc->showstr_head;
comm.c:    show_string( ch->desc, "" );
comm.c:    to = ch->in_room->people;
comm.c:	to = vch->in_room->people;
db.c:  pArea = ch->in_room->area;
db.c:    pArea = ch->in_room->area;
db.c:    ch->in_room->area->vnum_final = vnum;
db.c:    ch->next_fighting		= NULL;
db.c:    ch->name			= &str_empty[0];
db.c:    ch->short_descr		= &str_empty[0];
db.c:    ch->long_descr		= &str_empty[0];
db.c:    ch->dynamic_descr		= NULL;
db.c:    ch->description		= &str_empty[0];
db.c:    ch->prompt			= NULL;
db.c:    ch->predelay_time		= 0;
db.c:    ch->predelay_info		= NULL;
db.c:    ch->position		= POS_STANDING;
db.c:    ch->hit[HIT_LOC_BODY]	= 20;
db.c:    ch->max_hit			= 20;
db.c:    ch->mana			= 100;
db.c:    ch->max_mana		= 100;
db.c:    ch->move			= 100;
db.c:    ch->max_move		= 100;
db.c:    ch->perm_stat_phys_str	= 40;
db.c:    ch->perm_stat_phys_dex	= 40;
db.c:    ch->perm_stat_phys_tou	= 40;
db.c:    ch->perm_stat_phys_qui	= 40;
db.c:    ch->perm_stat_ment_int	= 40;
db.c:    ch->pReset			= NULL;
db.c:    ch->riding			= NULL;
db.c:    ch->switched_into		= NULL;
db.c:    ch->language		= 0;
db.c:    ch->move_speed		= MOVE_WALK;
db.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
db.c:    for ( paf = ch->affected; paf != NULL; paf = paf_next )
db.c:    free_string( ch->name, MEM_MOB_NAME_FREE_CHAR );
db.c:    free_string( ch->namelist, MEM_MOB_NAMELIST_FREE_CHAR );
db.c:    free_string( ch->short_descr, MEM_MOB_SHORT_DESCR_FREE_CHAR );
db.c:    free_string( ch->long_descr, MEM_MOB_LONG_DESCR_FREE_CHAR );
db.c:    free_string( ch->description, MEM_MOB_DESCRIPTION_FREE_CHAR );
db.c:    free_string( ch->spec_fun_name, MEM_MOB_SPEC_FUN_NAME_FREE_CHAR );
db.c:    free_string( ch->prompt, MEM_GENERAL );
db.c:    free_predelay( ch->predelay_info );
db.c:    if ( ch->pcdata != NULL )
db.c:	free_string( ch->pcdata->pwd, MEM_PCDATA );
db.c:	free_string( ch->pcdata->bamfin, MEM_PCDATA );
db.c:	free_string( ch->pcdata->bamfout, MEM_PCDATA );
db.c:	free_string( ch->pcdata->email_address, MEM_PCDATA );
db.c:	free_string( ch->pcdata->rejected, MEM_PCDATA );
db.c:	ch->pcdata->next = pcdata_free;
db.c:	pcdata_free      = ch->pcdata;
db.c:    ch->next	     = char_free;
emote.c:  if ( ach->leader != NULL ) 
emote.c:    ach = ach->leader;
emote.c:  if ( bch->leader != NULL ) 
emote.c:    bch = bch->leader;
emote.c:  for (vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room) {
emote.c:    vch->leader=NULL;
emote.c:	vch->leader=ch;
emote.c:  for (vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room) {              
emote.c:      if (vch->leader==ch) {
emote.c:	  wch->leader = ch;
emote.c:	  wch->leader = ch;
emote.c:	strcat(buf, ((vch == wch) ? "you" : him_her[wch->sex]));
emote.c:          wch->leader = ch;
emote.c:        strcat(buf, ((vch == wch) ? "your" : his_her[wch->sex]));
emote.c:          wch->leader = ch;
emote.c:        strcat(buf, ((vch == wch) ? "you" : he_she[wch->sex]));
emote.orig:  if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_NO_EMOTE) )
emote.orig:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
emote.orig:		      strcat( buf, him_her[wch->sex] );
emote.orig:		      strcat( buf, his_her[wch->sex] );
emote.orig:		      strcat( buf, he_she[wch->sex] );
fight.c:	combat_next = ch->next_fighting;
fight.c:	if ( ( victim = ch->fighting ) == NULL || ch->in_room == NULL )
fight.c:      if ( --ch->strike_rank < 0 )
fight.c:	if ( IS_AWAKE(ch) && ch->in_room == victim->in_room )
fight.c:	ch->strike_rank = calc_strike_rank( ch );
fight.c:	if ( ( victim = ch->fighting ) == NULL )
fight.c:	&& --ch->strike_rank_2 < 0 )
fight.c:	    if ( IS_AWAKE(ch) && ch->in_room == victim->in_room )
fight.c:	    ch->strike_rank_2 = calc_strike_rank( ch ) + 100
fight.c:	    if ( ( victim = ch->fighting ) == NULL )
fight.c:	for ( rch = ch->in_room->people; rch != NULL; rch = rch_next )
fight.c:	    rch_next = rch->next_in_room;
fight.c:	    if ( IS_AWAKE(rch) && rch->fighting == NULL )
fight.c:    if ( victim->position == POS_DEAD || ch->in_room != victim->in_room )
fight.c:    attacker_roll = ch->perm_offense + ch->mod_offense;
fight.c:	if ( dice(1,100) > ch->perm_offense && !number_bits( 5 ) )
fight.c:	    ch->perm_offense++;
fight.c:	dam = dice( ch->damnodice, ch->damsizedice );
fight.c:	    dam = dam + ch->damplus;
fight.c:	    dam += ch->damplus;
fight.c:	    dam += dice( ch->damnodice, ch->damsizedice ) + ch->damplus;
fight.c:    if ( victim->position == POS_DEAD || ch->in_room != victim->in_room )
fight.c:    attacker_roll = ch->perm_offense + ch->mod_offense;
fight.c:	if ( dice(1,100) > ch->pcdata->learned[gsn_dual_wield]
fight.c:	    ch->pcdata->learned[gsn_dual_wield]++;
fight.c:    if ( !IS_NPC(ch) && ch->pcdata->learned[gsn_enhanced_damage] > 0 )
fight.c:	dam += dam * ch->pcdata->learned[gsn_enhanced_damage] / 100;
fight.c:	    REMOVE_BIT( ch->affected_by, AFF_INVISIBLE );
fight.c:	    if ( IS_NPC(ch) && number_percent( ) < ch->level / 2 )
fight.c:	    if ( IS_NPC(ch) && number_percent( ) < ch->level / 2 )
fight.c:		(IS_NPC(ch) ? ch->short_descr : ch->name),
fight.c:  if ( ch->fighting != NULL )
fight.c:    if ( ch->desc != NULL
fight.c:    && ch->desc->original != NULL 
fight.c:    && IS_SET( ch->desc->original->act, PLR_PEACEFUL ) )
fight.c:  else if ( IS_SET( ch->act, PLR_PEACEFUL ) )
fight.c:    if ( ch->fighting != NULL )
fight.c:    ch->fighting = victim;
fight.c:    ch->next_fighting = combat_list;
fight.c:    for ( fch = char_list; fch != NULL; fch = fch->next )
fight.c:	    fch->fighting	= NULL;
fight.c:	if ( fBoth && fch->fighting == ch )
fight.c:    combat_list = ch->next_fighting;
fight.c:    for ( fch = combat_list; fch != NULL; fch = fch->next_fighting )
fight.c:	if ( fch->next_fighting == ch )
fight.c:	    fch->next_fighting = ch->next_fighting;
fight.c:    ch->next_fighting = NULL;
fight.c:	name		= ch->short_descr;
fight.c:    if ( IS_NPC( ch ) && ( pMobIndex = ch->pIndexData ) != NULL )
fight.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
fight.c:    obj_to_room( corpse, ch->in_room, TRUE );
fight.c:    was_in_room = ch->in_room;
fight.c:	    ch->in_room = pexit->to_room;
fight.c:    ch->in_room = was_in_room;
fight.c:    lch = (ch->leader != NULL) ? ch->leader : ch;
fight.c:    for ( gch = ch->in_room->people; gch != NULL; gch = gch->next_in_room )
fight.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
fight.c:		obj_to_room( obj, ch->in_room, TRUE );
fight.c:  if ( IS_AFFECTED(ch, AFF_CHARM) && ch->master == victim )
fight.c:  if ( ch->fighting != NULL )
fight.c:    if ( ch->fighting == victim )
fight.c:    ch->fighting = victim;
fight.c:    if ( arg[0] == '\0' && ch->fighting == NULL )
fight.c:	victim = ch->fighting;
fight.c:	if ( get_skill( ch, gsn_bash ) < ch->perm_stat_phys_str )
fight.c:	ch->position = POS_RESTING;
fight.c:    if ( ch->position < POS_STANDING )
fight.c:    was_in = ch->in_room;
fight.c:	if ( ( now_in = ch->in_room ) == was_in )
fight.c:	ch->in_room = was_in;
fight.c:	ch->in_room = now_in;
fight.c:    if ( ch->fighting == victim )
fight.c:    if ( arg[0] == '\0' && ch->fighting == NULL )
fight.c:	victim = ch->fighting;
fight.c:    if ( ( victim = ch->fighting ) == NULL )
fight.c:	act("$n attempted to disarm you.", ch, ch->fighting, NULL, NULL, NULL, TO_VICT, SENSE_SIGHT );
fight.c:	act("$N maintained their grip on their weapon.", ch, ch->fighting, NULL, NULL, NULL, TO_CHAR, SENSE_SIGHT|SENSE_TOUCH );
fight.c:    if ( !IS_NPC(victim) && victim->level >= ch->level )
fight.c:  if ( ch->in_room == NULL )
fight.c:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
fight.c:    if ( vch->fighting == ch )
fight.c:  if ( i == 0 && ch->fighting != NULL )
fileio.c:            ch->in_room ? ch->in_room->vnum : 0, ch->name, str );
flora.c:  for ( fi = ch->in_room->flora; fi != NULL; fi = fi->next )
flora.c:    write_environment_area( ch->in_room->area );
flora.c:    if ( ch->in_room->flora == NULL )
flora.c:    update_flora( ch->in_room );
flora.c:    for ( fi = ch->in_room->flora; fi != NULL; fi = fi->next )
flora.c:    fi->next = ch->in_room->flora;
flora.c:    ch->in_room->flora = fi;
flora.c:    destroy_flora( fi, ch->in_room );
handler.c:    if ( ch->desc != NULL && ch->desc->original != NULL )
handler.c:	ch = ch->desc->original;
handler.c:    if ( ch->trust != 0 )
handler.c:	return ch->trust;
handler.c:    if ( IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
handler.c:	return ch->level;
handler.c:    year = (long) current_time - (long) ch->pcdata->birth;
handler.c:    return ( ch->pcdata->played + (int) (current_time - ch->pcdata->logon) ) / 3600;
handler.c:    return URANGE( 3, ch->perm_stat_phys_str + ch->mod_stat_phys_str, 200 );
handler.c:    return URANGE( 3, ch->perm_stat_ment_int + ch->mod_stat_ment_int, 200 );
handler.c:    return URANGE( 3, ch->perm_stat_phys_dex + ch->mod_stat_phys_dex, 200 );
handler.c:    return URANGE( 3, ch->perm_stat_phys_qui + ch->mod_stat_phys_qui, 200 );
handler.c:    return URANGE( 3, ch->perm_stat_phys_tou + ch->mod_stat_phys_tou, 200 );
handler.c:	return ch->pcdata->learned[sn];
handler.c:    if ( ch->pIndexData == NULL )
handler.c:    return ch->pIndexData->learned[sn];
handler.c:	return ch->pcdata->power_level[sn];
handler.c:    if ( ch->pIndexData == NULL )
handler.c:    return ch->pIndexData->power_level[sn];
handler.c:    if ( !IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
handler.c:    if ( !IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
handler.c:    delay_new->next	= ch->pcdata->skill_delays;
handler.c:    ch->pcdata->skill_delays	= delay_new;
handler.c:    if ( ch->pcdata->skill_delays == NULL )
handler.c:    if ( delay == ch->pcdata->skill_delays )
handler.c:	ch->pcdata->skill_delays	= delay->next;
handler.c:	for ( prev = ch->pcdata->skill_delays; prev != NULL; prev = prev->next )
handler.c:  for ( delay = ch->pcdata->skill_delays; delay != NULL; delay = delay->next )
handler.c:	SET_BIT( ch->affected_by, paf->bitvector );
handler.c:	REMOVE_BIT( ch->affected_by, paf->bitvector );
handler.c:    case APPLY_STAT_PHYS_STR: ch->mod_stat_phys_str	+= mod;	break;
handler.c:    case APPLY_STAT_PHYS_DEX: ch->mod_stat_phys_dex	+= mod;	break;
handler.c:    case APPLY_STAT_PHYS_TOU: ch->mod_stat_phys_tou	+= mod;	break;
handler.c:    case APPLY_STAT_PHYS_QUI: ch->mod_stat_phys_qui	+= mod;	break;
handler.c:    case APPLY_STAT_MENT_INT: ch->mod_stat_ment_int	+= mod;	break;
handler.c:    case APPLY_SEX:           ch->sex			+= mod;	break;
handler.c:    case APPLY_MANA:          ch->max_mana		+= mod;	break;
handler.c:    case APPLY_HIT:           ch->max_hit		+= mod;	break;
handler.c:    case APPLY_MOVE:          ch->max_move		+= mod;	break;
handler.c:    case APPLY_HITROLL:       ch->hitroll		+= mod;	break;
handler.c:    case APPLY_DAMROLL:       ch->damroll		+= mod;	break;
handler.c:    case APPLY_SAVING_PARA:   ch->saving_throw		+= mod;	break;
handler.c:    case APPLY_SAVING_ROD:    ch->saving_throw		+= mod;	break;
handler.c:    case APPLY_SAVING_PETRI:  ch->saving_throw		+= mod;	break;
handler.c:    case APPLY_SAVING_BREATH: ch->saving_throw		+= mod;	break;
handler.c:    case APPLY_SAVING_SPELL:  ch->saving_throw		+= mod;	break;
handler.c:    case APPLY_ABSORBTION:    ch->general_absorb	+= mod; break;
handler.c:    case APPLY_CHANNELING:    ch->channeling		+= mod; break;
handler.c:    case APPLY_VISION_PROFILE:  ch->vision_min += mod;
handler.c:				ch->vision_max += mod;		break;
handler.c:    case APPLY_VISION_RANGE:	ch->vision_range += mod;	break;
handler.c:	    obj_to_room( wield, ch->in_room, TRUE );
handler.c:    paf_new->next	= ch->affected;
handler.c:    ch->affected	= paf_new;
handler.c:    if ( ch->affected == NULL )
handler.c:    if ( paf == ch->affected )
handler.c:	ch->affected	= paf->next;
handler.c:	for ( prev = ch->affected; prev != NULL; prev = prev->next )
handler.c:    for ( paf = ch->affected; paf != NULL; paf = paf_next )
handler.c:    for ( paf = ch->affected; paf != NULL; paf = paf->next )
handler.c:    for ( paf_old = ch->affected; paf_old != NULL; paf_old = paf_old->next )
handler.c:    if ( (room = ch->in_room) == NULL )
handler.c:	--ch->in_room->area->nplayer;
handler.c:    ch->in_room->light_mod -= ch->light;
handler.c:    if ( ch == ch->in_room->people )
handler.c:	ch->in_room->people = ch->next_in_room;
handler.c:	for ( prev = ch->in_room->people; prev; prev = prev->next_in_room )
handler.c:		prev->next_in_room = ch->next_in_room;
handler.c:    ch->in_room      = NULL;
handler.c:    ch->next_in_room = NULL;
handler.c:    ch->in_room		= pRoomIndex;
handler.c:    ch->next_in_room	= pRoomIndex->people;
handler.c:	++ch->in_room->area->nplayer;
handler.c:    ch->in_room->light_mod += ch->light;
handler.c:    obj->next_content	 = ch->carrying;
handler.c:    ch->carrying	 = obj;
handler.c:    ch->carry_number	+= 1;
handler.c:    ch->carry_weight	+= get_obj_weight( obj );
handler.c:    if ( ch->carrying == obj )
handler.c:	ch->carrying = obj->next_content;
handler.c:	for ( prev = ch->carrying; prev != NULL; prev = prev->next_content )
handler.c:    ch->carry_number	-= 1;
handler.c:    ch->carry_weight	-= get_obj_weight( obj );
handler.c:    return ch->wearing[iWear];
handler.c:    iWear = race_array[ch->race]->hit_loc_location[hit_loc];
handler.c:	obj_to_room( obj, ch->in_room, TRUE );
handler.c:    if ( ch->wearing[iWear] == NULL )
handler.c:	ch->wearing[iWear] = obj;
handler.c:    else if ( ch->wearing[iWear]->size > 50 )
handler.c:	obj->next_worn = ch->wearing[iWear]->next_worn;
handler.c:	ch->wearing[iWear]->next_worn = obj;
handler.c:	obj->next_worn = ch->wearing[iWear];
handler.c:	ch->wearing[iWear] = obj;
handler.c:    &&   ch->in_room != NULL )
handler.c:	ch->in_room->light_mod += obj->value[0];
handler.c:	ch->light += obj->value[0];
handler.c:	ch->in_room->light_mod += GLOW_LIGHT;
handler.c:	ch->light += GLOW_LIGHT;
handler.c:	ch->in_room->light_mod += DARK_LIGHT;
handler.c:	ch->light += DARK_LIGHT;
handler.c:    if ( ch->wearing[wear_loc] == NULL )
handler.c:    else if ( ch->wearing[wear_loc] == obj )
handler.c:	ch->wearing[wear_loc] = obj->next_worn;
handler.c:	for ( o = ch->wearing[wear_loc]; o != NULL; o = o->next_worn )
handler.c:    if ( obj != ch->carrying )
handler.c:	for ( prev = ch->carrying; prev != NULL; prev = prev->next_content )
handler.c:	obj->next_content = ch->carrying;
handler.c:	ch->carrying = obj;
handler.c:    &&   ch->in_room != NULL )
handler.c:	ch->in_room->light_mod -= obj->value[0];
handler.c:	ch->light -= obj->value[0];
handler.c:	ch->in_room->light_mod -= GLOW_LIGHT;
handler.c:	ch->light -= GLOW_LIGHT;
handler.c:	ch->in_room->light_mod -= DARK_LIGHT;
handler.c:	ch->light -= DARK_LIGHT;
handler.c:    if ( ch->wearing[wear_loc] != NULL
handler.c:    || ch->in_room == NULL )
handler.c:	    while( (od = ch->wearing[i]) != NULL )
handler.c:		obj_to_room( od, ch->in_room, TRUE );
handler.c:    for ( ch = char_list; ch != NULL; ch = ch->next )
handler.c:	if ( (p = ch->predelay_info) != NULL )
handler.c:    if ( ch->in_room == NULL )
handler.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
handler.c:	if ( ch->pReset != NULL )
handler.c:	    ch->pReset->target = NULL;
handler.c:    if ( ch->desc != NULL && ch->desc->original != NULL )
handler.c:    for ( wch = char_list; wch != NULL; wch = wch->next )
handler.c:	if ( wch->reply == ch )
handler.c:	    wch->reply = NULL;
handler.c:	if ( (p = wch->predelay_info) != NULL )
handler.c:    while ( ch->hunting != NULL )
handler.c:	remove_hunting( ch, ch->hunting->victim, TRUE );
handler.c:       char_list = ch->next;
handler.c:		prev->next = ch->next;
handler.c:    if ( ch->desc )
handler.c:        ch->desc->character = NULL;
handler.c:    for ( rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room )
handler.c:	( !is_name( arg, rch->name ) && !is_name( arg, rch->namelist ) ) )
handler.c:    for ( wch = char_list; wch != NULL ; wch = wch->next )
handler.c:	( !is_name( arg, wch->name ) && !is_name( arg, wch->namelist ) ) )
handler.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
handler.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
handler.c:    obj = get_obj_list( ch, argument, ch->in_room->contents );
handler.c:    diff = ch->vision_current - room_light( pRoomIndex );
handler.c:    for ( rch = pRoomIndex->people; rch != NULL; rch = rch->next_in_room )
handler.c:    if ( (!IS_NPC(ch) && IS_SET(ch->act, PLR_HOLYLIGHT)) 
handler.c:    if ( room_is_dark( ch->in_room, ch ) == VISION_TOO_DARK
handler.c:    || room_is_dark( ch->in_room, ch ) == VISION_TOO_BRIGHT )
handler.c:    if ( room_is_dark( ch->in_room, ch ) == VISION_HAZY )
handler.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_HOLYLIGHT) )
handler.c:    if ( room_is_dark( ch->in_room, ch ) == VISION_TOO_DARK
handler.c:    || room_is_dark( ch->in_room, ch ) == VISION_TOO_BRIGHT )
handler.c:    if ( !IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
handler.c:    if ( IS_NPC( victim ) && ch->pIndexData == victim->pIndexData )
handler.c:    aggr_bits = ch->aggression;
handler.c:	if ( victim->weight > ch->weight )
handler.c:	aggr += ch->weight - victim->weight;
handler.c:	aggr -= (ch->max_hit - ch->hit[HIT_LOC_BODY])*100/ch->max_hit;
handler.c:	aggr -= race_array[ch->race]->relations[victim->race];
handler.c:    if ( ch->predelay_info != NULL )
handler.c:	free_predelay( ch->predelay_info );
handler.c:    ch->predelay_info = p;
handler.c:    ch->predelay_time = delay;
hit:act_comm.c:    if ( !str_cmp( ch->name, pnote->sender ) )
hit:act_comm.c:    if ( is_name( ch->name, pnote->to_list ) )
hit:act_comm.c:    if ( ch->pnote != NULL )
hit:act_comm.c:	pnote	  = alloc_perm( sizeof(*ch->pnote) );
hit:act_comm.c:    pnote->sender	= str_dup( ch->name );
hit:act_comm.c:    ch->pnote		= pnote;
hit:act_comm.c:	REMOVE_BIT(ch->act, PLR_AFK);
hit:act_comm.c:    if (IS_SET(ch->act, PLR_AFK)) {
hit:act_comm.c:       REMOVE_BIT(ch->act, PLR_AFK);
hit:act_comm.c:	SET_BIT(ch->act, PLR_AFK);
hit:act_comm.c:	if ( to_one[0] != '\0' && str_cmp( ch->name, to_one ) )
hit:act_comm.c:    if ( str_cmp( ch->name, pnote->sender ) && to_new[0] != '\0' 
hit:act_comm.c:    if ( ch->pnote == NULL || ch->pnote->text[0] == '\0' )
hit:act_comm.c:    oldb = ch->pnote->text;
hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:act_comm.c:	    free_string( ch->pnote->text, MEM_GENERAL );
hit:act_comm.c:	    ch->pnote->text = str_dup( buf );
hit:act_comm.c:	send_to_char( ch->pnote->text, ch );
hit:act_comm.c:	strcpy( buf, ch->pnote->text );
hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:act_comm.c:	free_string( ch->pnote->subject, MEM_GENERAL );
hit:act_comm.c:	ch->pnote->subject = str_dup( argument );
hit:act_comm.c:	free_string( ch->pnote->to_list, MEM_GENERAL );
hit:act_comm.c:	ch->pnote->to_list = str_dup( argument );
hit:act_comm.c:	if ( ch->pnote != NULL )
hit:act_comm.c:	    free_string( ch->pnote->text, MEM_GENERAL );
hit:act_comm.c:	    free_string( ch->pnote->subject, MEM_GENERAL );
hit:act_comm.c:	    free_string( ch->pnote->to_list, MEM_GENERAL );
hit:act_comm.c:	    free_string( ch->pnote->date, MEM_GENERAL );
hit:act_comm.c:	    free_string( ch->pnote->sender, MEM_GENERAL );
hit:act_comm.c:	    ch->pnote->next	= note_free;
hit:act_comm.c:	    note_free		= ch->pnote;
hit:act_comm.c:	    ch->pnote		= NULL;
hit:act_comm.c:	if ( ch->pnote == NULL )
hit:act_comm.c:	    ch->pnote->sender,
hit:act_comm.c:	    ch->pnote->subject,
hit:act_comm.c:	    ch->pnote->to_list
hit:act_comm.c:	send_to_char( ch->pnote->text, ch );
hit:act_comm.c:	if ( ch->pnote == NULL )
hit:act_comm.c:	ch->pnote->next			= NULL;
hit:act_comm.c:	ch->pnote->date			= str_dup( strtime );
hit:act_comm.c:	    note_list	= ch->pnote;
hit:act_comm.c:	    pnote->next	= ch->pnote;
hit:act_comm.c:	pnote		= ch->pnote;
hit:act_comm.c:	ch->pnote	= NULL;
hit:act_comm.c:    REMOVE_BIT(ch->deaf, channel);
hit:act_comm.c:	position	= ch->position;
hit:act_comm.c:	ch->position	= POS_STANDING;
hit:act_comm.c:	ch->position	= position;
hit:act_comm.c:	&&  !IS_SET(och->deaf, channel) )
hit:act_comm.c:	    position		= vch->position;
hit:act_comm.c:	    vch->position	= position;
hit:act_comm.c:  gsn = *language_table[ch->language].pgsn;
hit:act_comm.c:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
hit:act_comm.c:    if ( ch->in_room->exit[door] == NULL
hit:act_comm.c:    || ( room = ch->in_room->exit[door]->to_room ) == NULL )
hit:act_comm.c:    for ( vch = room->people; vch != NULL; vch = vch->next_in_room )
hit:act_comm.c:  gsn = *language_table[ch->language].pgsn;
hit:act_comm.c:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
hit:act_comm.c:           sprintf(log_buf, "%s wishes to all \"%s\"",ch->name,argument );
hit:act_comm.c:    || ( IS_NPC(victim) && victim->in_room != ch->in_room ) )
hit:act_comm.c:	 || IS_SET(ch->act, PLR_WIZINVIS))
hit:act_comm.c:        sprintf( log_buf, "%s sends to %s \"%s\"", ch->name, victim->name, argument );
hit:act_comm.c:        sprintf( log_buf, "%s wishes to %s \"%s\"", ch->name, victim->name, argument );
hit:act_comm.c:    if ( ( victim = ch->reply ) == NULL )
hit:act_comm.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_NO_EMOTE) )
hit:act_comm.c:    if ( ch->position  < POS_STUNNED  )
hit:act_comm.c:    if ( ch->in_room && !IS_SET( ch->in_room->room_flags, ROOM_RENT )
hit:act_comm.c:    sprintf( log_buf, "%s has quit.", ch->name );
hit:act_comm.c:  //  d = ch->desc;
hit:act_comm.c:    d = ch->desc;
hit:act_comm.c:    if (!IS_SET(ch->act, PLR_AFK))
hit:act_comm.c:    if ( IS_AFFECTED(ch, AFF_CHARM) && ch->master != NULL )
hit:act_comm.c:	act( "You don't wish to leave your beloved master!", ch, ch->master, NULL, NULL, NULL, TO_CHAR, SENSE_SIXTH );
hit:act_comm.c:	if ( ch->master == NULL )
hit:act_comm.c:    if ( ch->master != NULL )
hit:act_comm.c:    if ( ch->master != NULL )
hit:act_comm.c:    ch->master        = master;
hit:act_comm.c:    ch->leader        = NULL;
hit:act_comm.c:    if ( ch->master == NULL )
hit:act_comm.c:	REMOVE_BIT( ch->affected_by, AFF_CHARM );
hit:act_comm.c:    act( "You stop following $N.", ch, ch->master, NULL, NULL, NULL, TO_CHAR, SENSE_SIXTH );
hit:act_comm.c:    ch->master = NULL;
hit:act_comm.c:    ch->leader = NULL;
hit:act_comm.c:    if ( ch->master != NULL )
hit:act_comm.c:    ch->leader = NULL;
hit:act_comm.c:    for ( fch = char_list; fch != NULL; fch = fch->next )
hit:act_comm.c:	if ( fch->master == ch )
hit:act_comm.c:	if ( fch->leader == ch )
hit:act_comm.c:	    fch->leader = fch;
hit:act_comm.c:    for ( och = ch->in_room->people; och != NULL; och = och_next )
hit:act_comm.c:	och_next = och->next_in_room;
hit:act_comm.c:	&&   och->master == ch
hit:act_comm.c:	leader = (ch->leader != NULL) ? ch->leader : ch;
hit:act_comm.c:	for ( gch = char_list; gch != NULL; gch = gch->next )
hit:act_comm.c:    if ( ch->master != NULL || ( ch->leader != NULL && ch->leader != ch ) )
hit:act_comm.c:    if ( IS_SET( ch->act, PLR_NO_TELL ) )
hit:act_comm.c:    sprintf( buf, "%s tells the group '%s'.\n\r", ch->name, argument );
hit:act_comm.c:    for ( gch = char_list; gch != NULL; gch = gch->next )
hit:act_comm.c:    if ( ach->leader != NULL ) ach = ach->leader;
hit:act_comm.c:    if ( bch->leader != NULL ) bch = bch->leader;
hit:act_info.c:    if ( ch->desc == NULL )
hit:act_info.c:	    if ( IS_NPC(ch) || IS_SET(ch->act, PLR_COMBINE) )
hit:act_info.c:	if ( IS_NPC(ch) || IS_SET(ch->act, PLR_COMBINE) )
hit:act_info.c:	if ( IS_NPC(ch) || IS_SET(ch->act, PLR_COMBINE) )
hit:act_info.c:	      rch != NULL; rch = rch->next_in_room ) {
hit:act_info.c:	    if ( rch->riding == victim ) {
hit:act_info.c:    for ( rch = list; rch != NULL; rch = rch->next_in_room )
hit:act_info.c:	&&   IS_SET(rch->act, PLR_WIZINVIS)
hit:act_info.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_HOLYLIGHT) )
hit:act_info.c:    if ( ch->desc == NULL )
hit:act_info.c:    if ( ch->position < POS_SLEEPING )
hit:act_info.c:    if ( ch->position == POS_SLEEPING )
hit:act_info.c:    &&   !IS_SET(ch->act, PLR_HOLYLIGHT)
hit:act_info.c:    &&   room_is_dark( ch->in_room, ch ) == VISION_TOO_DARK )
hit:act_info.c:	show_char_to_char( ch->in_room->people, ch );
hit:act_info.c:    &&   !IS_SET(ch->act, PLR_HOLYLIGHT)
hit:act_info.c:    &&   room_is_dark( ch->in_room, ch ) == VISION_TOO_BRIGHT )
hit:act_info.c:	show_char_to_char( ch->in_room->people, ch );
hit:act_info.c:	 sprintf(buf2,"[%d] ", ch->in_room->vnum);
hit:act_info.c:     send_to_char( ch->in_room->name, ch );
hit:act_info.c:	  ( !IS_NPC( ch ) && !IS_SET( ch->act, PLR_BRIEF ) ) )
hit:act_info.c:	 send_to_char( ch->in_room->description, ch );
hit:act_info.c:     if ( IS_SET(ch->act, PLR_AUTOWEATHER) && IS_OUTDOORS(ch))
hit:act_info.c:     update_flora( ch->in_room );
hit:act_info.c:     display_flora( ch, ch->in_room->flora, 0 );
hit:act_info.c:     show_list_to_char( ch->in_room->contents, ch, FALSE, FALSE, FALSE );
hit:act_info.c:     show_char_to_char( ch->in_room->people,   ch );
hit:act_info.c:	for ( obj = ch->in_room->contents; obj != NULL; obj = obj->next_content )
hit:act_info.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:act_info.c:    for ( obj = ch->in_room->contents; obj != NULL; obj = obj->next_content )
hit:act_info.c:    pdesc = get_extra_descr( arg1, ch->in_room->extra_descr );
hit:act_info.c:	if ( (pexit = ch->in_room->exit[door]) == NULL )
hit:act_info.c:    if ( ( pexit = ch->in_room->exit[door] ) == NULL )
hit:act_info.c:    dist = URANGE( 1, ch->vision_range, 200 );
hit:act_info.c:    in_room = ch->in_room;
hit:act_info.c:    update_flora( ch->in_room );
hit:act_info.c:    if ( !IS_SET( ch->in_room->sector->flags, SECTOR_OUTDOORS ) )
hit:act_info.c:    soil_condition( ch, get_water_value( ch->in_room ) );
hit:act_info.c:	if ( ( pexit = ch->in_room->exit[door] ) != NULL
hit:act_info.c:       // && IS_SET( ch->act, PLR_HOLYLIGHT ))
hit:act_info.c:	ch->name,
hit:act_info.c:	IS_NPC(ch) ? "" : ch->short_descr );
hit:act_info.c:	(is_vowel(race_array[ch->race]->race_name[0]) ? "an" : "a" ),
hit:act_info.c:	race_array[ch->race]->race_name);
hit:act_info.c:    if ( get_trust( ch ) != ch->level )
hit:act_info.c:	ch->hit[HIT_LOC_BODY],  ch->max_hit,
hit:act_info.c:	ch->mana, ch->max_mana,
hit:act_info.c:	ch->move, ch->max_move );
hit:act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->condition[COND_DRUNK]   > 10 )
hit:act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->condition[COND_THIRST] ==  0 )
hit:act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->condition[COND_FULL]   ==  0 )
hit:act_info.c:    switch ( ch->position )
hit:act_info.c:    switch( ch->move_speed )
hit:act_info.c:      skill_table[*language_table[ch->language].pgsn].name );
hit:act_info.c:   free_string( ch->prompt, MEM_GENERAL );
hit:act_info.c:   ch->prompt = str_dup( buf );
hit:act_info.c:	if ( ( fImmortalOnly  && wch->level < LEVEL_IMMORTAL ) )
hit:act_info.c:/*	switch ( wch->level )
hit:act_info.c:	if ( IS_IMMORTAL( ch ) || wch->level > LEVEL_IMMORTAL )
hit:act_info.c:		     (IS_SET(wch->act, PLR_AFK) ? "[AFK]" : " "),
hit:act_info.c:                     (IS_SET(wch->act, PLR_WIZINVIS) ? "[INVIS]" : " "),
hit:act_info.c:		     wch->name,
hit:act_info.c:		     wch->short_descr);
hit:act_info.c:    show_list_to_char( ch->carrying, ch, TRUE, TRUE, FALSE );
hit:act_info.c:	for ( obj = ch->wearing[iWear]; obj != NULL; obj = obj->next_worn )
hit:act_info.c:	for ( obj2 = ch->carrying; obj2 != NULL; obj2 = obj2->next_content )
hit:act_info.c:	    &&   victim->in_room->area == ch->in_room->area
hit:act_info.c:	    &&   victim->in_room->area == ch->in_room->area
hit:act_info.c:	    if ( ch->description != NULL )
hit:act_info.c:		strcat( buf, ch->description );
hit:act_info.c:	free_string( ch->description, MEM_GENERAL );
hit:act_info.c:	ch->description = str_dup( buf );
hit:act_info.c:    send_to_char( ch->description ? ch->description : "(None).\n\r", ch );
hit:act_info.c:    if ( strcmp( crypt( arg1, ch->pcdata->pwd ), ch->pcdata->pwd ) )
hit:act_info.c:    pwdnew = crypt( arg2, ch->name );
hit:act_info.c:    free_string( ch->pcdata->pwd, MEM_PCDATA );
hit:act_info.c:    ch->pcdata->pwd = str_dup( pwdnew );
hit:act_info.c:	send_to_char( !IS_SET(ch->deaf, CHANNEL_CHAT)
hit:act_info.c:	    send_to_char( !IS_SET(ch->deaf, CHANNEL_IMMTALK)
hit:act_info.c:	    send_to_char( !IS_SET(ch->deaf, CHANNEL_LOG)
hit:act_info.c:	    REMOVE_BIT (ch->deaf, bit);
hit:act_info.c:	    SET_BIT    (ch->deaf, bit);
hit:act_info.c:	if ( IS_SET(ch->act,PLR_BRIEF))
hit:act_info.c:	    REMOVE_BIT(ch->act,PLR_BRIEF);
hit:act_info.c:	    SET_BIT(ch->act,PLR_BRIEF);
hit:act_info.c:	if ( IS_SET(ch->act,PLR_BLANK))
hit:act_info.c:	    REMOVE_BIT(ch->act,PLR_BLANK);
hit:act_info.c:	    SET_BIT(ch->act,PLR_BLANK);
hit:act_info.c:	if ( IS_SET(ch->act,PLR_PEACEFUL))
hit:act_info.c:	    REMOVE_BIT(ch->act,PLR_PEACEFUL);
hit:act_info.c:	    SET_BIT(ch->act,PLR_PEACEFUL);
hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_BLANK)
hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_BRIEF)
hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_COMBINE)
hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_PEACEFUL)
hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_PROMPT)
hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_TELNET_GA)
hit:act_info.c:	send_to_char( !IS_SET(ch->act, PLR_NO_EMOTE)
hit:act_info.c:	send_to_char( !IS_SET(ch->act, PLR_NO_TELL)
hit:act_info.c:	    SET_BIT    (ch->act, bit);
hit:act_info.c:	    REMOVE_BIT (ch->act, bit);
hit:act_info.c:    ch->pcdata->pagelen = i;
hit:act_info.c:  sprintf( buf, "Page Length (pagelen):  %d\n\r", ch->pcdata->pagelen );
hit:act_move.c:  in_room = ch->in_room;
hit:act_move.c:  if ( ch->riding != NULL && ch->riding->in_room != in_room )
hit:act_move.c:    ch->riding = NULL;
hit:act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:act_move.c:       &&   ch->master != NULL
hit:act_move.c:       &&   in_room == ch->master->in_room 
hit:act_move.c:       &&   !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:act_move.c:      &&  !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:act_move.c:      for ( obj = ch->carrying; obj != NULL; obj = obj->next_content) {
hit:act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:act_move.c:  if ( ch->move_speed < 0 || ch->move_speed >= MOVE_MAX )
hit:act_move.c:    ch->move_speed = MOVE_WALK;
hit:act_move.c:  if ( ch->move < move && ch->riding == NULL )
hit:act_move.c:  if ( ch->riding != NULL && ch->riding->move < 2 * move )
hit:act_move.c:  if ( ch->riding == NULL )
hit:act_move.c:    ch->move -= move;
hit:act_move.c:    ch->riding->move -= 2 * move;
hit:act_move.c:  if ( ch->move_speed == MOVE_SNEAK && ch->riding == NULL )
hit:act_move.c:      if ( ch->next_in_room != NULL )
hit:act_move.c:    if ( ch->riding == NULL )
hit:act_move.c:        move_names[ch->move_speed], TO_ROOM, SENSE_SIGHT|SENSE_HEARING );
hit:act_move.c:      act( "$n leaves $t, riding $N.", ch, ch->riding, NULL, dir_name[door],
hit:act_move.c:  if ( ch->riding != NULL )
hit:act_move.c:    char_from_room( ch->riding );
hit:act_move.c:    char_to_room( ch->riding, to_room, TRUE );
hit:act_move.c:    if ( ch->riding == NULL )
hit:act_move.c:        dir_name_2[rev_dir[door]], move_names[ch->move_speed],
hit:act_move.c:      act( "$n has arrived from $t, riding $N.", ch, ch->riding, NULL,
hit:act_move.c:    fch_next = fch->next_in_room;
hit:act_move.c:    if ( fch->master == ch && fch->position == POS_STANDING
hit:act_move.c:  if (!IS_UNSWITCHED_MOB(ch) && IS_SET(ch->act, PLR_HOLYWALK))
hit:act_move.c:  switch( ch->move_speed )
hit:act_move.c:  if (!IS_UNSWITCHED_MOB(ch) && IS_SET(ch->act, PLR_HOLYWALK))
hit:act_move.c:  switch( ch->move_speed )
hit:act_move.c:	    if ( ( pexit = ch->in_room->exit[door] ) != NULL
hit:act_move.c:    if ( ( pexit = ch->in_room->exit[door] ) == NULL )
hit:act_move.c:	    if ( ( pexit = ch->in_room->exit[dir] ) != NULL
hit:act_move.c:    if ( ( pexit = ch->in_room->exit[dir] ) == NULL
hit:act_move.c:	damage( ch, ch, UMIN(dice(1,pain),dice(1,ch->hit[0])), gsn_tumbling, NULL, gn_wear_none );
hit:act_move.c:	pexit = ch->in_room->exit[door];
hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:act_move.c:	    for ( rch = to_room->people; rch != NULL; rch = rch->next_in_room )
hit:act_move.c:	pexit = ch->in_room->exit[door];
hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:act_move.c:	    for ( rch = to_room->people; rch != NULL; rch = rch->next_in_room )
hit:act_move.c:	pexit	= ch->in_room->exit[door];
hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:act_move.c:	    for ( rch = to_room->people; rch != NULL; rch = rch->next_in_room )
hit:act_move.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:act_move.c:	if ( building->value[0] != ch->in_room->vnum )
hit:act_move.c:	pexit	= ch->in_room->exit[door];
hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:act_move.c:	pexit = ch->in_room->exit[door];
hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:act_move.c:  for ( fi = ch->in_room->flora; fi != NULL; fi = fi->next )
hit:act_move.c:    pexit = ch->in_room->exit[door];
hit:act_move.c:    &&   pexit_rev->to_room == ch->in_room )
hit:act_move.c:    switch ( ch->position )
hit:act_move.c:	ch->position = POS_STANDING;
hit:act_move.c:    switch ( ch->position )
hit:act_move.c:	ch->position = POS_RESTING;
hit:act_move.c:	ch->position = POS_RESTING;
hit:act_move.c:    switch ( ch->position )
hit:act_move.c:	ch->position = POS_RESTING;
hit:act_move.c:    if ( ch->riding != NULL )
hit:act_move.c:    for ( rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room )
hit:act_move.c:	if ( rch->riding == mount )
hit:act_move.c:    if ( rch != NULL && rch->riding == mount )
hit:act_move.c:    ch->riding = mount;
hit:act_move.c:    switch ( ch->position )
hit:act_move.c:	ch->position = POS_SLEEPING;
hit:act_move.c:	if (ch->position != POS_SLEEPING)
hit:act_move.c:	ch->position = POS_RESTING;
hit:act_move.c:  ch->move_speed = MOVE_WALK;
hit:act_move.c:  ch->move_speed = MOVE_RUN;
hit:act_move.c:  ch->move_speed = MOVE_SNEAK;
hit:act_move.c:    if ( ch->riding == NULL )
hit:act_move.c:    act("You stop riding $N.", ch, ch->riding, NULL, NULL, NULL, TO_CHAR, SENSE_SIGHT );
hit:act_move.c:    act("$n stops riding $N.", ch, ch->riding, NULL, NULL, NULL, TO_ROOM, SENSE_SIGHT );
hit:act_move.c:    ch->riding = NULL;
hit:act_move.c:    for ( controls = ch->in_room->contents; controls != NULL; controls = controls->next_content )
hit:act_move.c:        in_room = ch->in_room;
hit:act_move.c:    for ( vch = in_room->people; vch != NULL; vch = vch->next_in_room )
hit:act_move.c:    in_room = ch->in_room;
hit:act_move.c:    for ( vch = to_room->people; vch != NULL; vch = vch->next_in_room )
hit:act_move.c:    for ( building = ch->in_room->contents; building != NULL; building = building->next_content )
hit:act_move.c:	REMOVE_BIT(ch->affected_by, AFF_HIDE);
hit:act_move.c:	SET_BIT(ch->affected_by, AFF_HIDE);
hit:act_move.c:    if (IS_SET(ch->affected_by, AFF_INVISIBLE) )
hit:act_move.c:        REMOVE_BIT   ( ch->affected_by, AFF_INVISIBLE	);
hit:act_obj.c:    if ( ch->carry_number + 1 > can_carry_n( ch ) )
hit:act_obj.c:    if ( ch->carry_weight + get_obj_weight( obj ) > can_carry_w( ch ) )
hit:act_obj.c:	    obj = get_obj_list( ch, arg1, ch->in_room->contents );
hit:act_obj.c:	    for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
hit:act_obj.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:act_obj.c:	for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
hit:act_obj.c:	obj_to_room( create_money( amount, coin ), ch->in_room, TRUE );
hit:act_obj.c:	obj_to_room( obj, ch->in_room, TRUE );
hit:act_obj.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:act_obj.c:		obj_to_room( obj, ch->in_room, TRUE );
hit:act_obj.c:    if ( !str_cmp( arg, "channel" ) && is_name( arg, ch->in_room->name ) )
hit:act_obj.c:    if ( !str_cmp( arg, "lake" ) && is_name( arg, ch->in_room->name ) )
hit:act_obj.c:    if ( !str_cmp( arg, "river" ) && is_name( arg, ch->in_room->name ) )
hit:act_obj.c:    if ( !str_cmp( arg, "stream" ) && is_name( arg, ch->in_room->name ) )
hit:act_obj.c:    if ( !str_cmp( arg, "waterfall" ) && is_name( arg, ch->in_room->name ) )
hit:act_obj.c:	if ( !IS_SET( ch->in_room->room_flags, ROOM_DRINKABLE_WATER )
hit:act_obj.c:    && IS_SET( ch->in_room->sector->flags, SECTOR_OUTDOORS ) )
hit:act_obj.c:      ch->in_room->water += obj->value[1];
hit:act_obj.c:    && IS_SET( ch->in_room->sector->flags, SECTOR_OUTDOORS ) )
hit:act_obj.c:	for ( obj = ch->in_room->contents; obj; obj = obj->next_content )
hit:act_obj.c:	&& ( !IS_SET( ch->in_room->room_flags, ROOM_DRINKABLE_WATER )
hit:act_obj.c:    && ch->pcdata->condition[COND_DRUNK] > 10
hit:act_obj.c:	ch->pcdata->condition[COND_THIRST] = 48;
hit:act_obj.c:	    ch->pcdata->condition[COND_THIRST] = 48;
hit:act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_DRUNK]  > 10 )
hit:act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_FULL]   > 40 )
hit:act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_THIRST] > 40 )
hit:act_obj.c:	    ch->pcdata->condition[COND_FULL] = UMIN( ch->pcdata->condition[COND_FULL], 48 );
hit:act_obj.c:	    ch->pcdata->condition[COND_THIRST] = UMIN( ch->pcdata->condition[COND_THIRST], 48 );
hit:act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_FULL] > 40 )
hit:act_obj.c:	    condition = ch->pcdata->condition[COND_FULL];
hit:act_obj.c:	    if ( condition == 0 && ch->pcdata->condition[COND_FULL] > 0 )
hit:act_obj.c:	    else if ( ch->pcdata->condition[COND_FULL] > 40 )
hit:act_obj.c:    && ch->wearing[*wear_info[location].dependency] == NULL )
hit:act_obj.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:act_obj.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:act_obj.c:    && ch->wearing[*wear_info[gn_wear_on_belt].dependency] == NULL )
hit:act_obj.c:    for ( obj = ch->wearing[gn_wear_on_belt]; obj != NULL; obj = obj->next_worn )
hit:act_obj.c:	  for ( vch = ch->in_room->people; vch != NULL; vch = vch_next )
hit:act_obj.c:	    vch_next	= vch->next_in_room;
hit:act_obj.c:	if ( ( obj = get_obj_list( ch, arg1, ch->in_room->contents ) ) == NULL )
hit:act_obj.c:/*        if ( IS_SET(ch->act, PLR_HOLYWALK) )
hit:act_obj.c:    && ( objfrom = get_obj_list( ch, arg2, ch->in_room->contents ) ) == NULL )
hit:act_obj.c:/*        if ( IS_SET(ch->act, PLR_HOLYWALK ) )
hit:act_obj.c:/*    if ( IS_SET(ch->act, PLR_HOLYWALK ) )
hit:act_obj.c:    if ( ch->predelay_info == NULL )
hit:act_obj.c:    type =  ch->predelay_info->number;
hit:act_obj.c:    victim = ch->predelay_info->victim1;
hit:act_obj.c:    obj = ch->predelay_info->obj1;
hit:act_obj.c:    objfrom = ch->predelay_info->obj2;
hit:act_obj.c:	|| obj->in_room != ch->in_room )
hit:act_obj.c:	|| objfrom->in_room != ch->in_room )
hit:act_obj.c:      || victim->in_room != ch->in_room
hit:act_obj.c:	sprintf( buf, "%s is a bloody thief!", ch->name );
hit:act_obj.c:    if ( ch->carry_number + 1 > can_carry_n( ch ) )
hit:act_obj.c:    if ( ch->carry_weight + get_obj_weight( obj ) > can_carry_w( ch ) )
hit:act_obj.c:	    obj_to_room( obj, ch->in_room, TRUE );
hit:act_obj.c:	obj_to_room( item, ch->in_room, TRUE );
hit:act_obj.c:	obj_to_room( item, ch->in_room, TRUE );
hit:act_wiz.c:	free_string( ch->pcdata->bamfin, MEM_PCDATA );
hit:act_wiz.c:	ch->pcdata->bamfin = str_dup( argument );
hit:act_wiz.c:    for ( rch = char_list; rch != NULL; rch = rch->next )
hit:act_wiz.c:	if ( !IS_NPC(rch) && !str_cmp( rch->name, name ) )
hit:act_wiz.c:    rch->next = char_list;
hit:act_wiz.c:	free_string( ch->pcdata->bamfout, MEM_PCDATA );
hit:act_wiz.c:	ch->pcdata->bamfout = str_dup( argument );
hit:act_wiz.c:	&&   d->character->in_room == ch->in_room )
hit:act_wiz.c:	location = ch->in_room;
hit:act_wiz.c:	&& !can_build( ( ch->desc->original != NULL ?
hit:act_wiz.c:	                 ch->desc->original : ch), victim->pIndexData->area ) )
hit:act_wiz.c:    original = ch->in_room;
hit:act_wiz.c:    for ( wch = char_list; wch != NULL; wch = wch->next )
hit:act_wiz.c:    if ( !IS_SET(ch->act, PLR_WIZINVIS) )
hit:act_wiz.c:	    (ch->pcdata != NULL && ch->pcdata->bamfout[0] != '\0')
hit:act_wiz.c:	    ? ch->pcdata->bamfout : "leaves in a swirling mist",
hit:act_wiz.c:    if ( !IS_SET(ch->act, PLR_WIZINVIS) )
hit:act_wiz.c:	    (ch->pcdata != NULL && ch->pcdata->bamfin[0] != '\0')
hit:act_wiz.c:	    ? ch->pcdata->bamfin : "appears in a swirling mist",
hit:act_wiz.c:    location = ( arg[0] == '\0' ) ? ch->in_room : find_location( ch, arg );
hit:act_wiz.c:    if ( ch->in_room != location && room_is_private( location )
hit:act_wiz.c:    for ( rch = location->people; rch; rch = rch->next_in_room )
hit:act_wiz.c:	one_argument( rch->name, buf );
hit:act_wiz.c:    sprintf( buf, "Reboot by %s.", ch->name );
hit:act_wiz.c:        sprintf( buf, "Reboot for code by %s.", ch->name );
hit:act_wiz.c:    sprintf( buf, "Shutdown by %s.", ch->name );
hit:act_wiz.c:	    if ( d->snoop_by == ch->desc )
hit:act_wiz.c:    if ( ch->desc != NULL )
hit:act_wiz.c:	for ( d = ch->desc->snoop_by; d != NULL; d = d->snoop_by )
hit:act_wiz.c:    victim->desc->snoop_by = ch->desc;
hit:act_wiz.c:    if ( ch->desc == NULL )
hit:act_wiz.c:    if ( ch->desc->original != NULL )
hit:act_wiz.c:    ch->desc->character = victim;
hit:act_wiz.c:    ch->desc->original  = ch;
hit:act_wiz.c:    victim->desc        = ch->desc;
hit:act_wiz.c:    ch->desc            = NULL;
hit:act_wiz.c:    ch->switched_into	= victim;
hit:act_wiz.c:    if ( ch->desc == NULL )
hit:act_wiz.c:    if ( ch->desc->original == NULL )
hit:act_wiz.c:    ch->desc->character       = ch->desc->original;
hit:act_wiz.c:    ch->desc->original        = NULL;
hit:act_wiz.c:    ch->desc->character->desc = ch->desc; 
hit:act_wiz.c:    ch->desc                  = NULL;
hit:act_wiz.c:    ch->switched_into	      = NULL;
hit:act_wiz.c:    char_to_room( victim, ch->in_room, TRUE );
hit:act_wiz.c:	obj_to_room( obj, ch->in_room, TRUE );
hit:act_wiz.c:	for ( victim = ch->in_room->people; victim != NULL; victim = vnext )
hit:act_wiz.c:	for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
hit:act_wiz.c:    for ( rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room )
hit:act_wiz.c:        sprintf( log_buf, "Log: %s changed %s's password.",ch->name,victim->name );
hit:act_wiz.c:        sprintf( log_buf, "%s changed %s's password.",ch->name,victim->name );
hit:act_wiz.c:    sprintf( log_buf, "%s: %s %s %s",ch->name,arg1,arg2,arg3 );
hit:act_wiz.c:    if ( !can_build( ch, ch->in_room->area ) )
hit:act_wiz.c:    location = ch->in_room;
hit:act_wiz.c:      s = sector_lookup( arg3, ch->in_room->area );
hit:act_wiz.c:	    vch_next = vch->next;
hit:act_wiz.c:		if (IS_SET(vch->act, PLR_AFK)) {
hit:act_wiz.c:		    REMOVE_BIT(vch->act, PLR_AFK);
hit:act_wiz.c:		if (was_afk) SET_BIT(vch->act, PLR_AFK);
hit:act_wiz.c:    if ( IS_SET(ch->act, PLR_WIZINVIS) )
hit:act_wiz.c:	REMOVE_BIT(ch->act, PLR_WIZINVIS);
hit:act_wiz.c:	SET_BIT(ch->act, PLR_WIZINVIS);
hit:act_wiz.c:    if (IS_SET(ch->act, PLR_HOLYLIGHT)) {
hit:act_wiz.c:        REMOVE_BIT(ch->act, PLR_HOLYLIGHT);
hit:act_wiz.c:        SET_BIT(ch->act, PLR_HOLYLIGHT);
hit:act_wiz.c:	REMOVE_BIT(ch->act, PLR_HOLYSPEECH);
hit:act_wiz.c:	SET_BIT(ch->act, PLR_HOLYSPEECH);
hit:act_wiz.c:    if (IS_SET(ch->act, PLR_HOLYNAME)) {
hit:act_wiz.c:        REMOVE_BIT(ch->act, PLR_HOLYNAME);
hit:act_wiz.c:        SET_BIT(ch->act, PLR_HOLYNAME);
hit:act_wiz.c:    if (IS_SET(ch->act, PLR_HOLYWALK)) {
hit:act_wiz.c:        REMOVE_BIT(ch->act, PLR_HOLYWALK);
hit:act_wiz.c:        SET_BIT(ch->act, PLR_HOLYWALK);
hit:act_wiz.c:    if (IS_SET(ch->act, PLR_HOLYVNUM)) {
hit:act_wiz.c:        REMOVE_BIT(ch->act, PLR_HOLYVNUM);
hit:act_wiz.c:        SET_BIT(ch->act, PLR_HOLYVNUM);
hit:act_wiz.c:	    IS_SET(ch->act, PLR_HOLYLIGHT) ? "ON" : "OFF");
hit:act_wiz.c:	    IS_SET(ch->act, PLR_HOLYNAME) ? "ON" : "OFF");
hit:act_wiz.c:	    IS_SET(ch->act, PLR_HOLYWALK) ? "ON" : "OFF");
hit:act_wiz.c:	    IS_SET(ch->act, PLR_HOLYVNUM) ? "ON" : "OFF");
hit:change.c:  if ( ch->dynamic_descr )
hit:change.c:    free_string( ch->dynamic_descr, MEM_GENERAL );
hit:change.c:  ch->dynamic_descr = NULL;
hit:change.c:        ch->dynamic_descr = str_dup( c );
hit:change.c:        send_to_char( ch->dynamic_descr, ch );
hit:change.c:      ch->language = i; 
hit:character:act_wiz.c:	&&   d->character->in_room == ch->in_room )
hit:character:act_wiz.c:	    if ( d->snoop_by == ch->desc )
hit:character:act_wiz.c:	for ( d = ch->desc->snoop_by; d != NULL; d = d->snoop_by )
hit:character:comm.c:	sprintf( log_buf, "%s@%s has connected.", ch->name, d->host );
hit:character:comm.c:	sprintf( log_buf, "%s@%s has entered the game.", ch->name, d->host );
hit:character:comm.c:	  ch->name, d->host );
hit:character:comm.c:	&& !str_cmp( d->character->name, ch->name ) )
hit:character:comm.c:		d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
hit:character:comm.c:    sprintf( log_buf, "%s@%s reconnected.", ch->name, d->host );
hit:character:handler.c:    for ( paf_old = ch->affected; paf_old != NULL; paf_old = paf_old->next )
hit:character:olc.c:	for ( ed = ch->in_room->extra_descr; ed != NULL; ed = ed->next )
hit:character:olc.c:	ed->description = str_dup_tab( ch->pnote->text, TRUE );
hit:character:olc.c:	for ( ed = ch->in_room->extra_descr; ed != NULL; ed = ed->next )
hit:character:olc.c:	ch->pnote->text = str_dup_tab( ed->description, FALSE );
hit:character:olc.c:		pAppend->next = ch->in_room->area->reset_first;
hit:character:olc.c:    for ( ed = ch->in_room->extra_descr; ed != NULL; ed = ed->next )
hit:character:olc.c:	ed->next = ch->in_room->extra_descr;
hit:character:olc.c:	    ch->in_room->extra_descr = ed->next;
hit:comm.c:	sprintf( log_buf, "Closing link to %s.", ch->name );
hit:comm.c:	    ch->desc = NULL;
hit:comm.c:	if ( IS_SET(ch->act, PLR_BLANK) )
hit:comm.c:	if ( IS_SET(ch->act, PLR_TELNET_GA) )
hit:comm.c:   if( ch->prompt == NULL )
hit:comm.c:   else if ( ch->prompt[0] == '\0' )
hit:comm.c:            sprintf( buf2, "%d", ch->hit[HIT_LOC_BODY] );
hit:comm.c:            sprintf( buf2, "%d", ch->max_hit );
hit:comm.c:            if ( IS_IMMORTAL(ch) && IS_SET(ch->act, PLR_WIZINVIS) )
hit:comm.c:            sprintf( buf2, "%d", ch->mana );
hit:comm.c:            sprintf( buf2, "%d", ch->max_mana );
hit:comm.c:            sprintf( buf2, "%d", ch->move );
hit:comm.c:            sprintf( buf2, "%d", ch->max_move );
hit:comm.c:            if( ch->in_room != NULL )
hit:comm.c:		((!IS_NPC(ch) && IS_SET(ch->act,PLR_HOLYLIGHT)) ||
hit:comm.c:		 (!IS_AFFECTED(ch,AFF_BLIND) && !room_is_dark( ch->in_room, ch ) != VISION_NORMAL))
hit:comm.c:		? ch->in_room->name : "darkness");
hit:comm.c:            if( ch->in_room != NULL )
hit:comm.c:               sprintf( buf2, "%s", ch->in_room->name );
hit:comm.c:            if( IS_IMMORTAL( ch ) && ch->in_room != NULL )
hit:comm.c:               sprintf( buf2, "%d", ch->in_room->vnum );
hit:comm.c:            if( IS_IMMORTAL( ch ) && ch->in_room != NULL )
hit:comm.c:               sprintf( buf2, "%s", ch->in_room->area->name );
hit:comm.c:   write_to_buffer( ch->desc, buf, point - buf );
hit:comm.c:	if ( strcmp( crypt( argument, ch->pcdata->pwd ), ch->pcdata->pwd ) )
hit:comm.c:	if ( check_reconnect( d, ch->name, TRUE ) )
hit:comm.c:	if ( IS_SET( ch->act, PLR_REJECTED ) )
hit:comm.c:		ch->pcdata->rejected );
hit:comm.c:		REJECTED_DIR, capitalize( ch->name ) );
hit:comm.c:	if (IS_SET(ch->act, PLR_AFK))
hit:comm.c:	    REMOVE_BIT(ch->act, PLR_AFK);
hit:comm.c:	sprintf( log_buf, "%s@%s has connected.", ch->name, d->host );
hit:comm.c:	sprintf( buf, "\n\rWelcome back, %s.\n\r", ch->name );
hit:comm.c:	if ( IS_SET( ch->act, PLR_UNAPPROVED ) )
hit:comm.c:	ch->next	= char_list;
hit:comm.c:	if ( ch->level == 0 )
hit:comm.c:	    ch->perm_stat_phys_str
hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_phys_str_mod;
hit:comm.c:	    ch->perm_stat_phys_dex
hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_phys_dex_mod;
hit:comm.c:	    ch->perm_stat_phys_tou
hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_phys_tou_mod;
hit:comm.c:	    ch->perm_stat_phys_qui
hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_phys_qui_mod;
hit:comm.c:	    ch->perm_stat_ment_int
hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_ment_int_mod;
hit:comm.c:	    ch->perm_offense = 10;
hit:comm.c:	    ch->level	= 1;
hit:comm.c:	    ch->max_hit = race_array[ch->race]->hits_base
hit:comm.c:    + dice( race_array[ch->race]->hitnodice, race_array[ch->race]->hitsizedice );
hit:comm.c:	    ch->hit[HIT_LOC_BODY]	= ch->max_hit;
hit:comm.c:	    ch->max_mana = race_array[ch->race]->mana;
hit:comm.c:	    ch->mana	= ch->max_mana;
hit:comm.c:	    ch->max_move = race_array[ch->race]->move;
hit:comm.c:	    ch->move	= ch->max_move;
hit:comm.c:	    ch->vision_min = race_array[ch->race]->vision_min;
hit:comm.c:	    ch->vision_max = race_array[ch->race]->vision_max;
hit:comm.c:	    ch->vision_range = race_array[ch->race]->vision_range;
hit:comm.c:	    ch->prompt = NULL;
hit:comm.c:	    ch->height = race_array[ch->race]->height_base
hit:comm.c:                         + dice( race_array[ch->race]->heightnodice,
hit:comm.c:                                 race_array[ch->race]->heightsizedice );
hit:comm.c:	    ch->weight = race_array[ch->race]->weight_base
hit:comm.c:                         + dice( race_array[ch->race]->weightnodice,
hit:comm.c:                                 race_array[ch->race]->weightsizedice );
hit:comm.c:            ch->pcdata->learned[gsn_common] = 100;
hit:comm.c:	else if ( ch->in_room != NULL )
hit:comm.c:	    char_to_room( ch, ch->in_room, FALSE );
hit:comm.c:	sprintf( log_buf, "%s@%s has entered the game.", ch->name, d->host );
hit:comm.c:	if ( IS_SET(ch->act, PLR_DENY) )
hit:comm.c:        if (IS_SET(ch->act, PLR_DEAD) )
hit:comm.c:	pwdnew = crypt( argument, ch->name );
hit:comm.c:	free_string( ch->pcdata->pwd, MEM_PCDATA );
hit:comm.c:	ch->pcdata->pwd	= str_dup( pwdnew );
hit:comm.c:	if ( strcmp( crypt( argument, ch->pcdata->pwd ), ch->pcdata->pwd ) )
hit:comm.c:	case 'm': case 'M': ch->sex = SEX_MALE;    break;
hit:comm.c:	case 'f': case 'F': ch->sex = SEX_FEMALE;  break;
hit:comm.c:		ch->race = iRace;
hit:comm.c:	    if ( race_array[ch->race]->classes[iClass] == TRUE )
hit:comm.c:		ch->class = iClass;
hit:comm.c:	if ( iClass == MAX_CLASS || race_array[ch->race]->classes[iClass] == FALSE )
hit:comm.c:	ch->long_descr = str_dup( argument );
hit:comm.c:	ch->short_descr = str_dup( argument );
hit:comm.c:	ch->namelist = str_dup( argument );
hit:comm.c:	    strcpy( buf, ch->description );
hit:comm.c:	    free_string( ch->description, MEM_PCDATA );
hit:comm.c:	    ch->description = str_dup( buf );
hit:comm.c:	ch->pcdata->email_address = str_dup( argument );
hit:comm.c:	ch->pcdata->rejected = str_dup( "" );
hit:comm.c:	SET_BIT( ch->act, PLR_UNAPPROVED );
hit:comm.c:        SET_BIT( ch->act, PLR_HOLYLIGHT );
hit:comm.c:	  ch->name, d->host );
hit:comm.c:    for ( ch = char_list; ch != NULL; ch = ch->next )
hit:comm.c:	&& ( ch->name && !str_cmp( ch->name, name ) )
hit:comm.c:	&& IS_SET( ch->act, PLR_REVIEWING ) )
hit:comm.c:    for ( ch = char_list; ch != NULL; ch = ch->next )
hit:comm.c:	&& ( !fConn || ch->desc == NULL )
hit:comm.c:	&& !str_cmp( d->character->name, ch->name ) )
hit:comm.c:		d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
hit:comm.c:		if ( ch->switched_into != NULL )
hit:comm.c:		    do_return( ch->switched_into, "" );
hit:comm.c:    if ( ch->desc != NULL )
hit:comm.c:	free_descriptor( ch->desc );
hit:comm.c:    ch->desc         = d;
hit:comm.c:    ch->timer        = 0;
hit:comm.c:    sprintf( log_buf, "%s@%s reconnected.", ch->name, d->host );
hit:comm.c:    if (IS_SET(ch->act, PLR_AFK)) 
hit:comm.c:	REMOVE_BIT(ch->act, PLR_AFK);
hit:comm.c:    ||   ch->desc == NULL
hit:comm.c:    ||   ch->desc->connected != CON_PLAYING
hit:comm.c:    ||   ch->was_in_room == NULL 
hit:comm.c:    ||   ch->in_room != get_room_index( ROOM_VNUM_LIMBO ) )
hit:comm.c:    ch->timer = 0;
hit:comm.c:    char_to_room( ch, ch->was_in_room, FALSE );
hit:comm.c:    ch->was_in_room	= NULL;
hit:comm.c:    if ( txt == NULL || ch->desc == NULL )
hit:comm.c:    if ( ch->desc->showstr_point )
hit:comm.c:	write_to_buffer( ch->desc, txt, strlen( txt ) );
hit:comm.c:    ch->desc->showstr_head = alloc_mem( strlen( txt ) + 1 );
hit:comm.c:    strcpy( ch->desc->showstr_head, txt );
hit:comm.c:    ch->desc->showstr_point = ch->desc->showstr_head;
hit:comm.c:    show_string( ch->desc, "" );
hit:comm.c:    to = ch->in_room->people;
hit:comm.c:	to = vch->in_room->people;
hit:db.c:  pArea = ch->in_room->area;
hit:db.c:    pArea = ch->in_room->area;
hit:db.c:    ch->in_room->area->vnum_final = vnum;
hit:db.c:    ch->next_fighting		= NULL;
hit:db.c:    ch->name			= &str_empty[0];
hit:db.c:    ch->short_descr		= &str_empty[0];
hit:db.c:    ch->long_descr		= &str_empty[0];
hit:db.c:    ch->dynamic_descr		= NULL;
hit:db.c:    ch->description		= &str_empty[0];
hit:db.c:    ch->prompt			= NULL;
hit:db.c:    ch->predelay_time		= 0;
hit:db.c:    ch->predelay_info		= NULL;
hit:db.c:    ch->position		= POS_STANDING;
hit:db.c:    ch->hit[HIT_LOC_BODY]	= 20;
hit:db.c:    ch->max_hit			= 20;
hit:db.c:    ch->mana			= 100;
hit:db.c:    ch->max_mana		= 100;
hit:db.c:    ch->move			= 100;
hit:db.c:    ch->max_move		= 100;
hit:db.c:    ch->perm_stat_phys_str	= 40;
hit:db.c:    ch->perm_stat_phys_dex	= 40;
hit:db.c:    ch->perm_stat_phys_tou	= 40;
hit:db.c:    ch->perm_stat_phys_qui	= 40;
hit:db.c:    ch->perm_stat_ment_int	= 40;
hit:db.c:    ch->pReset			= NULL;
hit:db.c:    ch->riding			= NULL;
hit:db.c:    ch->switched_into		= NULL;
hit:db.c:    ch->language		= 0;
hit:db.c:    ch->move_speed		= MOVE_WALK;
hit:db.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:db.c:    for ( paf = ch->affected; paf != NULL; paf = paf_next )
hit:db.c:    free_string( ch->name, MEM_MOB_NAME_FREE_CHAR );
hit:db.c:    free_string( ch->namelist, MEM_MOB_NAMELIST_FREE_CHAR );
hit:db.c:    free_string( ch->short_descr, MEM_MOB_SHORT_DESCR_FREE_CHAR );
hit:db.c:    free_string( ch->long_descr, MEM_MOB_LONG_DESCR_FREE_CHAR );
hit:db.c:    free_string( ch->description, MEM_MOB_DESCRIPTION_FREE_CHAR );
hit:db.c:    free_string( ch->spec_fun_name, MEM_MOB_SPEC_FUN_NAME_FREE_CHAR );
hit:db.c:    free_string( ch->prompt, MEM_GENERAL );
hit:db.c:    free_predelay( ch->predelay_info );
hit:db.c:    if ( ch->pcdata != NULL )
hit:db.c:	free_string( ch->pcdata->pwd, MEM_PCDATA );
hit:db.c:	free_string( ch->pcdata->bamfin, MEM_PCDATA );
hit:db.c:	free_string( ch->pcdata->bamfout, MEM_PCDATA );
hit:db.c:	free_string( ch->pcdata->email_address, MEM_PCDATA );
hit:db.c:	free_string( ch->pcdata->rejected, MEM_PCDATA );
hit:db.c:	ch->pcdata->next = pcdata_free;
hit:db.c:	pcdata_free      = ch->pcdata;
hit:db.c:    ch->next	     = char_free;
hit:emote.c:  if ( ach->leader != NULL ) 
hit:emote.c:    ach = ach->leader;
hit:emote.c:  if ( bch->leader != NULL ) 
hit:emote.c:    bch = bch->leader;
hit:emote.c:  for (vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room) {
hit:emote.c:    vch->leader=NULL;
hit:emote.c:	vch->leader=ch;
hit:emote.c:  for (vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room) {              
hit:emote.c:      if (vch->leader==ch) {
hit:emote.c:	  wch->leader = ch;
hit:emote.c:	  wch->leader = ch;
hit:emote.c:	strcat(buf, ((vch == wch) ? "you" : him_her[wch->sex]));
hit:emote.c:          wch->leader = ch;
hit:emote.c:        strcat(buf, ((vch == wch) ? "your" : his_her[wch->sex]));
hit:emote.c:          wch->leader = ch;
hit:emote.c:        strcat(buf, ((vch == wch) ? "you" : he_she[wch->sex]));
hit:emote.orig:  if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_NO_EMOTE) )
hit:emote.orig:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
hit:emote.orig:		      strcat( buf, him_her[wch->sex] );
hit:emote.orig:		      strcat( buf, his_her[wch->sex] );
hit:emote.orig:		      strcat( buf, he_she[wch->sex] );
hit:fight.c:	combat_next = ch->next_fighting;
hit:fight.c:	if ( ( victim = ch->fighting ) == NULL || ch->in_room == NULL )
hit:fight.c:      if ( --ch->strike_rank < 0 )
hit:fight.c:	if ( IS_AWAKE(ch) && ch->in_room == victim->in_room )
hit:fight.c:	ch->strike_rank = calc_strike_rank( ch );
hit:fight.c:	if ( ( victim = ch->fighting ) == NULL )
hit:fight.c:	&& --ch->strike_rank_2 < 0 )
hit:fight.c:	    if ( IS_AWAKE(ch) && ch->in_room == victim->in_room )
hit:fight.c:	    ch->strike_rank_2 = calc_strike_rank( ch ) + 100
hit:fight.c:	    if ( ( victim = ch->fighting ) == NULL )
hit:fight.c:	for ( rch = ch->in_room->people; rch != NULL; rch = rch_next )
hit:fight.c:	    rch_next = rch->next_in_room;
hit:fight.c:	    if ( IS_AWAKE(rch) && rch->fighting == NULL )
hit:fight.c:    if ( victim->position == POS_DEAD || ch->in_room != victim->in_room )
hit:fight.c:    attacker_roll = ch->perm_offense + ch->mod_offense;
hit:fight.c:	if ( dice(1,100) > ch->perm_offense && !number_bits( 5 ) )
hit:fight.c:	    ch->perm_offense++;
hit:fight.c:	dam = dice( ch->damnodice, ch->damsizedice );
hit:fight.c:	    dam = dam + ch->damplus;
hit:fight.c:	    dam += ch->damplus;
hit:fight.c:	    dam += dice( ch->damnodice, ch->damsizedice ) + ch->damplus;
hit:fight.c:    if ( victim->position == POS_DEAD || ch->in_room != victim->in_room )
hit:fight.c:    attacker_roll = ch->perm_offense + ch->mod_offense;
hit:fight.c:	if ( dice(1,100) > ch->pcdata->learned[gsn_dual_wield]
hit:fight.c:	    ch->pcdata->learned[gsn_dual_wield]++;
hit:fight.c:    if ( !IS_NPC(ch) && ch->pcdata->learned[gsn_enhanced_damage] > 0 )
hit:fight.c:	dam += dam * ch->pcdata->learned[gsn_enhanced_damage] / 100;
hit:fight.c:	    REMOVE_BIT( ch->affected_by, AFF_INVISIBLE );
hit:fight.c:	    if ( IS_NPC(ch) && number_percent( ) < ch->level / 2 )
hit:fight.c:	    if ( IS_NPC(ch) && number_percent( ) < ch->level / 2 )
hit:fight.c:		(IS_NPC(ch) ? ch->short_descr : ch->name),
hit:fight.c:  if ( ch->fighting != NULL )
hit:fight.c:    if ( ch->desc != NULL
hit:fight.c:    && ch->desc->original != NULL 
hit:fight.c:    && IS_SET( ch->desc->original->act, PLR_PEACEFUL ) )
hit:fight.c:  else if ( IS_SET( ch->act, PLR_PEACEFUL ) )
hit:fight.c:    if ( ch->fighting != NULL )
hit:fight.c:    ch->fighting = victim;
hit:fight.c:    ch->next_fighting = combat_list;
hit:fight.c:    for ( fch = char_list; fch != NULL; fch = fch->next )
hit:fight.c:	    fch->fighting	= NULL;
hit:fight.c:	if ( fBoth && fch->fighting == ch )
hit:fight.c:    combat_list = ch->next_fighting;
hit:fight.c:    for ( fch = combat_list; fch != NULL; fch = fch->next_fighting )
hit:fight.c:	if ( fch->next_fighting == ch )
hit:fight.c:	    fch->next_fighting = ch->next_fighting;
hit:fight.c:    ch->next_fighting = NULL;
hit:fight.c:	name		= ch->short_descr;
hit:fight.c:    if ( IS_NPC( ch ) && ( pMobIndex = ch->pIndexData ) != NULL )
hit:fight.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:fight.c:    obj_to_room( corpse, ch->in_room, TRUE );
hit:fight.c:    was_in_room = ch->in_room;
hit:fight.c:	    ch->in_room = pexit->to_room;
hit:fight.c:    ch->in_room = was_in_room;
hit:fight.c:    lch = (ch->leader != NULL) ? ch->leader : ch;
hit:fight.c:    for ( gch = ch->in_room->people; gch != NULL; gch = gch->next_in_room )
hit:fight.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:fight.c:		obj_to_room( obj, ch->in_room, TRUE );
hit:fight.c:  if ( IS_AFFECTED(ch, AFF_CHARM) && ch->master == victim )
hit:fight.c:  if ( ch->fighting != NULL )
hit:fight.c:    if ( ch->fighting == victim )
hit:fight.c:    ch->fighting = victim;
hit:fight.c:    if ( arg[0] == '\0' && ch->fighting == NULL )
hit:fight.c:	victim = ch->fighting;
hit:fight.c:	if ( get_skill( ch, gsn_bash ) < ch->perm_stat_phys_str )
hit:fight.c:	ch->position = POS_RESTING;
hit:fight.c:    if ( ch->position < POS_STANDING )
hit:fight.c:    was_in = ch->in_room;
hit:fight.c:	if ( ( now_in = ch->in_room ) == was_in )
hit:fight.c:	ch->in_room = was_in;
hit:fight.c:	ch->in_room = now_in;
hit:fight.c:    if ( ch->fighting == victim )
hit:fight.c:    if ( arg[0] == '\0' && ch->fighting == NULL )
hit:fight.c:	victim = ch->fighting;
hit:fight.c:    if ( ( victim = ch->fighting ) == NULL )
hit:fight.c:	act("$n attempted to disarm you.", ch, ch->fighting, NULL, NULL, NULL, TO_VICT, SENSE_SIGHT );
hit:fight.c:	act("$N maintained their grip on their weapon.", ch, ch->fighting, NULL, NULL, NULL, TO_CHAR, SENSE_SIGHT|SENSE_TOUCH );
hit:fight.c:    if ( !IS_NPC(victim) && victim->level >= ch->level )
hit:fight.c:  if ( ch->in_room == NULL )
hit:fight.c:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
hit:fight.c:    if ( vch->fighting == ch )
hit:fight.c:  if ( i == 0 && ch->fighting != NULL )
hit:fileio.c:            ch->in_room ? ch->in_room->vnum : 0, ch->name, str );
hit:flora.c:  for ( fi = ch->in_room->flora; fi != NULL; fi = fi->next )
hit:flora.c:    write_environment_area( ch->in_room->area );
hit:flora.c:    if ( ch->in_room->flora == NULL )
hit:flora.c:    update_flora( ch->in_room );
hit:flora.c:    for ( fi = ch->in_room->flora; fi != NULL; fi = fi->next )
hit:flora.c:    fi->next = ch->in_room->flora;
hit:flora.c:    ch->in_room->flora = fi;
hit:flora.c:    destroy_flora( fi, ch->in_room );
hit:handler.c:    if ( ch->desc != NULL && ch->desc->original != NULL )
hit:handler.c:	ch = ch->desc->original;
hit:handler.c:    if ( ch->trust != 0 )
hit:handler.c:	return ch->trust;
hit:handler.c:    if ( IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
hit:handler.c:	return ch->level;
hit:handler.c:    year = (long) current_time - (long) ch->pcdata->birth;
hit:handler.c:    return ( ch->pcdata->played + (int) (current_time - ch->pcdata->logon) ) / 3600;
hit:handler.c:    return URANGE( 3, ch->perm_stat_phys_str + ch->mod_stat_phys_str, 200 );
hit:handler.c:    return URANGE( 3, ch->perm_stat_ment_int + ch->mod_stat_ment_int, 200 );
hit:handler.c:    return URANGE( 3, ch->perm_stat_phys_dex + ch->mod_stat_phys_dex, 200 );
hit:handler.c:    return URANGE( 3, ch->perm_stat_phys_qui + ch->mod_stat_phys_qui, 200 );
hit:handler.c:    return URANGE( 3, ch->perm_stat_phys_tou + ch->mod_stat_phys_tou, 200 );
hit:handler.c:	return ch->pcdata->learned[sn];
hit:handler.c:    if ( ch->pIndexData == NULL )
hit:handler.c:    return ch->pIndexData->learned[sn];
hit:handler.c:	return ch->pcdata->power_level[sn];
hit:handler.c:    if ( ch->pIndexData == NULL )
hit:handler.c:    return ch->pIndexData->power_level[sn];
hit:handler.c:    if ( !IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
hit:handler.c:    if ( !IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
hit:handler.c:    delay_new->next	= ch->pcdata->skill_delays;
hit:handler.c:    ch->pcdata->skill_delays	= delay_new;
hit:handler.c:    if ( ch->pcdata->skill_delays == NULL )
hit:handler.c:    if ( delay == ch->pcdata->skill_delays )
hit:handler.c:	ch->pcdata->skill_delays	= delay->next;
hit:handler.c:	for ( prev = ch->pcdata->skill_delays; prev != NULL; prev = prev->next )
hit:handler.c:  for ( delay = ch->pcdata->skill_delays; delay != NULL; delay = delay->next )
hit:handler.c:	SET_BIT( ch->affected_by, paf->bitvector );
hit:handler.c:	REMOVE_BIT( ch->affected_by, paf->bitvector );
hit:handler.c:    case APPLY_STAT_PHYS_STR: ch->mod_stat_phys_str	+= mod;	break;
hit:handler.c:    case APPLY_STAT_PHYS_DEX: ch->mod_stat_phys_dex	+= mod;	break;
hit:handler.c:    case APPLY_STAT_PHYS_TOU: ch->mod_stat_phys_tou	+= mod;	break;
hit:handler.c:    case APPLY_STAT_PHYS_QUI: ch->mod_stat_phys_qui	+= mod;	break;
hit:handler.c:    case APPLY_STAT_MENT_INT: ch->mod_stat_ment_int	+= mod;	break;
hit:handler.c:    case APPLY_SEX:           ch->sex			+= mod;	break;
hit:handler.c:    case APPLY_MANA:          ch->max_mana		+= mod;	break;
hit:handler.c:    case APPLY_HIT:           ch->max_hit		+= mod;	break;
hit:handler.c:    case APPLY_MOVE:          ch->max_move		+= mod;	break;
hit:handler.c:    case APPLY_HITROLL:       ch->hitroll		+= mod;	break;
hit:handler.c:    case APPLY_DAMROLL:       ch->damroll		+= mod;	break;
hit:handler.c:    case APPLY_SAVING_PARA:   ch->saving_throw		+= mod;	break;
hit:handler.c:    case APPLY_SAVING_ROD:    ch->saving_throw		+= mod;	break;
hit:handler.c:    case APPLY_SAVING_PETRI:  ch->saving_throw		+= mod;	break;
hit:handler.c:    case APPLY_SAVING_BREATH: ch->saving_throw		+= mod;	break;
hit:handler.c:    case APPLY_SAVING_SPELL:  ch->saving_throw		+= mod;	break;
hit:handler.c:    case APPLY_ABSORBTION:    ch->general_absorb	+= mod; break;
hit:handler.c:    case APPLY_CHANNELING:    ch->channeling		+= mod; break;
hit:handler.c:    case APPLY_VISION_PROFILE:  ch->vision_min += mod;
hit:handler.c:				ch->vision_max += mod;		break;
hit:handler.c:    case APPLY_VISION_RANGE:	ch->vision_range += mod;	break;
hit:handler.c:	    obj_to_room( wield, ch->in_room, TRUE );
hit:handler.c:    paf_new->next	= ch->affected;
hit:handler.c:    ch->affected	= paf_new;
hit:handler.c:    if ( ch->affected == NULL )
hit:handler.c:    if ( paf == ch->affected )
hit:handler.c:	ch->affected	= paf->next;
hit:handler.c:	for ( prev = ch->affected; prev != NULL; prev = prev->next )
hit:handler.c:    for ( paf = ch->affected; paf != NULL; paf = paf_next )
hit:handler.c:    for ( paf = ch->affected; paf != NULL; paf = paf->next )
hit:handler.c:    for ( paf_old = ch->affected; paf_old != NULL; paf_old = paf_old->next )
hit:handler.c:    if ( (room = ch->in_room) == NULL )
hit:handler.c:	--ch->in_room->area->nplayer;
hit:handler.c:    ch->in_room->light_mod -= ch->light;
hit:handler.c:    if ( ch == ch->in_room->people )
hit:handler.c:	ch->in_room->people = ch->next_in_room;
hit:handler.c:	for ( prev = ch->in_room->people; prev; prev = prev->next_in_room )
hit:handler.c:		prev->next_in_room = ch->next_in_room;
hit:handler.c:    ch->in_room      = NULL;
hit:handler.c:    ch->next_in_room = NULL;
hit:handler.c:    ch->in_room		= pRoomIndex;
hit:handler.c:    ch->next_in_room	= pRoomIndex->people;
hit:handler.c:	++ch->in_room->area->nplayer;
hit:handler.c:    ch->in_room->light_mod += ch->light;
hit:handler.c:    obj->next_content	 = ch->carrying;
hit:handler.c:    ch->carrying	 = obj;
hit:handler.c:    ch->carry_number	+= 1;
hit:handler.c:    ch->carry_weight	+= get_obj_weight( obj );
hit:handler.c:    if ( ch->carrying == obj )
hit:handler.c:	ch->carrying = obj->next_content;
hit:handler.c:	for ( prev = ch->carrying; prev != NULL; prev = prev->next_content )
hit:handler.c:    ch->carry_number	-= 1;
hit:handler.c:    ch->carry_weight	-= get_obj_weight( obj );
hit:handler.c:    return ch->wearing[iWear];
hit:handler.c:    iWear = race_array[ch->race]->hit_loc_location[hit_loc];
hit:handler.c:	obj_to_room( obj, ch->in_room, TRUE );
hit:handler.c:    if ( ch->wearing[iWear] == NULL )
hit:handler.c:	ch->wearing[iWear] = obj;
hit:handler.c:    else if ( ch->wearing[iWear]->size > 50 )
hit:handler.c:	obj->next_worn = ch->wearing[iWear]->next_worn;
hit:handler.c:	ch->wearing[iWear]->next_worn = obj;
hit:handler.c:	obj->next_worn = ch->wearing[iWear];
hit:handler.c:	ch->wearing[iWear] = obj;
hit:handler.c:    &&   ch->in_room != NULL )
hit:handler.c:	ch->in_room->light_mod += obj->value[0];
hit:handler.c:	ch->light += obj->value[0];
hit:handler.c:	ch->in_room->light_mod += GLOW_LIGHT;
hit:handler.c:	ch->light += GLOW_LIGHT;
hit:handler.c:	ch->in_room->light_mod += DARK_LIGHT;
hit:handler.c:	ch->light += DARK_LIGHT;
hit:handler.c:    if ( ch->wearing[wear_loc] == NULL )
hit:handler.c:    else if ( ch->wearing[wear_loc] == obj )
hit:handler.c:	ch->wearing[wear_loc] = obj->next_worn;
hit:handler.c:	for ( o = ch->wearing[wear_loc]; o != NULL; o = o->next_worn )
hit:handler.c:    if ( obj != ch->carrying )
hit:handler.c:	for ( prev = ch->carrying; prev != NULL; prev = prev->next_content )
hit:handler.c:	obj->next_content = ch->carrying;
hit:handler.c:	ch->carrying = obj;
hit:handler.c:    &&   ch->in_room != NULL )
hit:handler.c:	ch->in_room->light_mod -= obj->value[0];
hit:handler.c:	ch->light -= obj->value[0];
hit:handler.c:	ch->in_room->light_mod -= GLOW_LIGHT;
hit:handler.c:	ch->light -= GLOW_LIGHT;
hit:handler.c:	ch->in_room->light_mod -= DARK_LIGHT;
hit:handler.c:	ch->light -= DARK_LIGHT;
hit:handler.c:    if ( ch->wearing[wear_loc] != NULL
hit:handler.c:    || ch->in_room == NULL )
hit:handler.c:	    while( (od = ch->wearing[i]) != NULL )
hit:handler.c:		obj_to_room( od, ch->in_room, TRUE );
hit:handler.c:    for ( ch = char_list; ch != NULL; ch = ch->next )
hit:handler.c:	if ( (p = ch->predelay_info) != NULL )
hit:handler.c:    if ( ch->in_room == NULL )
hit:handler.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:handler.c:	if ( ch->pReset != NULL )
hit:handler.c:	    ch->pReset->target = NULL;
hit:handler.c:    if ( ch->desc != NULL && ch->desc->original != NULL )
hit:handler.c:    for ( wch = char_list; wch != NULL; wch = wch->next )
hit:handler.c:	if ( wch->reply == ch )
hit:handler.c:	    wch->reply = NULL;
hit:handler.c:	if ( (p = wch->predelay_info) != NULL )
hit:handler.c:    while ( ch->hunting != NULL )
hit:handler.c:	remove_hunting( ch, ch->hunting->victim, TRUE );
hit:handler.c:       char_list = ch->next;
hit:handler.c:		prev->next = ch->next;
hit:handler.c:    if ( ch->desc )
hit:handler.c:        ch->desc->character = NULL;
hit:handler.c:    for ( rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room )
hit:handler.c:	( !is_name( arg, rch->name ) && !is_name( arg, rch->namelist ) ) )
hit:handler.c:    for ( wch = char_list; wch != NULL ; wch = wch->next )
hit:handler.c:	( !is_name( arg, wch->name ) && !is_name( arg, wch->namelist ) ) )
hit:handler.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:handler.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:handler.c:    obj = get_obj_list( ch, argument, ch->in_room->contents );
hit:handler.c:    diff = ch->vision_current - room_light( pRoomIndex );
hit:handler.c:    for ( rch = pRoomIndex->people; rch != NULL; rch = rch->next_in_room )
hit:handler.c:    if ( (!IS_NPC(ch) && IS_SET(ch->act, PLR_HOLYLIGHT)) 
hit:handler.c:    if ( room_is_dark( ch->in_room, ch ) == VISION_TOO_DARK
hit:handler.c:    || room_is_dark( ch->in_room, ch ) == VISION_TOO_BRIGHT )
hit:handler.c:    if ( room_is_dark( ch->in_room, ch ) == VISION_HAZY )
hit:handler.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_HOLYLIGHT) )
hit:handler.c:    if ( room_is_dark( ch->in_room, ch ) == VISION_TOO_DARK
hit:handler.c:    || room_is_dark( ch->in_room, ch ) == VISION_TOO_BRIGHT )
hit:handler.c:    if ( !IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
hit:handler.c:    if ( IS_NPC( victim ) && ch->pIndexData == victim->pIndexData )
hit:handler.c:    aggr_bits = ch->aggression;
hit:handler.c:	if ( victim->weight > ch->weight )
hit:handler.c:	aggr += ch->weight - victim->weight;
hit:handler.c:	aggr -= (ch->max_hit - ch->hit[HIT_LOC_BODY])*100/ch->max_hit;
hit:handler.c:	aggr -= race_array[ch->race]->relations[victim->race];
hit:handler.c:    if ( ch->predelay_info != NULL )
hit:handler.c:	free_predelay( ch->predelay_info );
hit:handler.c:    ch->predelay_info = p;
hit:handler.c:    ch->predelay_time = delay;
hit:hit:act_comm.c:    if ( !str_cmp( ch->name, pnote->sender ) )
hit:hit:act_comm.c:    if ( is_name( ch->name, pnote->to_list ) )
hit:hit:act_comm.c:    if ( ch->pnote != NULL )
hit:hit:act_comm.c:	pnote	  = alloc_perm( sizeof(*ch->pnote) );
hit:hit:act_comm.c:    pnote->sender	= str_dup( ch->name );
hit:hit:act_comm.c:    ch->pnote		= pnote;
hit:hit:act_comm.c:	REMOVE_BIT(ch->act, PLR_AFK);
hit:hit:act_comm.c:    if (IS_SET(ch->act, PLR_AFK)) {
hit:hit:act_comm.c:       REMOVE_BIT(ch->act, PLR_AFK);
hit:hit:act_comm.c:	SET_BIT(ch->act, PLR_AFK);
hit:hit:act_comm.c:	if ( to_one[0] != '\0' && str_cmp( ch->name, to_one ) )
hit:hit:act_comm.c:    if ( str_cmp( ch->name, pnote->sender ) && to_new[0] != '\0' 
hit:hit:act_comm.c:    if ( ch->pnote == NULL || ch->pnote->text[0] == '\0' )
hit:hit:act_comm.c:    oldb = ch->pnote->text;
hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:act_comm.c:	    free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:act_comm.c:	    ch->pnote->text = str_dup( buf );
hit:hit:act_comm.c:	send_to_char( ch->pnote->text, ch );
hit:hit:act_comm.c:	strcpy( buf, ch->pnote->text );
hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:act_comm.c:	free_string( ch->pnote->subject, MEM_GENERAL );
hit:hit:act_comm.c:	ch->pnote->subject = str_dup( argument );
hit:hit:act_comm.c:	free_string( ch->pnote->to_list, MEM_GENERAL );
hit:hit:act_comm.c:	ch->pnote->to_list = str_dup( argument );
hit:hit:act_comm.c:	if ( ch->pnote != NULL )
hit:hit:act_comm.c:	    free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:act_comm.c:	    free_string( ch->pnote->subject, MEM_GENERAL );
hit:hit:act_comm.c:	    free_string( ch->pnote->to_list, MEM_GENERAL );
hit:hit:act_comm.c:	    free_string( ch->pnote->date, MEM_GENERAL );
hit:hit:act_comm.c:	    free_string( ch->pnote->sender, MEM_GENERAL );
hit:hit:act_comm.c:	    ch->pnote->next	= note_free;
hit:hit:act_comm.c:	    note_free		= ch->pnote;
hit:hit:act_comm.c:	    ch->pnote		= NULL;
hit:hit:act_comm.c:	if ( ch->pnote == NULL )
hit:hit:act_comm.c:	    ch->pnote->sender,
hit:hit:act_comm.c:	    ch->pnote->subject,
hit:hit:act_comm.c:	    ch->pnote->to_list
hit:hit:act_comm.c:	send_to_char( ch->pnote->text, ch );
hit:hit:act_comm.c:	if ( ch->pnote == NULL )
hit:hit:act_comm.c:	ch->pnote->next			= NULL;
hit:hit:act_comm.c:	ch->pnote->date			= str_dup( strtime );
hit:hit:act_comm.c:	    note_list	= ch->pnote;
hit:hit:act_comm.c:	    pnote->next	= ch->pnote;
hit:hit:act_comm.c:	pnote		= ch->pnote;
hit:hit:act_comm.c:	ch->pnote	= NULL;
hit:hit:act_comm.c:    REMOVE_BIT(ch->deaf, channel);
hit:hit:act_comm.c:	position	= ch->position;
hit:hit:act_comm.c:	ch->position	= POS_STANDING;
hit:hit:act_comm.c:	ch->position	= position;
hit:hit:act_comm.c:	&&  !IS_SET(och->deaf, channel) )
hit:hit:act_comm.c:	    position		= vch->position;
hit:hit:act_comm.c:	    vch->position	= position;
hit:hit:act_comm.c:  gsn = *language_table[ch->language].pgsn;
hit:hit:act_comm.c:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:act_comm.c:    if ( ch->in_room->exit[door] == NULL
hit:hit:act_comm.c:    || ( room = ch->in_room->exit[door]->to_room ) == NULL )
hit:hit:act_comm.c:    for ( vch = room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:act_comm.c:  gsn = *language_table[ch->language].pgsn;
hit:hit:act_comm.c:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:act_comm.c:           sprintf(log_buf, "%s wishes to all \"%s\"",ch->name,argument );
hit:hit:act_comm.c:    || ( IS_NPC(victim) && victim->in_room != ch->in_room ) )
hit:hit:act_comm.c:	 || IS_SET(ch->act, PLR_WIZINVIS))
hit:hit:act_comm.c:        sprintf( log_buf, "%s sends to %s \"%s\"", ch->name, victim->name, argument );
hit:hit:act_comm.c:        sprintf( log_buf, "%s wishes to %s \"%s\"", ch->name, victim->name, argument );
hit:hit:act_comm.c:    if ( ( victim = ch->reply ) == NULL )
hit:hit:act_comm.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_NO_EMOTE) )
hit:hit:act_comm.c:    if ( ch->position  < POS_STUNNED  )
hit:hit:act_comm.c:    if ( ch->in_room && !IS_SET( ch->in_room->room_flags, ROOM_RENT )
hit:hit:act_comm.c:    sprintf( log_buf, "%s has quit.", ch->name );
hit:hit:act_comm.c:  //  d = ch->desc;
hit:hit:act_comm.c:    d = ch->desc;
hit:hit:act_comm.c:    if (!IS_SET(ch->act, PLR_AFK))
hit:hit:act_comm.c:    if ( IS_AFFECTED(ch, AFF_CHARM) && ch->master != NULL )
hit:hit:act_comm.c:	act( "You don't wish to leave your beloved master!", ch, ch->master, NULL, NULL, NULL, TO_CHAR, SENSE_SIXTH );
hit:hit:act_comm.c:	if ( ch->master == NULL )
hit:hit:act_comm.c:    if ( ch->master != NULL )
hit:hit:act_comm.c:    if ( ch->master != NULL )
hit:hit:act_comm.c:    ch->master        = master;
hit:hit:act_comm.c:    ch->leader        = NULL;
hit:hit:act_comm.c:    if ( ch->master == NULL )
hit:hit:act_comm.c:	REMOVE_BIT( ch->affected_by, AFF_CHARM );
hit:hit:act_comm.c:    act( "You stop following $N.", ch, ch->master, NULL, NULL, NULL, TO_CHAR, SENSE_SIXTH );
hit:hit:act_comm.c:    ch->master = NULL;
hit:hit:act_comm.c:    ch->leader = NULL;
hit:hit:act_comm.c:    if ( ch->master != NULL )
hit:hit:act_comm.c:    ch->leader = NULL;
hit:hit:act_comm.c:    for ( fch = char_list; fch != NULL; fch = fch->next )
hit:hit:act_comm.c:	if ( fch->master == ch )
hit:hit:act_comm.c:	if ( fch->leader == ch )
hit:hit:act_comm.c:	    fch->leader = fch;
hit:hit:act_comm.c:    for ( och = ch->in_room->people; och != NULL; och = och_next )
hit:hit:act_comm.c:	och_next = och->next_in_room;
hit:hit:act_comm.c:	&&   och->master == ch
hit:hit:act_comm.c:	leader = (ch->leader != NULL) ? ch->leader : ch;
hit:hit:act_comm.c:	for ( gch = char_list; gch != NULL; gch = gch->next )
hit:hit:act_comm.c:    if ( ch->master != NULL || ( ch->leader != NULL && ch->leader != ch ) )
hit:hit:act_comm.c:    if ( IS_SET( ch->act, PLR_NO_TELL ) )
hit:hit:act_comm.c:    sprintf( buf, "%s tells the group '%s'.\n\r", ch->name, argument );
hit:hit:act_comm.c:    for ( gch = char_list; gch != NULL; gch = gch->next )
hit:hit:act_comm.c:    if ( ach->leader != NULL ) ach = ach->leader;
hit:hit:act_comm.c:    if ( bch->leader != NULL ) bch = bch->leader;
hit:hit:act_info.c:    if ( ch->desc == NULL )
hit:hit:act_info.c:	    if ( IS_NPC(ch) || IS_SET(ch->act, PLR_COMBINE) )
hit:hit:act_info.c:	if ( IS_NPC(ch) || IS_SET(ch->act, PLR_COMBINE) )
hit:hit:act_info.c:	if ( IS_NPC(ch) || IS_SET(ch->act, PLR_COMBINE) )
hit:hit:act_info.c:	      rch != NULL; rch = rch->next_in_room ) {
hit:hit:act_info.c:	    if ( rch->riding == victim ) {
hit:hit:act_info.c:    for ( rch = list; rch != NULL; rch = rch->next_in_room )
hit:hit:act_info.c:	&&   IS_SET(rch->act, PLR_WIZINVIS)
hit:hit:act_info.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_HOLYLIGHT) )
hit:hit:act_info.c:    if ( ch->desc == NULL )
hit:hit:act_info.c:    if ( ch->position < POS_SLEEPING )
hit:hit:act_info.c:    if ( ch->position == POS_SLEEPING )
hit:hit:act_info.c:    &&   !IS_SET(ch->act, PLR_HOLYLIGHT)
hit:hit:act_info.c:    &&   room_is_dark( ch->in_room, ch ) == VISION_TOO_DARK )
hit:hit:act_info.c:	show_char_to_char( ch->in_room->people, ch );
hit:hit:act_info.c:    &&   !IS_SET(ch->act, PLR_HOLYLIGHT)
hit:hit:act_info.c:    &&   room_is_dark( ch->in_room, ch ) == VISION_TOO_BRIGHT )
hit:hit:act_info.c:	show_char_to_char( ch->in_room->people, ch );
hit:hit:act_info.c:	 sprintf(buf2,"[%d] ", ch->in_room->vnum);
hit:hit:act_info.c:     send_to_char( ch->in_room->name, ch );
hit:hit:act_info.c:	  ( !IS_NPC( ch ) && !IS_SET( ch->act, PLR_BRIEF ) ) )
hit:hit:act_info.c:	 send_to_char( ch->in_room->description, ch );
hit:hit:act_info.c:     if ( IS_SET(ch->act, PLR_AUTOWEATHER) && IS_OUTDOORS(ch))
hit:hit:act_info.c:     update_flora( ch->in_room );
hit:hit:act_info.c:     display_flora( ch, ch->in_room->flora, 0 );
hit:hit:act_info.c:     show_list_to_char( ch->in_room->contents, ch, FALSE, FALSE, FALSE );
hit:hit:act_info.c:     show_char_to_char( ch->in_room->people,   ch );
hit:hit:act_info.c:	for ( obj = ch->in_room->contents; obj != NULL; obj = obj->next_content )
hit:hit:act_info.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:hit:act_info.c:    for ( obj = ch->in_room->contents; obj != NULL; obj = obj->next_content )
hit:hit:act_info.c:    pdesc = get_extra_descr( arg1, ch->in_room->extra_descr );
hit:hit:act_info.c:	if ( (pexit = ch->in_room->exit[door]) == NULL )
hit:hit:act_info.c:    if ( ( pexit = ch->in_room->exit[door] ) == NULL )
hit:hit:act_info.c:    dist = URANGE( 1, ch->vision_range, 200 );
hit:hit:act_info.c:    in_room = ch->in_room;
hit:hit:act_info.c:    update_flora( ch->in_room );
hit:hit:act_info.c:    if ( !IS_SET( ch->in_room->sector->flags, SECTOR_OUTDOORS ) )
hit:hit:act_info.c:    soil_condition( ch, get_water_value( ch->in_room ) );
hit:hit:act_info.c:	if ( ( pexit = ch->in_room->exit[door] ) != NULL
hit:hit:act_info.c:       // && IS_SET( ch->act, PLR_HOLYLIGHT ))
hit:hit:act_info.c:	ch->name,
hit:hit:act_info.c:	IS_NPC(ch) ? "" : ch->short_descr );
hit:hit:act_info.c:	(is_vowel(race_array[ch->race]->race_name[0]) ? "an" : "a" ),
hit:hit:act_info.c:	race_array[ch->race]->race_name);
hit:hit:act_info.c:    if ( get_trust( ch ) != ch->level )
hit:hit:act_info.c:	ch->hit[HIT_LOC_BODY],  ch->max_hit,
hit:hit:act_info.c:	ch->mana, ch->max_mana,
hit:hit:act_info.c:	ch->move, ch->max_move );
hit:hit:act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->condition[COND_DRUNK]   > 10 )
hit:hit:act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->condition[COND_THIRST] ==  0 )
hit:hit:act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->condition[COND_FULL]   ==  0 )
hit:hit:act_info.c:    switch ( ch->position )
hit:hit:act_info.c:    switch( ch->move_speed )
hit:hit:act_info.c:      skill_table[*language_table[ch->language].pgsn].name );
hit:hit:act_info.c:   free_string( ch->prompt, MEM_GENERAL );
hit:hit:act_info.c:   ch->prompt = str_dup( buf );
hit:hit:act_info.c:	if ( ( fImmortalOnly  && wch->level < LEVEL_IMMORTAL ) )
hit:hit:act_info.c:/*	switch ( wch->level )
hit:hit:act_info.c:	if ( IS_IMMORTAL( ch ) || wch->level > LEVEL_IMMORTAL )
hit:hit:act_info.c:		     (IS_SET(wch->act, PLR_AFK) ? "[AFK]" : " "),
hit:hit:act_info.c:                     (IS_SET(wch->act, PLR_WIZINVIS) ? "[INVIS]" : " "),
hit:hit:act_info.c:		     wch->name,
hit:hit:act_info.c:		     wch->short_descr);
hit:hit:act_info.c:    show_list_to_char( ch->carrying, ch, TRUE, TRUE, FALSE );
hit:hit:act_info.c:	for ( obj = ch->wearing[iWear]; obj != NULL; obj = obj->next_worn )
hit:hit:act_info.c:	for ( obj2 = ch->carrying; obj2 != NULL; obj2 = obj2->next_content )
hit:hit:act_info.c:	    &&   victim->in_room->area == ch->in_room->area
hit:hit:act_info.c:	    &&   victim->in_room->area == ch->in_room->area
hit:hit:act_info.c:	    if ( ch->description != NULL )
hit:hit:act_info.c:		strcat( buf, ch->description );
hit:hit:act_info.c:	free_string( ch->description, MEM_GENERAL );
hit:hit:act_info.c:	ch->description = str_dup( buf );
hit:hit:act_info.c:    send_to_char( ch->description ? ch->description : "(None).\n\r", ch );
hit:hit:act_info.c:    if ( strcmp( crypt( arg1, ch->pcdata->pwd ), ch->pcdata->pwd ) )
hit:hit:act_info.c:    pwdnew = crypt( arg2, ch->name );
hit:hit:act_info.c:    free_string( ch->pcdata->pwd, MEM_PCDATA );
hit:hit:act_info.c:    ch->pcdata->pwd = str_dup( pwdnew );
hit:hit:act_info.c:	send_to_char( !IS_SET(ch->deaf, CHANNEL_CHAT)
hit:hit:act_info.c:	    send_to_char( !IS_SET(ch->deaf, CHANNEL_IMMTALK)
hit:hit:act_info.c:	    send_to_char( !IS_SET(ch->deaf, CHANNEL_LOG)
hit:hit:act_info.c:	    REMOVE_BIT (ch->deaf, bit);
hit:hit:act_info.c:	    SET_BIT    (ch->deaf, bit);
hit:hit:act_info.c:	if ( IS_SET(ch->act,PLR_BRIEF))
hit:hit:act_info.c:	    REMOVE_BIT(ch->act,PLR_BRIEF);
hit:hit:act_info.c:	    SET_BIT(ch->act,PLR_BRIEF);
hit:hit:act_info.c:	if ( IS_SET(ch->act,PLR_BLANK))
hit:hit:act_info.c:	    REMOVE_BIT(ch->act,PLR_BLANK);
hit:hit:act_info.c:	    SET_BIT(ch->act,PLR_BLANK);
hit:hit:act_info.c:	if ( IS_SET(ch->act,PLR_PEACEFUL))
hit:hit:act_info.c:	    REMOVE_BIT(ch->act,PLR_PEACEFUL);
hit:hit:act_info.c:	    SET_BIT(ch->act,PLR_PEACEFUL);
hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_BLANK)
hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_BRIEF)
hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_COMBINE)
hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_PEACEFUL)
hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_PROMPT)
hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_TELNET_GA)
hit:hit:act_info.c:	send_to_char( !IS_SET(ch->act, PLR_NO_EMOTE)
hit:hit:act_info.c:	send_to_char( !IS_SET(ch->act, PLR_NO_TELL)
hit:hit:act_info.c:	    SET_BIT    (ch->act, bit);
hit:hit:act_info.c:	    REMOVE_BIT (ch->act, bit);
hit:hit:act_info.c:    ch->pcdata->pagelen = i;
hit:hit:act_info.c:  sprintf( buf, "Page Length (pagelen):  %d\n\r", ch->pcdata->pagelen );
hit:hit:act_move.c:  in_room = ch->in_room;
hit:hit:act_move.c:  if ( ch->riding != NULL && ch->riding->in_room != in_room )
hit:hit:act_move.c:    ch->riding = NULL;
hit:hit:act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:act_move.c:       &&   ch->master != NULL
hit:hit:act_move.c:       &&   in_room == ch->master->in_room 
hit:hit:act_move.c:       &&   !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:act_move.c:      &&  !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:act_move.c:      for ( obj = ch->carrying; obj != NULL; obj = obj->next_content) {
hit:hit:act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:act_move.c:  if ( ch->move_speed < 0 || ch->move_speed >= MOVE_MAX )
hit:hit:act_move.c:    ch->move_speed = MOVE_WALK;
hit:hit:act_move.c:  if ( ch->move < move && ch->riding == NULL )
hit:hit:act_move.c:  if ( ch->riding != NULL && ch->riding->move < 2 * move )
hit:hit:act_move.c:  if ( ch->riding == NULL )
hit:hit:act_move.c:    ch->move -= move;
hit:hit:act_move.c:    ch->riding->move -= 2 * move;
hit:hit:act_move.c:  if ( ch->move_speed == MOVE_SNEAK && ch->riding == NULL )
hit:hit:act_move.c:      if ( ch->next_in_room != NULL )
hit:hit:act_move.c:    if ( ch->riding == NULL )
hit:hit:act_move.c:        move_names[ch->move_speed], TO_ROOM, SENSE_SIGHT|SENSE_HEARING );
hit:hit:act_move.c:      act( "$n leaves $t, riding $N.", ch, ch->riding, NULL, dir_name[door],
hit:hit:act_move.c:  if ( ch->riding != NULL )
hit:hit:act_move.c:    char_from_room( ch->riding );
hit:hit:act_move.c:    char_to_room( ch->riding, to_room, TRUE );
hit:hit:act_move.c:    if ( ch->riding == NULL )
hit:hit:act_move.c:        dir_name_2[rev_dir[door]], move_names[ch->move_speed],
hit:hit:act_move.c:      act( "$n has arrived from $t, riding $N.", ch, ch->riding, NULL,
hit:hit:act_move.c:    fch_next = fch->next_in_room;
hit:hit:act_move.c:    if ( fch->master == ch && fch->position == POS_STANDING
hit:hit:act_move.c:  if (!IS_UNSWITCHED_MOB(ch) && IS_SET(ch->act, PLR_HOLYWALK))
hit:hit:act_move.c:  switch( ch->move_speed )
hit:hit:act_move.c:  if (!IS_UNSWITCHED_MOB(ch) && IS_SET(ch->act, PLR_HOLYWALK))
hit:hit:act_move.c:  switch( ch->move_speed )
hit:hit:act_move.c:	    if ( ( pexit = ch->in_room->exit[door] ) != NULL
hit:hit:act_move.c:    if ( ( pexit = ch->in_room->exit[door] ) == NULL )
hit:hit:act_move.c:	    if ( ( pexit = ch->in_room->exit[dir] ) != NULL
hit:hit:act_move.c:    if ( ( pexit = ch->in_room->exit[dir] ) == NULL
hit:hit:act_move.c:	damage( ch, ch, UMIN(dice(1,pain),dice(1,ch->hit[0])), gsn_tumbling, NULL, gn_wear_none );
hit:hit:act_move.c:	pexit = ch->in_room->exit[door];
hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:act_move.c:	    for ( rch = to_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:act_move.c:	pexit = ch->in_room->exit[door];
hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:act_move.c:	    for ( rch = to_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:act_move.c:	pexit	= ch->in_room->exit[door];
hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:act_move.c:	    for ( rch = to_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:act_move.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:hit:act_move.c:	if ( building->value[0] != ch->in_room->vnum )
hit:hit:act_move.c:	pexit	= ch->in_room->exit[door];
hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:act_move.c:	pexit = ch->in_room->exit[door];
hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:act_move.c:  for ( fi = ch->in_room->flora; fi != NULL; fi = fi->next )
hit:hit:act_move.c:    pexit = ch->in_room->exit[door];
hit:hit:act_move.c:    &&   pexit_rev->to_room == ch->in_room )
hit:hit:act_move.c:    switch ( ch->position )
hit:hit:act_move.c:	ch->position = POS_STANDING;
hit:hit:act_move.c:    switch ( ch->position )
hit:hit:act_move.c:	ch->position = POS_RESTING;
hit:hit:act_move.c:	ch->position = POS_RESTING;
hit:hit:act_move.c:    switch ( ch->position )
hit:hit:act_move.c:	ch->position = POS_RESTING;
hit:hit:act_move.c:    if ( ch->riding != NULL )
hit:hit:act_move.c:    for ( rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:act_move.c:	if ( rch->riding == mount )
hit:hit:act_move.c:    if ( rch != NULL && rch->riding == mount )
hit:hit:act_move.c:    ch->riding = mount;
hit:hit:act_move.c:    switch ( ch->position )
hit:hit:act_move.c:	ch->position = POS_SLEEPING;
hit:hit:act_move.c:	if (ch->position != POS_SLEEPING)
hit:hit:act_move.c:	ch->position = POS_RESTING;
hit:hit:act_move.c:  ch->move_speed = MOVE_WALK;
hit:hit:act_move.c:  ch->move_speed = MOVE_RUN;
hit:hit:act_move.c:  ch->move_speed = MOVE_SNEAK;
hit:hit:act_move.c:    if ( ch->riding == NULL )
hit:hit:act_move.c:    act("You stop riding $N.", ch, ch->riding, NULL, NULL, NULL, TO_CHAR, SENSE_SIGHT );
hit:hit:act_move.c:    act("$n stops riding $N.", ch, ch->riding, NULL, NULL, NULL, TO_ROOM, SENSE_SIGHT );
hit:hit:act_move.c:    ch->riding = NULL;
hit:hit:act_move.c:    for ( controls = ch->in_room->contents; controls != NULL; controls = controls->next_content )
hit:hit:act_move.c:        in_room = ch->in_room;
hit:hit:act_move.c:    for ( vch = in_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:act_move.c:    in_room = ch->in_room;
hit:hit:act_move.c:    for ( vch = to_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:act_move.c:    for ( building = ch->in_room->contents; building != NULL; building = building->next_content )
hit:hit:act_move.c:	REMOVE_BIT(ch->affected_by, AFF_HIDE);
hit:hit:act_move.c:	SET_BIT(ch->affected_by, AFF_HIDE);
hit:hit:act_move.c:    if (IS_SET(ch->affected_by, AFF_INVISIBLE) )
hit:hit:act_move.c:        REMOVE_BIT   ( ch->affected_by, AFF_INVISIBLE	);
hit:hit:act_obj.c:    if ( ch->carry_number + 1 > can_carry_n( ch ) )
hit:hit:act_obj.c:    if ( ch->carry_weight + get_obj_weight( obj ) > can_carry_w( ch ) )
hit:hit:act_obj.c:	    obj = get_obj_list( ch, arg1, ch->in_room->contents );
hit:hit:act_obj.c:	    for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
hit:hit:act_obj.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:act_obj.c:	for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
hit:hit:act_obj.c:	obj_to_room( create_money( amount, coin ), ch->in_room, TRUE );
hit:hit:act_obj.c:	obj_to_room( obj, ch->in_room, TRUE );
hit:hit:act_obj.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:act_obj.c:		obj_to_room( obj, ch->in_room, TRUE );
hit:hit:act_obj.c:    if ( !str_cmp( arg, "channel" ) && is_name( arg, ch->in_room->name ) )
hit:hit:act_obj.c:    if ( !str_cmp( arg, "lake" ) && is_name( arg, ch->in_room->name ) )
hit:hit:act_obj.c:    if ( !str_cmp( arg, "river" ) && is_name( arg, ch->in_room->name ) )
hit:hit:act_obj.c:    if ( !str_cmp( arg, "stream" ) && is_name( arg, ch->in_room->name ) )
hit:hit:act_obj.c:    if ( !str_cmp( arg, "waterfall" ) && is_name( arg, ch->in_room->name ) )
hit:hit:act_obj.c:	if ( !IS_SET( ch->in_room->room_flags, ROOM_DRINKABLE_WATER )
hit:hit:act_obj.c:    && IS_SET( ch->in_room->sector->flags, SECTOR_OUTDOORS ) )
hit:hit:act_obj.c:      ch->in_room->water += obj->value[1];
hit:hit:act_obj.c:    && IS_SET( ch->in_room->sector->flags, SECTOR_OUTDOORS ) )
hit:hit:act_obj.c:	for ( obj = ch->in_room->contents; obj; obj = obj->next_content )
hit:hit:act_obj.c:	&& ( !IS_SET( ch->in_room->room_flags, ROOM_DRINKABLE_WATER )
hit:hit:act_obj.c:    && ch->pcdata->condition[COND_DRUNK] > 10
hit:hit:act_obj.c:	ch->pcdata->condition[COND_THIRST] = 48;
hit:hit:act_obj.c:	    ch->pcdata->condition[COND_THIRST] = 48;
hit:hit:act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_DRUNK]  > 10 )
hit:hit:act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_FULL]   > 40 )
hit:hit:act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_THIRST] > 40 )
hit:hit:act_obj.c:	    ch->pcdata->condition[COND_FULL] = UMIN( ch->pcdata->condition[COND_FULL], 48 );
hit:hit:act_obj.c:	    ch->pcdata->condition[COND_THIRST] = UMIN( ch->pcdata->condition[COND_THIRST], 48 );
hit:hit:act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_FULL] > 40 )
hit:hit:act_obj.c:	    condition = ch->pcdata->condition[COND_FULL];
hit:hit:act_obj.c:	    if ( condition == 0 && ch->pcdata->condition[COND_FULL] > 0 )
hit:hit:act_obj.c:	    else if ( ch->pcdata->condition[COND_FULL] > 40 )
hit:hit:act_obj.c:    && ch->wearing[*wear_info[location].dependency] == NULL )
hit:hit:act_obj.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:hit:act_obj.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:act_obj.c:    && ch->wearing[*wear_info[gn_wear_on_belt].dependency] == NULL )
hit:hit:act_obj.c:    for ( obj = ch->wearing[gn_wear_on_belt]; obj != NULL; obj = obj->next_worn )
hit:hit:act_obj.c:	  for ( vch = ch->in_room->people; vch != NULL; vch = vch_next )
hit:hit:act_obj.c:	    vch_next	= vch->next_in_room;
hit:hit:act_obj.c:	if ( ( obj = get_obj_list( ch, arg1, ch->in_room->contents ) ) == NULL )
hit:hit:act_obj.c:/*        if ( IS_SET(ch->act, PLR_HOLYWALK) )
hit:hit:act_obj.c:    && ( objfrom = get_obj_list( ch, arg2, ch->in_room->contents ) ) == NULL )
hit:hit:act_obj.c:/*        if ( IS_SET(ch->act, PLR_HOLYWALK ) )
hit:hit:act_obj.c:/*    if ( IS_SET(ch->act, PLR_HOLYWALK ) )
hit:hit:act_obj.c:    if ( ch->predelay_info == NULL )
hit:hit:act_obj.c:    type =  ch->predelay_info->number;
hit:hit:act_obj.c:    victim = ch->predelay_info->victim1;
hit:hit:act_obj.c:    obj = ch->predelay_info->obj1;
hit:hit:act_obj.c:    objfrom = ch->predelay_info->obj2;
hit:hit:act_obj.c:	|| obj->in_room != ch->in_room )
hit:hit:act_obj.c:	|| objfrom->in_room != ch->in_room )
hit:hit:act_obj.c:      || victim->in_room != ch->in_room
hit:hit:act_obj.c:	sprintf( buf, "%s is a bloody thief!", ch->name );
hit:hit:act_obj.c:    if ( ch->carry_number + 1 > can_carry_n( ch ) )
hit:hit:act_obj.c:    if ( ch->carry_weight + get_obj_weight( obj ) > can_carry_w( ch ) )
hit:hit:act_obj.c:	    obj_to_room( obj, ch->in_room, TRUE );
hit:hit:act_obj.c:	obj_to_room( item, ch->in_room, TRUE );
hit:hit:act_obj.c:	obj_to_room( item, ch->in_room, TRUE );
hit:hit:act_wiz.c:	free_string( ch->pcdata->bamfin, MEM_PCDATA );
hit:hit:act_wiz.c:	ch->pcdata->bamfin = str_dup( argument );
hit:hit:act_wiz.c:    for ( rch = char_list; rch != NULL; rch = rch->next )
hit:hit:act_wiz.c:	if ( !IS_NPC(rch) && !str_cmp( rch->name, name ) )
hit:hit:act_wiz.c:    rch->next = char_list;
hit:hit:act_wiz.c:	free_string( ch->pcdata->bamfout, MEM_PCDATA );
hit:hit:act_wiz.c:	ch->pcdata->bamfout = str_dup( argument );
hit:hit:act_wiz.c:	&&   d->character->in_room == ch->in_room )
hit:hit:act_wiz.c:	location = ch->in_room;
hit:hit:act_wiz.c:	&& !can_build( ( ch->desc->original != NULL ?
hit:hit:act_wiz.c:	                 ch->desc->original : ch), victim->pIndexData->area ) )
hit:hit:act_wiz.c:    original = ch->in_room;
hit:hit:act_wiz.c:    for ( wch = char_list; wch != NULL; wch = wch->next )
hit:hit:act_wiz.c:    if ( !IS_SET(ch->act, PLR_WIZINVIS) )
hit:hit:act_wiz.c:	    (ch->pcdata != NULL && ch->pcdata->bamfout[0] != '\0')
hit:hit:act_wiz.c:	    ? ch->pcdata->bamfout : "leaves in a swirling mist",
hit:hit:act_wiz.c:    if ( !IS_SET(ch->act, PLR_WIZINVIS) )
hit:hit:act_wiz.c:	    (ch->pcdata != NULL && ch->pcdata->bamfin[0] != '\0')
hit:hit:act_wiz.c:	    ? ch->pcdata->bamfin : "appears in a swirling mist",
hit:hit:act_wiz.c:    location = ( arg[0] == '\0' ) ? ch->in_room : find_location( ch, arg );
hit:hit:act_wiz.c:    if ( ch->in_room != location && room_is_private( location )
hit:hit:act_wiz.c:    for ( rch = location->people; rch; rch = rch->next_in_room )
hit:hit:act_wiz.c:	one_argument( rch->name, buf );
hit:hit:act_wiz.c:    sprintf( buf, "Reboot by %s.", ch->name );
hit:hit:act_wiz.c:        sprintf( buf, "Reboot for code by %s.", ch->name );
hit:hit:act_wiz.c:    sprintf( buf, "Shutdown by %s.", ch->name );
hit:hit:act_wiz.c:	    if ( d->snoop_by == ch->desc )
hit:hit:act_wiz.c:    if ( ch->desc != NULL )
hit:hit:act_wiz.c:	for ( d = ch->desc->snoop_by; d != NULL; d = d->snoop_by )
hit:hit:act_wiz.c:    victim->desc->snoop_by = ch->desc;
hit:hit:act_wiz.c:    if ( ch->desc == NULL )
hit:hit:act_wiz.c:    if ( ch->desc->original != NULL )
hit:hit:act_wiz.c:    ch->desc->character = victim;
hit:hit:act_wiz.c:    ch->desc->original  = ch;
hit:hit:act_wiz.c:    victim->desc        = ch->desc;
hit:hit:act_wiz.c:    ch->desc            = NULL;
hit:hit:act_wiz.c:    ch->switched_into	= victim;
hit:hit:act_wiz.c:    if ( ch->desc == NULL )
hit:hit:act_wiz.c:    if ( ch->desc->original == NULL )
hit:hit:act_wiz.c:    ch->desc->character       = ch->desc->original;
hit:hit:act_wiz.c:    ch->desc->original        = NULL;
hit:hit:act_wiz.c:    ch->desc->character->desc = ch->desc; 
hit:hit:act_wiz.c:    ch->desc                  = NULL;
hit:hit:act_wiz.c:    ch->switched_into	      = NULL;
hit:hit:act_wiz.c:    char_to_room( victim, ch->in_room, TRUE );
hit:hit:act_wiz.c:	obj_to_room( obj, ch->in_room, TRUE );
hit:hit:act_wiz.c:	for ( victim = ch->in_room->people; victim != NULL; victim = vnext )
hit:hit:act_wiz.c:	for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
hit:hit:act_wiz.c:    for ( rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:act_wiz.c:        sprintf( log_buf, "Log: %s changed %s's password.",ch->name,victim->name );
hit:hit:act_wiz.c:        sprintf( log_buf, "%s changed %s's password.",ch->name,victim->name );
hit:hit:act_wiz.c:    sprintf( log_buf, "%s: %s %s %s",ch->name,arg1,arg2,arg3 );
hit:hit:act_wiz.c:    if ( !can_build( ch, ch->in_room->area ) )
hit:hit:act_wiz.c:    location = ch->in_room;
hit:hit:act_wiz.c:      s = sector_lookup( arg3, ch->in_room->area );
hit:hit:act_wiz.c:	    vch_next = vch->next;
hit:hit:act_wiz.c:		if (IS_SET(vch->act, PLR_AFK)) {
hit:hit:act_wiz.c:		    REMOVE_BIT(vch->act, PLR_AFK);
hit:hit:act_wiz.c:		if (was_afk) SET_BIT(vch->act, PLR_AFK);
hit:hit:act_wiz.c:    if ( IS_SET(ch->act, PLR_WIZINVIS) )
hit:hit:act_wiz.c:	REMOVE_BIT(ch->act, PLR_WIZINVIS);
hit:hit:act_wiz.c:	SET_BIT(ch->act, PLR_WIZINVIS);
hit:hit:act_wiz.c:    if (IS_SET(ch->act, PLR_HOLYLIGHT)) {
hit:hit:act_wiz.c:        REMOVE_BIT(ch->act, PLR_HOLYLIGHT);
hit:hit:act_wiz.c:        SET_BIT(ch->act, PLR_HOLYLIGHT);
hit:hit:act_wiz.c:	REMOVE_BIT(ch->act, PLR_HOLYSPEECH);
hit:hit:act_wiz.c:	SET_BIT(ch->act, PLR_HOLYSPEECH);
hit:hit:act_wiz.c:    if (IS_SET(ch->act, PLR_HOLYNAME)) {
hit:hit:act_wiz.c:        REMOVE_BIT(ch->act, PLR_HOLYNAME);
hit:hit:act_wiz.c:        SET_BIT(ch->act, PLR_HOLYNAME);
hit:hit:act_wiz.c:    if (IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:act_wiz.c:        REMOVE_BIT(ch->act, PLR_HOLYWALK);
hit:hit:act_wiz.c:        SET_BIT(ch->act, PLR_HOLYWALK);
hit:hit:act_wiz.c:    if (IS_SET(ch->act, PLR_HOLYVNUM)) {
hit:hit:act_wiz.c:        REMOVE_BIT(ch->act, PLR_HOLYVNUM);
hit:hit:act_wiz.c:        SET_BIT(ch->act, PLR_HOLYVNUM);
hit:hit:act_wiz.c:	    IS_SET(ch->act, PLR_HOLYLIGHT) ? "ON" : "OFF");
hit:hit:act_wiz.c:	    IS_SET(ch->act, PLR_HOLYNAME) ? "ON" : "OFF");
hit:hit:act_wiz.c:	    IS_SET(ch->act, PLR_HOLYWALK) ? "ON" : "OFF");
hit:hit:act_wiz.c:	    IS_SET(ch->act, PLR_HOLYVNUM) ? "ON" : "OFF");
hit:hit:change.c:  if ( ch->dynamic_descr )
hit:hit:change.c:    free_string( ch->dynamic_descr, MEM_GENERAL );
hit:hit:change.c:  ch->dynamic_descr = NULL;
hit:hit:change.c:        ch->dynamic_descr = str_dup( c );
hit:hit:change.c:        send_to_char( ch->dynamic_descr, ch );
hit:hit:change.c:      ch->language = i; 
hit:hit:character:act_wiz.c:	&&   d->character->in_room == ch->in_room )
hit:hit:character:act_wiz.c:	    if ( d->snoop_by == ch->desc )
hit:hit:character:act_wiz.c:	for ( d = ch->desc->snoop_by; d != NULL; d = d->snoop_by )
hit:hit:character:comm.c:	sprintf( log_buf, "%s@%s has connected.", ch->name, d->host );
hit:hit:character:comm.c:	sprintf( log_buf, "%s@%s has entered the game.", ch->name, d->host );
hit:hit:character:comm.c:	  ch->name, d->host );
hit:hit:character:comm.c:	&& !str_cmp( d->character->name, ch->name ) )
hit:hit:character:comm.c:		d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
hit:hit:character:comm.c:    sprintf( log_buf, "%s@%s reconnected.", ch->name, d->host );
hit:hit:character:handler.c:    for ( paf_old = ch->affected; paf_old != NULL; paf_old = paf_old->next )
hit:hit:character:olc.c:	for ( ed = ch->in_room->extra_descr; ed != NULL; ed = ed->next )
hit:hit:character:olc.c:	ed->description = str_dup_tab( ch->pnote->text, TRUE );
hit:hit:character:olc.c:	for ( ed = ch->in_room->extra_descr; ed != NULL; ed = ed->next )
hit:hit:character:olc.c:	ch->pnote->text = str_dup_tab( ed->description, FALSE );
hit:hit:character:olc.c:		pAppend->next = ch->in_room->area->reset_first;
hit:hit:character:olc.c:    for ( ed = ch->in_room->extra_descr; ed != NULL; ed = ed->next )
hit:hit:character:olc.c:	ed->next = ch->in_room->extra_descr;
hit:hit:character:olc.c:	    ch->in_room->extra_descr = ed->next;
hit:hit:comm.c:	sprintf( log_buf, "Closing link to %s.", ch->name );
hit:hit:comm.c:	    ch->desc = NULL;
hit:hit:comm.c:	if ( IS_SET(ch->act, PLR_BLANK) )
hit:hit:comm.c:	if ( IS_SET(ch->act, PLR_TELNET_GA) )
hit:hit:comm.c:   if( ch->prompt == NULL )
hit:hit:comm.c:   else if ( ch->prompt[0] == '\0' )
hit:hit:comm.c:            sprintf( buf2, "%d", ch->hit[HIT_LOC_BODY] );
hit:hit:comm.c:            sprintf( buf2, "%d", ch->max_hit );
hit:hit:comm.c:            if ( IS_IMMORTAL(ch) && IS_SET(ch->act, PLR_WIZINVIS) )
hit:hit:comm.c:            sprintf( buf2, "%d", ch->mana );
hit:hit:comm.c:            sprintf( buf2, "%d", ch->max_mana );
hit:hit:comm.c:            sprintf( buf2, "%d", ch->move );
hit:hit:comm.c:            sprintf( buf2, "%d", ch->max_move );
hit:hit:comm.c:            if( ch->in_room != NULL )
hit:hit:comm.c:		((!IS_NPC(ch) && IS_SET(ch->act,PLR_HOLYLIGHT)) ||
hit:hit:comm.c:		 (!IS_AFFECTED(ch,AFF_BLIND) && !room_is_dark( ch->in_room, ch ) != VISION_NORMAL))
hit:hit:comm.c:		? ch->in_room->name : "darkness");
hit:hit:comm.c:            if( ch->in_room != NULL )
hit:hit:comm.c:               sprintf( buf2, "%s", ch->in_room->name );
hit:hit:comm.c:            if( IS_IMMORTAL( ch ) && ch->in_room != NULL )
hit:hit:comm.c:               sprintf( buf2, "%d", ch->in_room->vnum );
hit:hit:comm.c:            if( IS_IMMORTAL( ch ) && ch->in_room != NULL )
hit:hit:comm.c:               sprintf( buf2, "%s", ch->in_room->area->name );
hit:hit:comm.c:   write_to_buffer( ch->desc, buf, point - buf );
hit:hit:comm.c:	if ( strcmp( crypt( argument, ch->pcdata->pwd ), ch->pcdata->pwd ) )
hit:hit:comm.c:	if ( check_reconnect( d, ch->name, TRUE ) )
hit:hit:comm.c:	if ( IS_SET( ch->act, PLR_REJECTED ) )
hit:hit:comm.c:		ch->pcdata->rejected );
hit:hit:comm.c:		REJECTED_DIR, capitalize( ch->name ) );
hit:hit:comm.c:	if (IS_SET(ch->act, PLR_AFK))
hit:hit:comm.c:	    REMOVE_BIT(ch->act, PLR_AFK);
hit:hit:comm.c:	sprintf( log_buf, "%s@%s has connected.", ch->name, d->host );
hit:hit:comm.c:	sprintf( buf, "\n\rWelcome back, %s.\n\r", ch->name );
hit:hit:comm.c:	if ( IS_SET( ch->act, PLR_UNAPPROVED ) )
hit:hit:comm.c:	ch->next	= char_list;
hit:hit:comm.c:	if ( ch->level == 0 )
hit:hit:comm.c:	    ch->perm_stat_phys_str
hit:hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_phys_str_mod;
hit:hit:comm.c:	    ch->perm_stat_phys_dex
hit:hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_phys_dex_mod;
hit:hit:comm.c:	    ch->perm_stat_phys_tou
hit:hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_phys_tou_mod;
hit:hit:comm.c:	    ch->perm_stat_phys_qui
hit:hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_phys_qui_mod;
hit:hit:comm.c:	    ch->perm_stat_ment_int
hit:hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_ment_int_mod;
hit:hit:comm.c:	    ch->perm_offense = 10;
hit:hit:comm.c:	    ch->level	= 1;
hit:hit:comm.c:	    ch->max_hit = race_array[ch->race]->hits_base
hit:hit:comm.c:    + dice( race_array[ch->race]->hitnodice, race_array[ch->race]->hitsizedice );
hit:hit:comm.c:	    ch->hit[HIT_LOC_BODY]	= ch->max_hit;
hit:hit:comm.c:	    ch->max_mana = race_array[ch->race]->mana;
hit:hit:comm.c:	    ch->mana	= ch->max_mana;
hit:hit:comm.c:	    ch->max_move = race_array[ch->race]->move;
hit:hit:comm.c:	    ch->move	= ch->max_move;
hit:hit:comm.c:	    ch->vision_min = race_array[ch->race]->vision_min;
hit:hit:comm.c:	    ch->vision_max = race_array[ch->race]->vision_max;
hit:hit:comm.c:	    ch->vision_range = race_array[ch->race]->vision_range;
hit:hit:comm.c:	    ch->prompt = NULL;
hit:hit:comm.c:	    ch->height = race_array[ch->race]->height_base
hit:hit:comm.c:                         + dice( race_array[ch->race]->heightnodice,
hit:hit:comm.c:                                 race_array[ch->race]->heightsizedice );
hit:hit:comm.c:	    ch->weight = race_array[ch->race]->weight_base
hit:hit:comm.c:                         + dice( race_array[ch->race]->weightnodice,
hit:hit:comm.c:                                 race_array[ch->race]->weightsizedice );
hit:hit:comm.c:            ch->pcdata->learned[gsn_common] = 100;
hit:hit:comm.c:	else if ( ch->in_room != NULL )
hit:hit:comm.c:	    char_to_room( ch, ch->in_room, FALSE );
hit:hit:comm.c:	sprintf( log_buf, "%s@%s has entered the game.", ch->name, d->host );
hit:hit:comm.c:	if ( IS_SET(ch->act, PLR_DENY) )
hit:hit:comm.c:        if (IS_SET(ch->act, PLR_DEAD) )
hit:hit:comm.c:	pwdnew = crypt( argument, ch->name );
hit:hit:comm.c:	free_string( ch->pcdata->pwd, MEM_PCDATA );
hit:hit:comm.c:	ch->pcdata->pwd	= str_dup( pwdnew );
hit:hit:comm.c:	if ( strcmp( crypt( argument, ch->pcdata->pwd ), ch->pcdata->pwd ) )
hit:hit:comm.c:	case 'm': case 'M': ch->sex = SEX_MALE;    break;
hit:hit:comm.c:	case 'f': case 'F': ch->sex = SEX_FEMALE;  break;
hit:hit:comm.c:		ch->race = iRace;
hit:hit:comm.c:	    if ( race_array[ch->race]->classes[iClass] == TRUE )
hit:hit:comm.c:		ch->class = iClass;
hit:hit:comm.c:	if ( iClass == MAX_CLASS || race_array[ch->race]->classes[iClass] == FALSE )
hit:hit:comm.c:	ch->long_descr = str_dup( argument );
hit:hit:comm.c:	ch->short_descr = str_dup( argument );
hit:hit:comm.c:	ch->namelist = str_dup( argument );
hit:hit:comm.c:	    strcpy( buf, ch->description );
hit:hit:comm.c:	    free_string( ch->description, MEM_PCDATA );
hit:hit:comm.c:	    ch->description = str_dup( buf );
hit:hit:comm.c:	ch->pcdata->email_address = str_dup( argument );
hit:hit:comm.c:	ch->pcdata->rejected = str_dup( "" );
hit:hit:comm.c:	SET_BIT( ch->act, PLR_UNAPPROVED );
hit:hit:comm.c:        SET_BIT( ch->act, PLR_HOLYLIGHT );
hit:hit:comm.c:	  ch->name, d->host );
hit:hit:comm.c:    for ( ch = char_list; ch != NULL; ch = ch->next )
hit:hit:comm.c:	&& ( ch->name && !str_cmp( ch->name, name ) )
hit:hit:comm.c:	&& IS_SET( ch->act, PLR_REVIEWING ) )
hit:hit:comm.c:    for ( ch = char_list; ch != NULL; ch = ch->next )
hit:hit:comm.c:	&& ( !fConn || ch->desc == NULL )
hit:hit:comm.c:	&& !str_cmp( d->character->name, ch->name ) )
hit:hit:comm.c:		d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
hit:hit:comm.c:		if ( ch->switched_into != NULL )
hit:hit:comm.c:		    do_return( ch->switched_into, "" );
hit:hit:comm.c:    if ( ch->desc != NULL )
hit:hit:comm.c:	free_descriptor( ch->desc );
hit:hit:comm.c:    ch->desc         = d;
hit:hit:comm.c:    ch->timer        = 0;
hit:hit:comm.c:    sprintf( log_buf, "%s@%s reconnected.", ch->name, d->host );
hit:hit:comm.c:    if (IS_SET(ch->act, PLR_AFK)) 
hit:hit:comm.c:	REMOVE_BIT(ch->act, PLR_AFK);
hit:hit:comm.c:    ||   ch->desc == NULL
hit:hit:comm.c:    ||   ch->desc->connected != CON_PLAYING
hit:hit:comm.c:    ||   ch->was_in_room == NULL 
hit:hit:comm.c:    ||   ch->in_room != get_room_index( ROOM_VNUM_LIMBO ) )
hit:hit:comm.c:    ch->timer = 0;
hit:hit:comm.c:    char_to_room( ch, ch->was_in_room, FALSE );
hit:hit:comm.c:    ch->was_in_room	= NULL;
hit:hit:comm.c:    if ( txt == NULL || ch->desc == NULL )
hit:hit:comm.c:    if ( ch->desc->showstr_point )
hit:hit:comm.c:	write_to_buffer( ch->desc, txt, strlen( txt ) );
hit:hit:comm.c:    ch->desc->showstr_head = alloc_mem( strlen( txt ) + 1 );
hit:hit:comm.c:    strcpy( ch->desc->showstr_head, txt );
hit:hit:comm.c:    ch->desc->showstr_point = ch->desc->showstr_head;
hit:hit:comm.c:    show_string( ch->desc, "" );
hit:hit:comm.c:    to = ch->in_room->people;
hit:hit:comm.c:	to = vch->in_room->people;
hit:hit:db.c:  pArea = ch->in_room->area;
hit:hit:db.c:    pArea = ch->in_room->area;
hit:hit:db.c:    ch->in_room->area->vnum_final = vnum;
hit:hit:db.c:    ch->next_fighting		= NULL;
hit:hit:db.c:    ch->name			= &str_empty[0];
hit:hit:db.c:    ch->short_descr		= &str_empty[0];
hit:hit:db.c:    ch->long_descr		= &str_empty[0];
hit:hit:db.c:    ch->dynamic_descr		= NULL;
hit:hit:db.c:    ch->description		= &str_empty[0];
hit:hit:db.c:    ch->prompt			= NULL;
hit:hit:db.c:    ch->predelay_time		= 0;
hit:hit:db.c:    ch->predelay_info		= NULL;
hit:hit:db.c:    ch->position		= POS_STANDING;
hit:hit:db.c:    ch->hit[HIT_LOC_BODY]	= 20;
hit:hit:db.c:    ch->max_hit			= 20;
hit:hit:db.c:    ch->mana			= 100;
hit:hit:db.c:    ch->max_mana		= 100;
hit:hit:db.c:    ch->move			= 100;
hit:hit:db.c:    ch->max_move		= 100;
hit:hit:db.c:    ch->perm_stat_phys_str	= 40;
hit:hit:db.c:    ch->perm_stat_phys_dex	= 40;
hit:hit:db.c:    ch->perm_stat_phys_tou	= 40;
hit:hit:db.c:    ch->perm_stat_phys_qui	= 40;
hit:hit:db.c:    ch->perm_stat_ment_int	= 40;
hit:hit:db.c:    ch->pReset			= NULL;
hit:hit:db.c:    ch->riding			= NULL;
hit:hit:db.c:    ch->switched_into		= NULL;
hit:hit:db.c:    ch->language		= 0;
hit:hit:db.c:    ch->move_speed		= MOVE_WALK;
hit:hit:db.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:db.c:    for ( paf = ch->affected; paf != NULL; paf = paf_next )
hit:hit:db.c:    free_string( ch->name, MEM_MOB_NAME_FREE_CHAR );
hit:hit:db.c:    free_string( ch->namelist, MEM_MOB_NAMELIST_FREE_CHAR );
hit:hit:db.c:    free_string( ch->short_descr, MEM_MOB_SHORT_DESCR_FREE_CHAR );
hit:hit:db.c:    free_string( ch->long_descr, MEM_MOB_LONG_DESCR_FREE_CHAR );
hit:hit:db.c:    free_string( ch->description, MEM_MOB_DESCRIPTION_FREE_CHAR );
hit:hit:db.c:    free_string( ch->spec_fun_name, MEM_MOB_SPEC_FUN_NAME_FREE_CHAR );
hit:hit:db.c:    free_string( ch->prompt, MEM_GENERAL );
hit:hit:db.c:    free_predelay( ch->predelay_info );
hit:hit:db.c:    if ( ch->pcdata != NULL )
hit:hit:db.c:	free_string( ch->pcdata->pwd, MEM_PCDATA );
hit:hit:db.c:	free_string( ch->pcdata->bamfin, MEM_PCDATA );
hit:hit:db.c:	free_string( ch->pcdata->bamfout, MEM_PCDATA );
hit:hit:db.c:	free_string( ch->pcdata->email_address, MEM_PCDATA );
hit:hit:db.c:	free_string( ch->pcdata->rejected, MEM_PCDATA );
hit:hit:db.c:	ch->pcdata->next = pcdata_free;
hit:hit:db.c:	pcdata_free      = ch->pcdata;
hit:hit:db.c:    ch->next	     = char_free;
hit:hit:emote.c:  if ( ach->leader != NULL ) 
hit:hit:emote.c:    ach = ach->leader;
hit:hit:emote.c:  if ( bch->leader != NULL ) 
hit:hit:emote.c:    bch = bch->leader;
hit:hit:emote.c:  for (vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room) {
hit:hit:emote.c:    vch->leader=NULL;
hit:hit:emote.c:	vch->leader=ch;
hit:hit:emote.c:  for (vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room) {              
hit:hit:emote.c:      if (vch->leader==ch) {
hit:hit:emote.c:	  wch->leader = ch;
hit:hit:emote.c:	  wch->leader = ch;
hit:hit:emote.c:	strcat(buf, ((vch == wch) ? "you" : him_her[wch->sex]));
hit:hit:emote.c:          wch->leader = ch;
hit:hit:emote.c:        strcat(buf, ((vch == wch) ? "your" : his_her[wch->sex]));
hit:hit:emote.c:          wch->leader = ch;
hit:hit:emote.c:        strcat(buf, ((vch == wch) ? "you" : he_she[wch->sex]));
hit:hit:emote.orig:  if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_NO_EMOTE) )
hit:hit:emote.orig:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:emote.orig:		      strcat( buf, him_her[wch->sex] );
hit:hit:emote.orig:		      strcat( buf, his_her[wch->sex] );
hit:hit:emote.orig:		      strcat( buf, he_she[wch->sex] );
hit:hit:fight.c:	combat_next = ch->next_fighting;
hit:hit:fight.c:	if ( ( victim = ch->fighting ) == NULL || ch->in_room == NULL )
hit:hit:fight.c:      if ( --ch->strike_rank < 0 )
hit:hit:fight.c:	if ( IS_AWAKE(ch) && ch->in_room == victim->in_room )
hit:hit:fight.c:	ch->strike_rank = calc_strike_rank( ch );
hit:hit:fight.c:	if ( ( victim = ch->fighting ) == NULL )
hit:hit:fight.c:	&& --ch->strike_rank_2 < 0 )
hit:hit:fight.c:	    if ( IS_AWAKE(ch) && ch->in_room == victim->in_room )
hit:hit:fight.c:	    ch->strike_rank_2 = calc_strike_rank( ch ) + 100
hit:hit:fight.c:	    if ( ( victim = ch->fighting ) == NULL )
hit:hit:fight.c:	for ( rch = ch->in_room->people; rch != NULL; rch = rch_next )
hit:hit:fight.c:	    rch_next = rch->next_in_room;
hit:hit:fight.c:	    if ( IS_AWAKE(rch) && rch->fighting == NULL )
hit:hit:fight.c:    if ( victim->position == POS_DEAD || ch->in_room != victim->in_room )
hit:hit:fight.c:    attacker_roll = ch->perm_offense + ch->mod_offense;
hit:hit:fight.c:	if ( dice(1,100) > ch->perm_offense && !number_bits( 5 ) )
hit:hit:fight.c:	    ch->perm_offense++;
hit:hit:fight.c:	dam = dice( ch->damnodice, ch->damsizedice );
hit:hit:fight.c:	    dam = dam + ch->damplus;
hit:hit:fight.c:	    dam += ch->damplus;
hit:hit:fight.c:	    dam += dice( ch->damnodice, ch->damsizedice ) + ch->damplus;
hit:hit:fight.c:    if ( victim->position == POS_DEAD || ch->in_room != victim->in_room )
hit:hit:fight.c:    attacker_roll = ch->perm_offense + ch->mod_offense;
hit:hit:fight.c:	if ( dice(1,100) > ch->pcdata->learned[gsn_dual_wield]
hit:hit:fight.c:	    ch->pcdata->learned[gsn_dual_wield]++;
hit:hit:fight.c:    if ( !IS_NPC(ch) && ch->pcdata->learned[gsn_enhanced_damage] > 0 )
hit:hit:fight.c:	dam += dam * ch->pcdata->learned[gsn_enhanced_damage] / 100;
hit:hit:fight.c:	    REMOVE_BIT( ch->affected_by, AFF_INVISIBLE );
hit:hit:fight.c:	    if ( IS_NPC(ch) && number_percent( ) < ch->level / 2 )
hit:hit:fight.c:	    if ( IS_NPC(ch) && number_percent( ) < ch->level / 2 )
hit:hit:fight.c:		(IS_NPC(ch) ? ch->short_descr : ch->name),
hit:hit:fight.c:  if ( ch->fighting != NULL )
hit:hit:fight.c:    if ( ch->desc != NULL
hit:hit:fight.c:    && ch->desc->original != NULL 
hit:hit:fight.c:    && IS_SET( ch->desc->original->act, PLR_PEACEFUL ) )
hit:hit:fight.c:  else if ( IS_SET( ch->act, PLR_PEACEFUL ) )
hit:hit:fight.c:    if ( ch->fighting != NULL )
hit:hit:fight.c:    ch->fighting = victim;
hit:hit:fight.c:    ch->next_fighting = combat_list;
hit:hit:fight.c:    for ( fch = char_list; fch != NULL; fch = fch->next )
hit:hit:fight.c:	    fch->fighting	= NULL;
hit:hit:fight.c:	if ( fBoth && fch->fighting == ch )
hit:hit:fight.c:    combat_list = ch->next_fighting;
hit:hit:fight.c:    for ( fch = combat_list; fch != NULL; fch = fch->next_fighting )
hit:hit:fight.c:	if ( fch->next_fighting == ch )
hit:hit:fight.c:	    fch->next_fighting = ch->next_fighting;
hit:hit:fight.c:    ch->next_fighting = NULL;
hit:hit:fight.c:	name		= ch->short_descr;
hit:hit:fight.c:    if ( IS_NPC( ch ) && ( pMobIndex = ch->pIndexData ) != NULL )
hit:hit:fight.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:fight.c:    obj_to_room( corpse, ch->in_room, TRUE );
hit:hit:fight.c:    was_in_room = ch->in_room;
hit:hit:fight.c:	    ch->in_room = pexit->to_room;
hit:hit:fight.c:    ch->in_room = was_in_room;
hit:hit:fight.c:    lch = (ch->leader != NULL) ? ch->leader : ch;
hit:hit:fight.c:    for ( gch = ch->in_room->people; gch != NULL; gch = gch->next_in_room )
hit:hit:fight.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:fight.c:		obj_to_room( obj, ch->in_room, TRUE );
hit:hit:fight.c:  if ( IS_AFFECTED(ch, AFF_CHARM) && ch->master == victim )
hit:hit:fight.c:  if ( ch->fighting != NULL )
hit:hit:fight.c:    if ( ch->fighting == victim )
hit:hit:fight.c:    ch->fighting = victim;
hit:hit:fight.c:    if ( arg[0] == '\0' && ch->fighting == NULL )
hit:hit:fight.c:	victim = ch->fighting;
hit:hit:fight.c:	if ( get_skill( ch, gsn_bash ) < ch->perm_stat_phys_str )
hit:hit:fight.c:	ch->position = POS_RESTING;
hit:hit:fight.c:    if ( ch->position < POS_STANDING )
hit:hit:fight.c:    was_in = ch->in_room;
hit:hit:fight.c:	if ( ( now_in = ch->in_room ) == was_in )
hit:hit:fight.c:	ch->in_room = was_in;
hit:hit:fight.c:	ch->in_room = now_in;
hit:hit:fight.c:    if ( ch->fighting == victim )
hit:hit:fight.c:    if ( arg[0] == '\0' && ch->fighting == NULL )
hit:hit:fight.c:	victim = ch->fighting;
hit:hit:fight.c:    if ( ( victim = ch->fighting ) == NULL )
hit:hit:fight.c:	act("$n attempted to disarm you.", ch, ch->fighting, NULL, NULL, NULL, TO_VICT, SENSE_SIGHT );
hit:hit:fight.c:	act("$N maintained their grip on their weapon.", ch, ch->fighting, NULL, NULL, NULL, TO_CHAR, SENSE_SIGHT|SENSE_TOUCH );
hit:hit:fight.c:    if ( !IS_NPC(victim) && victim->level >= ch->level )
hit:hit:fight.c:  if ( ch->in_room == NULL )
hit:hit:fight.c:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:fight.c:    if ( vch->fighting == ch )
hit:hit:fight.c:  if ( i == 0 && ch->fighting != NULL )
hit:hit:fileio.c:            ch->in_room ? ch->in_room->vnum : 0, ch->name, str );
hit:hit:flora.c:  for ( fi = ch->in_room->flora; fi != NULL; fi = fi->next )
hit:hit:flora.c:    write_environment_area( ch->in_room->area );
hit:hit:flora.c:    if ( ch->in_room->flora == NULL )
hit:hit:flora.c:    update_flora( ch->in_room );
hit:hit:flora.c:    for ( fi = ch->in_room->flora; fi != NULL; fi = fi->next )
hit:hit:flora.c:    fi->next = ch->in_room->flora;
hit:hit:flora.c:    ch->in_room->flora = fi;
hit:hit:flora.c:    destroy_flora( fi, ch->in_room );
hit:hit:handler.c:    if ( ch->desc != NULL && ch->desc->original != NULL )
hit:hit:handler.c:	ch = ch->desc->original;
hit:hit:handler.c:    if ( ch->trust != 0 )
hit:hit:handler.c:	return ch->trust;
hit:hit:handler.c:    if ( IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
hit:hit:handler.c:	return ch->level;
hit:hit:handler.c:    year = (long) current_time - (long) ch->pcdata->birth;
hit:hit:handler.c:    return ( ch->pcdata->played + (int) (current_time - ch->pcdata->logon) ) / 3600;
hit:hit:handler.c:    return URANGE( 3, ch->perm_stat_phys_str + ch->mod_stat_phys_str, 200 );
hit:hit:handler.c:    return URANGE( 3, ch->perm_stat_ment_int + ch->mod_stat_ment_int, 200 );
hit:hit:handler.c:    return URANGE( 3, ch->perm_stat_phys_dex + ch->mod_stat_phys_dex, 200 );
hit:hit:handler.c:    return URANGE( 3, ch->perm_stat_phys_qui + ch->mod_stat_phys_qui, 200 );
hit:hit:handler.c:    return URANGE( 3, ch->perm_stat_phys_tou + ch->mod_stat_phys_tou, 200 );
hit:hit:handler.c:	return ch->pcdata->learned[sn];
hit:hit:handler.c:    if ( ch->pIndexData == NULL )
hit:hit:handler.c:    return ch->pIndexData->learned[sn];
hit:hit:handler.c:	return ch->pcdata->power_level[sn];
hit:hit:handler.c:    if ( ch->pIndexData == NULL )
hit:hit:handler.c:    return ch->pIndexData->power_level[sn];
hit:hit:handler.c:    if ( !IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
hit:hit:handler.c:    if ( !IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
hit:hit:handler.c:    delay_new->next	= ch->pcdata->skill_delays;
hit:hit:handler.c:    ch->pcdata->skill_delays	= delay_new;
hit:hit:handler.c:    if ( ch->pcdata->skill_delays == NULL )
hit:hit:handler.c:    if ( delay == ch->pcdata->skill_delays )
hit:hit:handler.c:	ch->pcdata->skill_delays	= delay->next;
hit:hit:handler.c:	for ( prev = ch->pcdata->skill_delays; prev != NULL; prev = prev->next )
hit:hit:handler.c:  for ( delay = ch->pcdata->skill_delays; delay != NULL; delay = delay->next )
hit:hit:handler.c:	SET_BIT( ch->affected_by, paf->bitvector );
hit:hit:handler.c:	REMOVE_BIT( ch->affected_by, paf->bitvector );
hit:hit:handler.c:    case APPLY_STAT_PHYS_STR: ch->mod_stat_phys_str	+= mod;	break;
hit:hit:handler.c:    case APPLY_STAT_PHYS_DEX: ch->mod_stat_phys_dex	+= mod;	break;
hit:hit:handler.c:    case APPLY_STAT_PHYS_TOU: ch->mod_stat_phys_tou	+= mod;	break;
hit:hit:handler.c:    case APPLY_STAT_PHYS_QUI: ch->mod_stat_phys_qui	+= mod;	break;
hit:hit:handler.c:    case APPLY_STAT_MENT_INT: ch->mod_stat_ment_int	+= mod;	break;
hit:hit:handler.c:    case APPLY_SEX:           ch->sex			+= mod;	break;
hit:hit:handler.c:    case APPLY_MANA:          ch->max_mana		+= mod;	break;
hit:hit:handler.c:    case APPLY_HIT:           ch->max_hit		+= mod;	break;
hit:hit:handler.c:    case APPLY_MOVE:          ch->max_move		+= mod;	break;
hit:hit:handler.c:    case APPLY_HITROLL:       ch->hitroll		+= mod;	break;
hit:hit:handler.c:    case APPLY_DAMROLL:       ch->damroll		+= mod;	break;
hit:hit:handler.c:    case APPLY_SAVING_PARA:   ch->saving_throw		+= mod;	break;
hit:hit:handler.c:    case APPLY_SAVING_ROD:    ch->saving_throw		+= mod;	break;
hit:hit:handler.c:    case APPLY_SAVING_PETRI:  ch->saving_throw		+= mod;	break;
hit:hit:handler.c:    case APPLY_SAVING_BREATH: ch->saving_throw		+= mod;	break;
hit:hit:handler.c:    case APPLY_SAVING_SPELL:  ch->saving_throw		+= mod;	break;
hit:hit:handler.c:    case APPLY_ABSORBTION:    ch->general_absorb	+= mod; break;
hit:hit:handler.c:    case APPLY_CHANNELING:    ch->channeling		+= mod; break;
hit:hit:handler.c:    case APPLY_VISION_PROFILE:  ch->vision_min += mod;
hit:hit:handler.c:				ch->vision_max += mod;		break;
hit:hit:handler.c:    case APPLY_VISION_RANGE:	ch->vision_range += mod;	break;
hit:hit:handler.c:	    obj_to_room( wield, ch->in_room, TRUE );
hit:hit:handler.c:    paf_new->next	= ch->affected;
hit:hit:handler.c:    ch->affected	= paf_new;
hit:hit:handler.c:    if ( ch->affected == NULL )
hit:hit:handler.c:    if ( paf == ch->affected )
hit:hit:handler.c:	ch->affected	= paf->next;
hit:hit:handler.c:	for ( prev = ch->affected; prev != NULL; prev = prev->next )
hit:hit:handler.c:    for ( paf = ch->affected; paf != NULL; paf = paf_next )
hit:hit:handler.c:    for ( paf = ch->affected; paf != NULL; paf = paf->next )
hit:hit:handler.c:    for ( paf_old = ch->affected; paf_old != NULL; paf_old = paf_old->next )
hit:hit:handler.c:    if ( (room = ch->in_room) == NULL )
hit:hit:handler.c:	--ch->in_room->area->nplayer;
hit:hit:handler.c:    ch->in_room->light_mod -= ch->light;
hit:hit:handler.c:    if ( ch == ch->in_room->people )
hit:hit:handler.c:	ch->in_room->people = ch->next_in_room;
hit:hit:handler.c:	for ( prev = ch->in_room->people; prev; prev = prev->next_in_room )
hit:hit:handler.c:		prev->next_in_room = ch->next_in_room;
hit:hit:handler.c:    ch->in_room      = NULL;
hit:hit:handler.c:    ch->next_in_room = NULL;
hit:hit:handler.c:    ch->in_room		= pRoomIndex;
hit:hit:handler.c:    ch->next_in_room	= pRoomIndex->people;
hit:hit:handler.c:	++ch->in_room->area->nplayer;
hit:hit:handler.c:    ch->in_room->light_mod += ch->light;
hit:hit:handler.c:    obj->next_content	 = ch->carrying;
hit:hit:handler.c:    ch->carrying	 = obj;
hit:hit:handler.c:    ch->carry_number	+= 1;
hit:hit:handler.c:    ch->carry_weight	+= get_obj_weight( obj );
hit:hit:handler.c:    if ( ch->carrying == obj )
hit:hit:handler.c:	ch->carrying = obj->next_content;
hit:hit:handler.c:	for ( prev = ch->carrying; prev != NULL; prev = prev->next_content )
hit:hit:handler.c:    ch->carry_number	-= 1;
hit:hit:handler.c:    ch->carry_weight	-= get_obj_weight( obj );
hit:hit:handler.c:    return ch->wearing[iWear];
hit:hit:handler.c:    iWear = race_array[ch->race]->hit_loc_location[hit_loc];
hit:hit:handler.c:	obj_to_room( obj, ch->in_room, TRUE );
hit:hit:handler.c:    if ( ch->wearing[iWear] == NULL )
hit:hit:handler.c:	ch->wearing[iWear] = obj;
hit:hit:handler.c:    else if ( ch->wearing[iWear]->size > 50 )
hit:hit:handler.c:	obj->next_worn = ch->wearing[iWear]->next_worn;
hit:hit:handler.c:	ch->wearing[iWear]->next_worn = obj;
hit:hit:handler.c:	obj->next_worn = ch->wearing[iWear];
hit:hit:handler.c:	ch->wearing[iWear] = obj;
hit:hit:handler.c:    &&   ch->in_room != NULL )
hit:hit:handler.c:	ch->in_room->light_mod += obj->value[0];
hit:hit:handler.c:	ch->light += obj->value[0];
hit:hit:handler.c:	ch->in_room->light_mod += GLOW_LIGHT;
hit:hit:handler.c:	ch->light += GLOW_LIGHT;
hit:hit:handler.c:	ch->in_room->light_mod += DARK_LIGHT;
hit:hit:handler.c:	ch->light += DARK_LIGHT;
hit:hit:handler.c:    if ( ch->wearing[wear_loc] == NULL )
hit:hit:handler.c:    else if ( ch->wearing[wear_loc] == obj )
hit:hit:handler.c:	ch->wearing[wear_loc] = obj->next_worn;
hit:hit:handler.c:	for ( o = ch->wearing[wear_loc]; o != NULL; o = o->next_worn )
hit:hit:handler.c:    if ( obj != ch->carrying )
hit:hit:handler.c:	for ( prev = ch->carrying; prev != NULL; prev = prev->next_content )
hit:hit:handler.c:	obj->next_content = ch->carrying;
hit:hit:handler.c:	ch->carrying = obj;
hit:hit:handler.c:    &&   ch->in_room != NULL )
hit:hit:handler.c:	ch->in_room->light_mod -= obj->value[0];
hit:hit:handler.c:	ch->light -= obj->value[0];
hit:hit:handler.c:	ch->in_room->light_mod -= GLOW_LIGHT;
hit:hit:handler.c:	ch->light -= GLOW_LIGHT;
hit:hit:handler.c:	ch->in_room->light_mod -= DARK_LIGHT;
hit:hit:handler.c:	ch->light -= DARK_LIGHT;
hit:hit:handler.c:    if ( ch->wearing[wear_loc] != NULL
hit:hit:handler.c:    || ch->in_room == NULL )
hit:hit:handler.c:	    while( (od = ch->wearing[i]) != NULL )
hit:hit:handler.c:		obj_to_room( od, ch->in_room, TRUE );
hit:hit:handler.c:    for ( ch = char_list; ch != NULL; ch = ch->next )
hit:hit:handler.c:	if ( (p = ch->predelay_info) != NULL )
hit:hit:handler.c:    if ( ch->in_room == NULL )
hit:hit:handler.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:handler.c:	if ( ch->pReset != NULL )
hit:hit:handler.c:	    ch->pReset->target = NULL;
hit:hit:handler.c:    if ( ch->desc != NULL && ch->desc->original != NULL )
hit:hit:handler.c:    for ( wch = char_list; wch != NULL; wch = wch->next )
hit:hit:handler.c:	if ( wch->reply == ch )
hit:hit:handler.c:	    wch->reply = NULL;
hit:hit:handler.c:	if ( (p = wch->predelay_info) != NULL )
hit:hit:handler.c:    while ( ch->hunting != NULL )
hit:hit:handler.c:	remove_hunting( ch, ch->hunting->victim, TRUE );
hit:hit:handler.c:       char_list = ch->next;
hit:hit:handler.c:		prev->next = ch->next;
hit:hit:handler.c:    if ( ch->desc )
hit:hit:handler.c:        ch->desc->character = NULL;
hit:hit:handler.c:    for ( rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:handler.c:	( !is_name( arg, rch->name ) && !is_name( arg, rch->namelist ) ) )
hit:hit:handler.c:    for ( wch = char_list; wch != NULL ; wch = wch->next )
hit:hit:handler.c:	( !is_name( arg, wch->name ) && !is_name( arg, wch->namelist ) ) )
hit:hit:handler.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:hit:handler.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:hit:handler.c:    obj = get_obj_list( ch, argument, ch->in_room->contents );
hit:hit:handler.c:    diff = ch->vision_current - room_light( pRoomIndex );
hit:hit:handler.c:    for ( rch = pRoomIndex->people; rch != NULL; rch = rch->next_in_room )
hit:hit:handler.c:    if ( (!IS_NPC(ch) && IS_SET(ch->act, PLR_HOLYLIGHT)) 
hit:hit:handler.c:    if ( room_is_dark( ch->in_room, ch ) == VISION_TOO_DARK
hit:hit:handler.c:    || room_is_dark( ch->in_room, ch ) == VISION_TOO_BRIGHT )
hit:hit:handler.c:    if ( room_is_dark( ch->in_room, ch ) == VISION_HAZY )
hit:hit:handler.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_HOLYLIGHT) )
hit:hit:handler.c:    if ( room_is_dark( ch->in_room, ch ) == VISION_TOO_DARK
hit:hit:handler.c:    || room_is_dark( ch->in_room, ch ) == VISION_TOO_BRIGHT )
hit:hit:handler.c:    if ( !IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
hit:hit:handler.c:    if ( IS_NPC( victim ) && ch->pIndexData == victim->pIndexData )
hit:hit:handler.c:    aggr_bits = ch->aggression;
hit:hit:handler.c:	if ( victim->weight > ch->weight )
hit:hit:handler.c:	aggr += ch->weight - victim->weight;
hit:hit:handler.c:	aggr -= (ch->max_hit - ch->hit[HIT_LOC_BODY])*100/ch->max_hit;
hit:hit:handler.c:	aggr -= race_array[ch->race]->relations[victim->race];
hit:hit:handler.c:    if ( ch->predelay_info != NULL )
hit:hit:handler.c:	free_predelay( ch->predelay_info );
hit:hit:handler.c:    ch->predelay_info = p;
hit:hit:handler.c:    ch->predelay_time = delay;
hit:hit:hit:act_comm.c:    if ( !str_cmp( ch->name, pnote->sender ) )
hit:hit:hit:act_comm.c:    if ( is_name( ch->name, pnote->to_list ) )
hit:hit:hit:act_comm.c:    if ( ch->pnote != NULL )
hit:hit:hit:act_comm.c:	pnote	  = alloc_perm( sizeof(*ch->pnote) );
hit:hit:hit:act_comm.c:    pnote->sender	= str_dup( ch->name );
hit:hit:hit:act_comm.c:    ch->pnote		= pnote;
hit:hit:hit:act_comm.c:	REMOVE_BIT(ch->act, PLR_AFK);
hit:hit:hit:act_comm.c:    if (IS_SET(ch->act, PLR_AFK)) {
hit:hit:hit:act_comm.c:       REMOVE_BIT(ch->act, PLR_AFK);
hit:hit:hit:act_comm.c:	SET_BIT(ch->act, PLR_AFK);
hit:hit:hit:act_comm.c:	if ( to_one[0] != '\0' && str_cmp( ch->name, to_one ) )
hit:hit:hit:act_comm.c:    if ( str_cmp( ch->name, pnote->sender ) && to_new[0] != '\0' 
hit:hit:hit:act_comm.c:    if ( ch->pnote == NULL || ch->pnote->text[0] == '\0' )
hit:hit:hit:act_comm.c:    oldb = ch->pnote->text;
hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:act_comm.c:	    free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:act_comm.c:	    ch->pnote->text = str_dup( buf );
hit:hit:hit:act_comm.c:	send_to_char( ch->pnote->text, ch );
hit:hit:hit:act_comm.c:	strcpy( buf, ch->pnote->text );
hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:act_comm.c:	free_string( ch->pnote->subject, MEM_GENERAL );
hit:hit:hit:act_comm.c:	ch->pnote->subject = str_dup( argument );
hit:hit:hit:act_comm.c:	free_string( ch->pnote->to_list, MEM_GENERAL );
hit:hit:hit:act_comm.c:	ch->pnote->to_list = str_dup( argument );
hit:hit:hit:act_comm.c:	if ( ch->pnote != NULL )
hit:hit:hit:act_comm.c:	    free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:act_comm.c:	    free_string( ch->pnote->subject, MEM_GENERAL );
hit:hit:hit:act_comm.c:	    free_string( ch->pnote->to_list, MEM_GENERAL );
hit:hit:hit:act_comm.c:	    free_string( ch->pnote->date, MEM_GENERAL );
hit:hit:hit:act_comm.c:	    free_string( ch->pnote->sender, MEM_GENERAL );
hit:hit:hit:act_comm.c:	    ch->pnote->next	= note_free;
hit:hit:hit:act_comm.c:	    note_free		= ch->pnote;
hit:hit:hit:act_comm.c:	    ch->pnote		= NULL;
hit:hit:hit:act_comm.c:	if ( ch->pnote == NULL )
hit:hit:hit:act_comm.c:	    ch->pnote->sender,
hit:hit:hit:act_comm.c:	    ch->pnote->subject,
hit:hit:hit:act_comm.c:	    ch->pnote->to_list
hit:hit:hit:act_comm.c:	send_to_char( ch->pnote->text, ch );
hit:hit:hit:act_comm.c:	if ( ch->pnote == NULL )
hit:hit:hit:act_comm.c:	ch->pnote->next			= NULL;
hit:hit:hit:act_comm.c:	ch->pnote->date			= str_dup( strtime );
hit:hit:hit:act_comm.c:	    note_list	= ch->pnote;
hit:hit:hit:act_comm.c:	    pnote->next	= ch->pnote;
hit:hit:hit:act_comm.c:	pnote		= ch->pnote;
hit:hit:hit:act_comm.c:	ch->pnote	= NULL;
hit:hit:hit:act_comm.c:    REMOVE_BIT(ch->deaf, channel);
hit:hit:hit:act_comm.c:	position	= ch->position;
hit:hit:hit:act_comm.c:	ch->position	= POS_STANDING;
hit:hit:hit:act_comm.c:	ch->position	= position;
hit:hit:hit:act_comm.c:	&&  !IS_SET(och->deaf, channel) )
hit:hit:hit:act_comm.c:	    position		= vch->position;
hit:hit:hit:act_comm.c:	    vch->position	= position;
hit:hit:hit:act_comm.c:  gsn = *language_table[ch->language].pgsn;
hit:hit:hit:act_comm.c:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:act_comm.c:    if ( ch->in_room->exit[door] == NULL
hit:hit:hit:act_comm.c:    || ( room = ch->in_room->exit[door]->to_room ) == NULL )
hit:hit:hit:act_comm.c:    for ( vch = room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:act_comm.c:  gsn = *language_table[ch->language].pgsn;
hit:hit:hit:act_comm.c:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:act_comm.c:           sprintf(log_buf, "%s wishes to all \"%s\"",ch->name,argument );
hit:hit:hit:act_comm.c:    || ( IS_NPC(victim) && victim->in_room != ch->in_room ) )
hit:hit:hit:act_comm.c:	 || IS_SET(ch->act, PLR_WIZINVIS))
hit:hit:hit:act_comm.c:        sprintf( log_buf, "%s sends to %s \"%s\"", ch->name, victim->name, argument );
hit:hit:hit:act_comm.c:        sprintf( log_buf, "%s wishes to %s \"%s\"", ch->name, victim->name, argument );
hit:hit:hit:act_comm.c:    if ( ( victim = ch->reply ) == NULL )
hit:hit:hit:act_comm.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_NO_EMOTE) )
hit:hit:hit:act_comm.c:    if ( ch->position  < POS_STUNNED  )
hit:hit:hit:act_comm.c:    if ( ch->in_room && !IS_SET( ch->in_room->room_flags, ROOM_RENT )
hit:hit:hit:act_comm.c:    sprintf( log_buf, "%s has quit.", ch->name );
hit:hit:hit:act_comm.c:  //  d = ch->desc;
hit:hit:hit:act_comm.c:    d = ch->desc;
hit:hit:hit:act_comm.c:    if (!IS_SET(ch->act, PLR_AFK))
hit:hit:hit:act_comm.c:    if ( IS_AFFECTED(ch, AFF_CHARM) && ch->master != NULL )
hit:hit:hit:act_comm.c:	act( "You don't wish to leave your beloved master!", ch, ch->master, NULL, NULL, NULL, TO_CHAR, SENSE_SIXTH );
hit:hit:hit:act_comm.c:	if ( ch->master == NULL )
hit:hit:hit:act_comm.c:    if ( ch->master != NULL )
hit:hit:hit:act_comm.c:    if ( ch->master != NULL )
hit:hit:hit:act_comm.c:    ch->master        = master;
hit:hit:hit:act_comm.c:    ch->leader        = NULL;
hit:hit:hit:act_comm.c:    if ( ch->master == NULL )
hit:hit:hit:act_comm.c:	REMOVE_BIT( ch->affected_by, AFF_CHARM );
hit:hit:hit:act_comm.c:    act( "You stop following $N.", ch, ch->master, NULL, NULL, NULL, TO_CHAR, SENSE_SIXTH );
hit:hit:hit:act_comm.c:    ch->master = NULL;
hit:hit:hit:act_comm.c:    ch->leader = NULL;
hit:hit:hit:act_comm.c:    if ( ch->master != NULL )
hit:hit:hit:act_comm.c:    ch->leader = NULL;
hit:hit:hit:act_comm.c:    for ( fch = char_list; fch != NULL; fch = fch->next )
hit:hit:hit:act_comm.c:	if ( fch->master == ch )
hit:hit:hit:act_comm.c:	if ( fch->leader == ch )
hit:hit:hit:act_comm.c:	    fch->leader = fch;
hit:hit:hit:act_comm.c:    for ( och = ch->in_room->people; och != NULL; och = och_next )
hit:hit:hit:act_comm.c:	och_next = och->next_in_room;
hit:hit:hit:act_comm.c:	&&   och->master == ch
hit:hit:hit:act_comm.c:	leader = (ch->leader != NULL) ? ch->leader : ch;
hit:hit:hit:act_comm.c:	for ( gch = char_list; gch != NULL; gch = gch->next )
hit:hit:hit:act_comm.c:    if ( ch->master != NULL || ( ch->leader != NULL && ch->leader != ch ) )
hit:hit:hit:act_comm.c:    if ( IS_SET( ch->act, PLR_NO_TELL ) )
hit:hit:hit:act_comm.c:    sprintf( buf, "%s tells the group '%s'.\n\r", ch->name, argument );
hit:hit:hit:act_comm.c:    for ( gch = char_list; gch != NULL; gch = gch->next )
hit:hit:hit:act_comm.c:    if ( ach->leader != NULL ) ach = ach->leader;
hit:hit:hit:act_comm.c:    if ( bch->leader != NULL ) bch = bch->leader;
hit:hit:hit:act_info.c:    if ( ch->desc == NULL )
hit:hit:hit:act_info.c:	    if ( IS_NPC(ch) || IS_SET(ch->act, PLR_COMBINE) )
hit:hit:hit:act_info.c:	if ( IS_NPC(ch) || IS_SET(ch->act, PLR_COMBINE) )
hit:hit:hit:act_info.c:	if ( IS_NPC(ch) || IS_SET(ch->act, PLR_COMBINE) )
hit:hit:hit:act_info.c:	      rch != NULL; rch = rch->next_in_room ) {
hit:hit:hit:act_info.c:	    if ( rch->riding == victim ) {
hit:hit:hit:act_info.c:    for ( rch = list; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:act_info.c:	&&   IS_SET(rch->act, PLR_WIZINVIS)
hit:hit:hit:act_info.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_HOLYLIGHT) )
hit:hit:hit:act_info.c:    if ( ch->desc == NULL )
hit:hit:hit:act_info.c:    if ( ch->position < POS_SLEEPING )
hit:hit:hit:act_info.c:    if ( ch->position == POS_SLEEPING )
hit:hit:hit:act_info.c:    &&   !IS_SET(ch->act, PLR_HOLYLIGHT)
hit:hit:hit:act_info.c:    &&   room_is_dark( ch->in_room, ch ) == VISION_TOO_DARK )
hit:hit:hit:act_info.c:	show_char_to_char( ch->in_room->people, ch );
hit:hit:hit:act_info.c:    &&   !IS_SET(ch->act, PLR_HOLYLIGHT)
hit:hit:hit:act_info.c:    &&   room_is_dark( ch->in_room, ch ) == VISION_TOO_BRIGHT )
hit:hit:hit:act_info.c:	show_char_to_char( ch->in_room->people, ch );
hit:hit:hit:act_info.c:	 sprintf(buf2,"[%d] ", ch->in_room->vnum);
hit:hit:hit:act_info.c:     send_to_char( ch->in_room->name, ch );
hit:hit:hit:act_info.c:	  ( !IS_NPC( ch ) && !IS_SET( ch->act, PLR_BRIEF ) ) )
hit:hit:hit:act_info.c:	 send_to_char( ch->in_room->description, ch );
hit:hit:hit:act_info.c:     if ( IS_SET(ch->act, PLR_AUTOWEATHER) && IS_OUTDOORS(ch))
hit:hit:hit:act_info.c:     update_flora( ch->in_room );
hit:hit:hit:act_info.c:     display_flora( ch, ch->in_room->flora, 0 );
hit:hit:hit:act_info.c:     show_list_to_char( ch->in_room->contents, ch, FALSE, FALSE, FALSE );
hit:hit:hit:act_info.c:     show_char_to_char( ch->in_room->people,   ch );
hit:hit:hit:act_info.c:	for ( obj = ch->in_room->contents; obj != NULL; obj = obj->next_content )
hit:hit:hit:act_info.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:hit:hit:act_info.c:    for ( obj = ch->in_room->contents; obj != NULL; obj = obj->next_content )
hit:hit:hit:act_info.c:    pdesc = get_extra_descr( arg1, ch->in_room->extra_descr );
hit:hit:hit:act_info.c:	if ( (pexit = ch->in_room->exit[door]) == NULL )
hit:hit:hit:act_info.c:    if ( ( pexit = ch->in_room->exit[door] ) == NULL )
hit:hit:hit:act_info.c:    dist = URANGE( 1, ch->vision_range, 200 );
hit:hit:hit:act_info.c:    in_room = ch->in_room;
hit:hit:hit:act_info.c:    update_flora( ch->in_room );
hit:hit:hit:act_info.c:    if ( !IS_SET( ch->in_room->sector->flags, SECTOR_OUTDOORS ) )
hit:hit:hit:act_info.c:    soil_condition( ch, get_water_value( ch->in_room ) );
hit:hit:hit:act_info.c:	if ( ( pexit = ch->in_room->exit[door] ) != NULL
hit:hit:hit:act_info.c:       // && IS_SET( ch->act, PLR_HOLYLIGHT ))
hit:hit:hit:act_info.c:	ch->name,
hit:hit:hit:act_info.c:	IS_NPC(ch) ? "" : ch->short_descr );
hit:hit:hit:act_info.c:	(is_vowel(race_array[ch->race]->race_name[0]) ? "an" : "a" ),
hit:hit:hit:act_info.c:	race_array[ch->race]->race_name);
hit:hit:hit:act_info.c:    if ( get_trust( ch ) != ch->level )
hit:hit:hit:act_info.c:	ch->hit[HIT_LOC_BODY],  ch->max_hit,
hit:hit:hit:act_info.c:	ch->mana, ch->max_mana,
hit:hit:hit:act_info.c:	ch->move, ch->max_move );
hit:hit:hit:act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->condition[COND_DRUNK]   > 10 )
hit:hit:hit:act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->condition[COND_THIRST] ==  0 )
hit:hit:hit:act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->condition[COND_FULL]   ==  0 )
hit:hit:hit:act_info.c:    switch ( ch->position )
hit:hit:hit:act_info.c:    switch( ch->move_speed )
hit:hit:hit:act_info.c:      skill_table[*language_table[ch->language].pgsn].name );
hit:hit:hit:act_info.c:   free_string( ch->prompt, MEM_GENERAL );
hit:hit:hit:act_info.c:   ch->prompt = str_dup( buf );
hit:hit:hit:act_info.c:	if ( ( fImmortalOnly  && wch->level < LEVEL_IMMORTAL ) )
hit:hit:hit:act_info.c:/*	switch ( wch->level )
hit:hit:hit:act_info.c:	if ( IS_IMMORTAL( ch ) || wch->level > LEVEL_IMMORTAL )
hit:hit:hit:act_info.c:		     (IS_SET(wch->act, PLR_AFK) ? "[AFK]" : " "),
hit:hit:hit:act_info.c:                     (IS_SET(wch->act, PLR_WIZINVIS) ? "[INVIS]" : " "),
hit:hit:hit:act_info.c:		     wch->name,
hit:hit:hit:act_info.c:		     wch->short_descr);
hit:hit:hit:act_info.c:    show_list_to_char( ch->carrying, ch, TRUE, TRUE, FALSE );
hit:hit:hit:act_info.c:	for ( obj = ch->wearing[iWear]; obj != NULL; obj = obj->next_worn )
hit:hit:hit:act_info.c:	for ( obj2 = ch->carrying; obj2 != NULL; obj2 = obj2->next_content )
hit:hit:hit:act_info.c:	    &&   victim->in_room->area == ch->in_room->area
hit:hit:hit:act_info.c:	    &&   victim->in_room->area == ch->in_room->area
hit:hit:hit:act_info.c:	    if ( ch->description != NULL )
hit:hit:hit:act_info.c:		strcat( buf, ch->description );
hit:hit:hit:act_info.c:	free_string( ch->description, MEM_GENERAL );
hit:hit:hit:act_info.c:	ch->description = str_dup( buf );
hit:hit:hit:act_info.c:    send_to_char( ch->description ? ch->description : "(None).\n\r", ch );
hit:hit:hit:act_info.c:    if ( strcmp( crypt( arg1, ch->pcdata->pwd ), ch->pcdata->pwd ) )
hit:hit:hit:act_info.c:    pwdnew = crypt( arg2, ch->name );
hit:hit:hit:act_info.c:    free_string( ch->pcdata->pwd, MEM_PCDATA );
hit:hit:hit:act_info.c:    ch->pcdata->pwd = str_dup( pwdnew );
hit:hit:hit:act_info.c:	send_to_char( !IS_SET(ch->deaf, CHANNEL_CHAT)
hit:hit:hit:act_info.c:	    send_to_char( !IS_SET(ch->deaf, CHANNEL_IMMTALK)
hit:hit:hit:act_info.c:	    send_to_char( !IS_SET(ch->deaf, CHANNEL_LOG)
hit:hit:hit:act_info.c:	    REMOVE_BIT (ch->deaf, bit);
hit:hit:hit:act_info.c:	    SET_BIT    (ch->deaf, bit);
hit:hit:hit:act_info.c:	if ( IS_SET(ch->act,PLR_BRIEF))
hit:hit:hit:act_info.c:	    REMOVE_BIT(ch->act,PLR_BRIEF);
hit:hit:hit:act_info.c:	    SET_BIT(ch->act,PLR_BRIEF);
hit:hit:hit:act_info.c:	if ( IS_SET(ch->act,PLR_BLANK))
hit:hit:hit:act_info.c:	    REMOVE_BIT(ch->act,PLR_BLANK);
hit:hit:hit:act_info.c:	    SET_BIT(ch->act,PLR_BLANK);
hit:hit:hit:act_info.c:	if ( IS_SET(ch->act,PLR_PEACEFUL))
hit:hit:hit:act_info.c:	    REMOVE_BIT(ch->act,PLR_PEACEFUL);
hit:hit:hit:act_info.c:	    SET_BIT(ch->act,PLR_PEACEFUL);
hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_BLANK)
hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_BRIEF)
hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_COMBINE)
hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_PEACEFUL)
hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_PROMPT)
hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_TELNET_GA)
hit:hit:hit:act_info.c:	send_to_char( !IS_SET(ch->act, PLR_NO_EMOTE)
hit:hit:hit:act_info.c:	send_to_char( !IS_SET(ch->act, PLR_NO_TELL)
hit:hit:hit:act_info.c:	    SET_BIT    (ch->act, bit);
hit:hit:hit:act_info.c:	    REMOVE_BIT (ch->act, bit);
hit:hit:hit:act_info.c:    ch->pcdata->pagelen = i;
hit:hit:hit:act_info.c:  sprintf( buf, "Page Length (pagelen):  %d\n\r", ch->pcdata->pagelen );
hit:hit:hit:act_move.c:  in_room = ch->in_room;
hit:hit:hit:act_move.c:  if ( ch->riding != NULL && ch->riding->in_room != in_room )
hit:hit:hit:act_move.c:    ch->riding = NULL;
hit:hit:hit:act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:act_move.c:       &&   ch->master != NULL
hit:hit:hit:act_move.c:       &&   in_room == ch->master->in_room 
hit:hit:hit:act_move.c:       &&   !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:act_move.c:      &&  !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:act_move.c:      for ( obj = ch->carrying; obj != NULL; obj = obj->next_content) {
hit:hit:hit:act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:act_move.c:  if ( ch->move_speed < 0 || ch->move_speed >= MOVE_MAX )
hit:hit:hit:act_move.c:    ch->move_speed = MOVE_WALK;
hit:hit:hit:act_move.c:  if ( ch->move < move && ch->riding == NULL )
hit:hit:hit:act_move.c:  if ( ch->riding != NULL && ch->riding->move < 2 * move )
hit:hit:hit:act_move.c:  if ( ch->riding == NULL )
hit:hit:hit:act_move.c:    ch->move -= move;
hit:hit:hit:act_move.c:    ch->riding->move -= 2 * move;
hit:hit:hit:act_move.c:  if ( ch->move_speed == MOVE_SNEAK && ch->riding == NULL )
hit:hit:hit:act_move.c:      if ( ch->next_in_room != NULL )
hit:hit:hit:act_move.c:    if ( ch->riding == NULL )
hit:hit:hit:act_move.c:        move_names[ch->move_speed], TO_ROOM, SENSE_SIGHT|SENSE_HEARING );
hit:hit:hit:act_move.c:      act( "$n leaves $t, riding $N.", ch, ch->riding, NULL, dir_name[door],
hit:hit:hit:act_move.c:  if ( ch->riding != NULL )
hit:hit:hit:act_move.c:    char_from_room( ch->riding );
hit:hit:hit:act_move.c:    char_to_room( ch->riding, to_room, TRUE );
hit:hit:hit:act_move.c:    if ( ch->riding == NULL )
hit:hit:hit:act_move.c:        dir_name_2[rev_dir[door]], move_names[ch->move_speed],
hit:hit:hit:act_move.c:      act( "$n has arrived from $t, riding $N.", ch, ch->riding, NULL,
hit:hit:hit:act_move.c:    fch_next = fch->next_in_room;
hit:hit:hit:act_move.c:    if ( fch->master == ch && fch->position == POS_STANDING
hit:hit:hit:act_move.c:  if (!IS_UNSWITCHED_MOB(ch) && IS_SET(ch->act, PLR_HOLYWALK))
hit:hit:hit:act_move.c:  switch( ch->move_speed )
hit:hit:hit:act_move.c:  if (!IS_UNSWITCHED_MOB(ch) && IS_SET(ch->act, PLR_HOLYWALK))
hit:hit:hit:act_move.c:  switch( ch->move_speed )
hit:hit:hit:act_move.c:	    if ( ( pexit = ch->in_room->exit[door] ) != NULL
hit:hit:hit:act_move.c:    if ( ( pexit = ch->in_room->exit[door] ) == NULL )
hit:hit:hit:act_move.c:	    if ( ( pexit = ch->in_room->exit[dir] ) != NULL
hit:hit:hit:act_move.c:    if ( ( pexit = ch->in_room->exit[dir] ) == NULL
hit:hit:hit:act_move.c:	damage( ch, ch, UMIN(dice(1,pain),dice(1,ch->hit[0])), gsn_tumbling, NULL, gn_wear_none );
hit:hit:hit:act_move.c:	pexit = ch->in_room->exit[door];
hit:hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:act_move.c:	    for ( rch = to_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:act_move.c:	pexit = ch->in_room->exit[door];
hit:hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:act_move.c:	    for ( rch = to_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:act_move.c:	pexit	= ch->in_room->exit[door];
hit:hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:act_move.c:	    for ( rch = to_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:act_move.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:hit:hit:act_move.c:	if ( building->value[0] != ch->in_room->vnum )
hit:hit:hit:act_move.c:	pexit	= ch->in_room->exit[door];
hit:hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:act_move.c:	pexit = ch->in_room->exit[door];
hit:hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:act_move.c:  for ( fi = ch->in_room->flora; fi != NULL; fi = fi->next )
hit:hit:hit:act_move.c:    pexit = ch->in_room->exit[door];
hit:hit:hit:act_move.c:    &&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:act_move.c:    switch ( ch->position )
hit:hit:hit:act_move.c:	ch->position = POS_STANDING;
hit:hit:hit:act_move.c:    switch ( ch->position )
hit:hit:hit:act_move.c:	ch->position = POS_RESTING;
hit:hit:hit:act_move.c:	ch->position = POS_RESTING;
hit:hit:hit:act_move.c:    switch ( ch->position )
hit:hit:hit:act_move.c:	ch->position = POS_RESTING;
hit:hit:hit:act_move.c:    if ( ch->riding != NULL )
hit:hit:hit:act_move.c:    for ( rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:act_move.c:	if ( rch->riding == mount )
hit:hit:hit:act_move.c:    if ( rch != NULL && rch->riding == mount )
hit:hit:hit:act_move.c:    ch->riding = mount;
hit:hit:hit:act_move.c:    switch ( ch->position )
hit:hit:hit:act_move.c:	ch->position = POS_SLEEPING;
hit:hit:hit:act_move.c:	if (ch->position != POS_SLEEPING)
hit:hit:hit:act_move.c:	ch->position = POS_RESTING;
hit:hit:hit:act_move.c:  ch->move_speed = MOVE_WALK;
hit:hit:hit:act_move.c:  ch->move_speed = MOVE_RUN;
hit:hit:hit:act_move.c:  ch->move_speed = MOVE_SNEAK;
hit:hit:hit:act_move.c:    if ( ch->riding == NULL )
hit:hit:hit:act_move.c:    act("You stop riding $N.", ch, ch->riding, NULL, NULL, NULL, TO_CHAR, SENSE_SIGHT );
hit:hit:hit:act_move.c:    act("$n stops riding $N.", ch, ch->riding, NULL, NULL, NULL, TO_ROOM, SENSE_SIGHT );
hit:hit:hit:act_move.c:    ch->riding = NULL;
hit:hit:hit:act_move.c:    for ( controls = ch->in_room->contents; controls != NULL; controls = controls->next_content )
hit:hit:hit:act_move.c:        in_room = ch->in_room;
hit:hit:hit:act_move.c:    for ( vch = in_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:act_move.c:    in_room = ch->in_room;
hit:hit:hit:act_move.c:    for ( vch = to_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:act_move.c:    for ( building = ch->in_room->contents; building != NULL; building = building->next_content )
hit:hit:hit:act_move.c:	REMOVE_BIT(ch->affected_by, AFF_HIDE);
hit:hit:hit:act_move.c:	SET_BIT(ch->affected_by, AFF_HIDE);
hit:hit:hit:act_move.c:    if (IS_SET(ch->affected_by, AFF_INVISIBLE) )
hit:hit:hit:act_move.c:        REMOVE_BIT   ( ch->affected_by, AFF_INVISIBLE	);
hit:hit:hit:act_obj.c:    if ( ch->carry_number + 1 > can_carry_n( ch ) )
hit:hit:hit:act_obj.c:    if ( ch->carry_weight + get_obj_weight( obj ) > can_carry_w( ch ) )
hit:hit:hit:act_obj.c:	    obj = get_obj_list( ch, arg1, ch->in_room->contents );
hit:hit:hit:act_obj.c:	    for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
hit:hit:hit:act_obj.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:act_obj.c:	for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
hit:hit:hit:act_obj.c:	obj_to_room( create_money( amount, coin ), ch->in_room, TRUE );
hit:hit:hit:act_obj.c:	obj_to_room( obj, ch->in_room, TRUE );
hit:hit:hit:act_obj.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:act_obj.c:		obj_to_room( obj, ch->in_room, TRUE );
hit:hit:hit:act_obj.c:    if ( !str_cmp( arg, "channel" ) && is_name( arg, ch->in_room->name ) )
hit:hit:hit:act_obj.c:    if ( !str_cmp( arg, "lake" ) && is_name( arg, ch->in_room->name ) )
hit:hit:hit:act_obj.c:    if ( !str_cmp( arg, "river" ) && is_name( arg, ch->in_room->name ) )
hit:hit:hit:act_obj.c:    if ( !str_cmp( arg, "stream" ) && is_name( arg, ch->in_room->name ) )
hit:hit:hit:act_obj.c:    if ( !str_cmp( arg, "waterfall" ) && is_name( arg, ch->in_room->name ) )
hit:hit:hit:act_obj.c:	if ( !IS_SET( ch->in_room->room_flags, ROOM_DRINKABLE_WATER )
hit:hit:hit:act_obj.c:    && IS_SET( ch->in_room->sector->flags, SECTOR_OUTDOORS ) )
hit:hit:hit:act_obj.c:      ch->in_room->water += obj->value[1];
hit:hit:hit:act_obj.c:    && IS_SET( ch->in_room->sector->flags, SECTOR_OUTDOORS ) )
hit:hit:hit:act_obj.c:	for ( obj = ch->in_room->contents; obj; obj = obj->next_content )
hit:hit:hit:act_obj.c:	&& ( !IS_SET( ch->in_room->room_flags, ROOM_DRINKABLE_WATER )
hit:hit:hit:act_obj.c:    && ch->pcdata->condition[COND_DRUNK] > 10
hit:hit:hit:act_obj.c:	ch->pcdata->condition[COND_THIRST] = 48;
hit:hit:hit:act_obj.c:	    ch->pcdata->condition[COND_THIRST] = 48;
hit:hit:hit:act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_DRUNK]  > 10 )
hit:hit:hit:act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_FULL]   > 40 )
hit:hit:hit:act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_THIRST] > 40 )
hit:hit:hit:act_obj.c:	    ch->pcdata->condition[COND_FULL] = UMIN( ch->pcdata->condition[COND_FULL], 48 );
hit:hit:hit:act_obj.c:	    ch->pcdata->condition[COND_THIRST] = UMIN( ch->pcdata->condition[COND_THIRST], 48 );
hit:hit:hit:act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_FULL] > 40 )
hit:hit:hit:act_obj.c:	    condition = ch->pcdata->condition[COND_FULL];
hit:hit:hit:act_obj.c:	    if ( condition == 0 && ch->pcdata->condition[COND_FULL] > 0 )
hit:hit:hit:act_obj.c:	    else if ( ch->pcdata->condition[COND_FULL] > 40 )
hit:hit:hit:act_obj.c:    && ch->wearing[*wear_info[location].dependency] == NULL )
hit:hit:hit:act_obj.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:hit:hit:act_obj.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:act_obj.c:    && ch->wearing[*wear_info[gn_wear_on_belt].dependency] == NULL )
hit:hit:hit:act_obj.c:    for ( obj = ch->wearing[gn_wear_on_belt]; obj != NULL; obj = obj->next_worn )
hit:hit:hit:act_obj.c:	  for ( vch = ch->in_room->people; vch != NULL; vch = vch_next )
hit:hit:hit:act_obj.c:	    vch_next	= vch->next_in_room;
hit:hit:hit:act_obj.c:	if ( ( obj = get_obj_list( ch, arg1, ch->in_room->contents ) ) == NULL )
hit:hit:hit:act_obj.c:/*        if ( IS_SET(ch->act, PLR_HOLYWALK) )
hit:hit:hit:act_obj.c:    && ( objfrom = get_obj_list( ch, arg2, ch->in_room->contents ) ) == NULL )
hit:hit:hit:act_obj.c:/*        if ( IS_SET(ch->act, PLR_HOLYWALK ) )
hit:hit:hit:act_obj.c:/*    if ( IS_SET(ch->act, PLR_HOLYWALK ) )
hit:hit:hit:act_obj.c:    if ( ch->predelay_info == NULL )
hit:hit:hit:act_obj.c:    type =  ch->predelay_info->number;
hit:hit:hit:act_obj.c:    victim = ch->predelay_info->victim1;
hit:hit:hit:act_obj.c:    obj = ch->predelay_info->obj1;
hit:hit:hit:act_obj.c:    objfrom = ch->predelay_info->obj2;
hit:hit:hit:act_obj.c:	|| obj->in_room != ch->in_room )
hit:hit:hit:act_obj.c:	|| objfrom->in_room != ch->in_room )
hit:hit:hit:act_obj.c:      || victim->in_room != ch->in_room
hit:hit:hit:act_obj.c:	sprintf( buf, "%s is a bloody thief!", ch->name );
hit:hit:hit:act_obj.c:    if ( ch->carry_number + 1 > can_carry_n( ch ) )
hit:hit:hit:act_obj.c:    if ( ch->carry_weight + get_obj_weight( obj ) > can_carry_w( ch ) )
hit:hit:hit:act_obj.c:	    obj_to_room( obj, ch->in_room, TRUE );
hit:hit:hit:act_obj.c:	obj_to_room( item, ch->in_room, TRUE );
hit:hit:hit:act_obj.c:	obj_to_room( item, ch->in_room, TRUE );
hit:hit:hit:act_wiz.c:	free_string( ch->pcdata->bamfin, MEM_PCDATA );
hit:hit:hit:act_wiz.c:	ch->pcdata->bamfin = str_dup( argument );
hit:hit:hit:act_wiz.c:    for ( rch = char_list; rch != NULL; rch = rch->next )
hit:hit:hit:act_wiz.c:	if ( !IS_NPC(rch) && !str_cmp( rch->name, name ) )
hit:hit:hit:act_wiz.c:    rch->next = char_list;
hit:hit:hit:act_wiz.c:	free_string( ch->pcdata->bamfout, MEM_PCDATA );
hit:hit:hit:act_wiz.c:	ch->pcdata->bamfout = str_dup( argument );
hit:hit:hit:act_wiz.c:	&&   d->character->in_room == ch->in_room )
hit:hit:hit:act_wiz.c:	location = ch->in_room;
hit:hit:hit:act_wiz.c:	&& !can_build( ( ch->desc->original != NULL ?
hit:hit:hit:act_wiz.c:	                 ch->desc->original : ch), victim->pIndexData->area ) )
hit:hit:hit:act_wiz.c:    original = ch->in_room;
hit:hit:hit:act_wiz.c:    for ( wch = char_list; wch != NULL; wch = wch->next )
hit:hit:hit:act_wiz.c:    if ( !IS_SET(ch->act, PLR_WIZINVIS) )
hit:hit:hit:act_wiz.c:	    (ch->pcdata != NULL && ch->pcdata->bamfout[0] != '\0')
hit:hit:hit:act_wiz.c:	    ? ch->pcdata->bamfout : "leaves in a swirling mist",
hit:hit:hit:act_wiz.c:    if ( !IS_SET(ch->act, PLR_WIZINVIS) )
hit:hit:hit:act_wiz.c:	    (ch->pcdata != NULL && ch->pcdata->bamfin[0] != '\0')
hit:hit:hit:act_wiz.c:	    ? ch->pcdata->bamfin : "appears in a swirling mist",
hit:hit:hit:act_wiz.c:    location = ( arg[0] == '\0' ) ? ch->in_room : find_location( ch, arg );
hit:hit:hit:act_wiz.c:    if ( ch->in_room != location && room_is_private( location )
hit:hit:hit:act_wiz.c:    for ( rch = location->people; rch; rch = rch->next_in_room )
hit:hit:hit:act_wiz.c:	one_argument( rch->name, buf );
hit:hit:hit:act_wiz.c:    sprintf( buf, "Reboot by %s.", ch->name );
hit:hit:hit:act_wiz.c:        sprintf( buf, "Reboot for code by %s.", ch->name );
hit:hit:hit:act_wiz.c:    sprintf( buf, "Shutdown by %s.", ch->name );
hit:hit:hit:act_wiz.c:	    if ( d->snoop_by == ch->desc )
hit:hit:hit:act_wiz.c:    if ( ch->desc != NULL )
hit:hit:hit:act_wiz.c:	for ( d = ch->desc->snoop_by; d != NULL; d = d->snoop_by )
hit:hit:hit:act_wiz.c:    victim->desc->snoop_by = ch->desc;
hit:hit:hit:act_wiz.c:    if ( ch->desc == NULL )
hit:hit:hit:act_wiz.c:    if ( ch->desc->original != NULL )
hit:hit:hit:act_wiz.c:    ch->desc->character = victim;
hit:hit:hit:act_wiz.c:    ch->desc->original  = ch;
hit:hit:hit:act_wiz.c:    victim->desc        = ch->desc;
hit:hit:hit:act_wiz.c:    ch->desc            = NULL;
hit:hit:hit:act_wiz.c:    ch->switched_into	= victim;
hit:hit:hit:act_wiz.c:    if ( ch->desc == NULL )
hit:hit:hit:act_wiz.c:    if ( ch->desc->original == NULL )
hit:hit:hit:act_wiz.c:    ch->desc->character       = ch->desc->original;
hit:hit:hit:act_wiz.c:    ch->desc->original        = NULL;
hit:hit:hit:act_wiz.c:    ch->desc->character->desc = ch->desc; 
hit:hit:hit:act_wiz.c:    ch->desc                  = NULL;
hit:hit:hit:act_wiz.c:    ch->switched_into	      = NULL;
hit:hit:hit:act_wiz.c:    char_to_room( victim, ch->in_room, TRUE );
hit:hit:hit:act_wiz.c:	obj_to_room( obj, ch->in_room, TRUE );
hit:hit:hit:act_wiz.c:	for ( victim = ch->in_room->people; victim != NULL; victim = vnext )
hit:hit:hit:act_wiz.c:	for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
hit:hit:hit:act_wiz.c:    for ( rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:act_wiz.c:        sprintf( log_buf, "Log: %s changed %s's password.",ch->name,victim->name );
hit:hit:hit:act_wiz.c:        sprintf( log_buf, "%s changed %s's password.",ch->name,victim->name );
hit:hit:hit:act_wiz.c:    sprintf( log_buf, "%s: %s %s %s",ch->name,arg1,arg2,arg3 );
hit:hit:hit:act_wiz.c:    if ( !can_build( ch, ch->in_room->area ) )
hit:hit:hit:act_wiz.c:    location = ch->in_room;
hit:hit:hit:act_wiz.c:      s = sector_lookup( arg3, ch->in_room->area );
hit:hit:hit:act_wiz.c:	    vch_next = vch->next;
hit:hit:hit:act_wiz.c:		if (IS_SET(vch->act, PLR_AFK)) {
hit:hit:hit:act_wiz.c:		    REMOVE_BIT(vch->act, PLR_AFK);
hit:hit:hit:act_wiz.c:		if (was_afk) SET_BIT(vch->act, PLR_AFK);
hit:hit:hit:act_wiz.c:    if ( IS_SET(ch->act, PLR_WIZINVIS) )
hit:hit:hit:act_wiz.c:	REMOVE_BIT(ch->act, PLR_WIZINVIS);
hit:hit:hit:act_wiz.c:	SET_BIT(ch->act, PLR_WIZINVIS);
hit:hit:hit:act_wiz.c:    if (IS_SET(ch->act, PLR_HOLYLIGHT)) {
hit:hit:hit:act_wiz.c:        REMOVE_BIT(ch->act, PLR_HOLYLIGHT);
hit:hit:hit:act_wiz.c:        SET_BIT(ch->act, PLR_HOLYLIGHT);
hit:hit:hit:act_wiz.c:	REMOVE_BIT(ch->act, PLR_HOLYSPEECH);
hit:hit:hit:act_wiz.c:	SET_BIT(ch->act, PLR_HOLYSPEECH);
hit:hit:hit:act_wiz.c:    if (IS_SET(ch->act, PLR_HOLYNAME)) {
hit:hit:hit:act_wiz.c:        REMOVE_BIT(ch->act, PLR_HOLYNAME);
hit:hit:hit:act_wiz.c:        SET_BIT(ch->act, PLR_HOLYNAME);
hit:hit:hit:act_wiz.c:    if (IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:act_wiz.c:        REMOVE_BIT(ch->act, PLR_HOLYWALK);
hit:hit:hit:act_wiz.c:        SET_BIT(ch->act, PLR_HOLYWALK);
hit:hit:hit:act_wiz.c:    if (IS_SET(ch->act, PLR_HOLYVNUM)) {
hit:hit:hit:act_wiz.c:        REMOVE_BIT(ch->act, PLR_HOLYVNUM);
hit:hit:hit:act_wiz.c:        SET_BIT(ch->act, PLR_HOLYVNUM);
hit:hit:hit:act_wiz.c:	    IS_SET(ch->act, PLR_HOLYLIGHT) ? "ON" : "OFF");
hit:hit:hit:act_wiz.c:	    IS_SET(ch->act, PLR_HOLYNAME) ? "ON" : "OFF");
hit:hit:hit:act_wiz.c:	    IS_SET(ch->act, PLR_HOLYWALK) ? "ON" : "OFF");
hit:hit:hit:act_wiz.c:	    IS_SET(ch->act, PLR_HOLYVNUM) ? "ON" : "OFF");
hit:hit:hit:change.c:  if ( ch->dynamic_descr )
hit:hit:hit:change.c:    free_string( ch->dynamic_descr, MEM_GENERAL );
hit:hit:hit:change.c:  ch->dynamic_descr = NULL;
hit:hit:hit:change.c:        ch->dynamic_descr = str_dup( c );
hit:hit:hit:change.c:        send_to_char( ch->dynamic_descr, ch );
hit:hit:hit:change.c:      ch->language = i; 
hit:hit:hit:character:act_wiz.c:	&&   d->character->in_room == ch->in_room )
hit:hit:hit:character:act_wiz.c:	    if ( d->snoop_by == ch->desc )
hit:hit:hit:character:act_wiz.c:	for ( d = ch->desc->snoop_by; d != NULL; d = d->snoop_by )
hit:hit:hit:character:comm.c:	sprintf( log_buf, "%s@%s has connected.", ch->name, d->host );
hit:hit:hit:character:comm.c:	sprintf( log_buf, "%s@%s has entered the game.", ch->name, d->host );
hit:hit:hit:character:comm.c:	  ch->name, d->host );
hit:hit:hit:character:comm.c:	&& !str_cmp( d->character->name, ch->name ) )
hit:hit:hit:character:comm.c:		d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
hit:hit:hit:character:comm.c:    sprintf( log_buf, "%s@%s reconnected.", ch->name, d->host );
hit:hit:hit:character:handler.c:    for ( paf_old = ch->affected; paf_old != NULL; paf_old = paf_old->next )
hit:hit:hit:character:olc.c:	for ( ed = ch->in_room->extra_descr; ed != NULL; ed = ed->next )
hit:hit:hit:character:olc.c:	ed->description = str_dup_tab( ch->pnote->text, TRUE );
hit:hit:hit:character:olc.c:	for ( ed = ch->in_room->extra_descr; ed != NULL; ed = ed->next )
hit:hit:hit:character:olc.c:	ch->pnote->text = str_dup_tab( ed->description, FALSE );
hit:hit:hit:character:olc.c:		pAppend->next = ch->in_room->area->reset_first;
hit:hit:hit:character:olc.c:    for ( ed = ch->in_room->extra_descr; ed != NULL; ed = ed->next )
hit:hit:hit:character:olc.c:	ed->next = ch->in_room->extra_descr;
hit:hit:hit:character:olc.c:	    ch->in_room->extra_descr = ed->next;
hit:hit:hit:comm.c:	sprintf( log_buf, "Closing link to %s.", ch->name );
hit:hit:hit:comm.c:	    ch->desc = NULL;
hit:hit:hit:comm.c:	if ( IS_SET(ch->act, PLR_BLANK) )
hit:hit:hit:comm.c:	if ( IS_SET(ch->act, PLR_TELNET_GA) )
hit:hit:hit:comm.c:   if( ch->prompt == NULL )
hit:hit:hit:comm.c:   else if ( ch->prompt[0] == '\0' )
hit:hit:hit:comm.c:            sprintf( buf2, "%d", ch->hit[HIT_LOC_BODY] );
hit:hit:hit:comm.c:            sprintf( buf2, "%d", ch->max_hit );
hit:hit:hit:comm.c:            if ( IS_IMMORTAL(ch) && IS_SET(ch->act, PLR_WIZINVIS) )
hit:hit:hit:comm.c:            sprintf( buf2, "%d", ch->mana );
hit:hit:hit:comm.c:            sprintf( buf2, "%d", ch->max_mana );
hit:hit:hit:comm.c:            sprintf( buf2, "%d", ch->move );
hit:hit:hit:comm.c:            sprintf( buf2, "%d", ch->max_move );
hit:hit:hit:comm.c:            if( ch->in_room != NULL )
hit:hit:hit:comm.c:		((!IS_NPC(ch) && IS_SET(ch->act,PLR_HOLYLIGHT)) ||
hit:hit:hit:comm.c:		 (!IS_AFFECTED(ch,AFF_BLIND) && !room_is_dark( ch->in_room, ch ) != VISION_NORMAL))
hit:hit:hit:comm.c:		? ch->in_room->name : "darkness");
hit:hit:hit:comm.c:            if( ch->in_room != NULL )
hit:hit:hit:comm.c:               sprintf( buf2, "%s", ch->in_room->name );
hit:hit:hit:comm.c:            if( IS_IMMORTAL( ch ) && ch->in_room != NULL )
hit:hit:hit:comm.c:               sprintf( buf2, "%d", ch->in_room->vnum );
hit:hit:hit:comm.c:            if( IS_IMMORTAL( ch ) && ch->in_room != NULL )
hit:hit:hit:comm.c:               sprintf( buf2, "%s", ch->in_room->area->name );
hit:hit:hit:comm.c:   write_to_buffer( ch->desc, buf, point - buf );
hit:hit:hit:comm.c:	if ( strcmp( crypt( argument, ch->pcdata->pwd ), ch->pcdata->pwd ) )
hit:hit:hit:comm.c:	if ( check_reconnect( d, ch->name, TRUE ) )
hit:hit:hit:comm.c:	if ( IS_SET( ch->act, PLR_REJECTED ) )
hit:hit:hit:comm.c:		ch->pcdata->rejected );
hit:hit:hit:comm.c:		REJECTED_DIR, capitalize( ch->name ) );
hit:hit:hit:comm.c:	if (IS_SET(ch->act, PLR_AFK))
hit:hit:hit:comm.c:	    REMOVE_BIT(ch->act, PLR_AFK);
hit:hit:hit:comm.c:	sprintf( log_buf, "%s@%s has connected.", ch->name, d->host );
hit:hit:hit:comm.c:	sprintf( buf, "\n\rWelcome back, %s.\n\r", ch->name );
hit:hit:hit:comm.c:	if ( IS_SET( ch->act, PLR_UNAPPROVED ) )
hit:hit:hit:comm.c:	ch->next	= char_list;
hit:hit:hit:comm.c:	if ( ch->level == 0 )
hit:hit:hit:comm.c:	    ch->perm_stat_phys_str
hit:hit:hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_phys_str_mod;
hit:hit:hit:comm.c:	    ch->perm_stat_phys_dex
hit:hit:hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_phys_dex_mod;
hit:hit:hit:comm.c:	    ch->perm_stat_phys_tou
hit:hit:hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_phys_tou_mod;
hit:hit:hit:comm.c:	    ch->perm_stat_phys_qui
hit:hit:hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_phys_qui_mod;
hit:hit:hit:comm.c:	    ch->perm_stat_ment_int
hit:hit:hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_ment_int_mod;
hit:hit:hit:comm.c:	    ch->perm_offense = 10;
hit:hit:hit:comm.c:	    ch->level	= 1;
hit:hit:hit:comm.c:	    ch->max_hit = race_array[ch->race]->hits_base
hit:hit:hit:comm.c:    + dice( race_array[ch->race]->hitnodice, race_array[ch->race]->hitsizedice );
hit:hit:hit:comm.c:	    ch->hit[HIT_LOC_BODY]	= ch->max_hit;
hit:hit:hit:comm.c:	    ch->max_mana = race_array[ch->race]->mana;
hit:hit:hit:comm.c:	    ch->mana	= ch->max_mana;
hit:hit:hit:comm.c:	    ch->max_move = race_array[ch->race]->move;
hit:hit:hit:comm.c:	    ch->move	= ch->max_move;
hit:hit:hit:comm.c:	    ch->vision_min = race_array[ch->race]->vision_min;
hit:hit:hit:comm.c:	    ch->vision_max = race_array[ch->race]->vision_max;
hit:hit:hit:comm.c:	    ch->vision_range = race_array[ch->race]->vision_range;
hit:hit:hit:comm.c:	    ch->prompt = NULL;
hit:hit:hit:comm.c:	    ch->height = race_array[ch->race]->height_base
hit:hit:hit:comm.c:                         + dice( race_array[ch->race]->heightnodice,
hit:hit:hit:comm.c:                                 race_array[ch->race]->heightsizedice );
hit:hit:hit:comm.c:	    ch->weight = race_array[ch->race]->weight_base
hit:hit:hit:comm.c:                         + dice( race_array[ch->race]->weightnodice,
hit:hit:hit:comm.c:                                 race_array[ch->race]->weightsizedice );
hit:hit:hit:comm.c:            ch->pcdata->learned[gsn_common] = 100;
hit:hit:hit:comm.c:	else if ( ch->in_room != NULL )
hit:hit:hit:comm.c:	    char_to_room( ch, ch->in_room, FALSE );
hit:hit:hit:comm.c:	sprintf( log_buf, "%s@%s has entered the game.", ch->name, d->host );
hit:hit:hit:comm.c:	if ( IS_SET(ch->act, PLR_DENY) )
hit:hit:hit:comm.c:        if (IS_SET(ch->act, PLR_DEAD) )
hit:hit:hit:comm.c:	pwdnew = crypt( argument, ch->name );
hit:hit:hit:comm.c:	free_string( ch->pcdata->pwd, MEM_PCDATA );
hit:hit:hit:comm.c:	ch->pcdata->pwd	= str_dup( pwdnew );
hit:hit:hit:comm.c:	if ( strcmp( crypt( argument, ch->pcdata->pwd ), ch->pcdata->pwd ) )
hit:hit:hit:comm.c:	case 'm': case 'M': ch->sex = SEX_MALE;    break;
hit:hit:hit:comm.c:	case 'f': case 'F': ch->sex = SEX_FEMALE;  break;
hit:hit:hit:comm.c:		ch->race = iRace;
hit:hit:hit:comm.c:	    if ( race_array[ch->race]->classes[iClass] == TRUE )
hit:hit:hit:comm.c:		ch->class = iClass;
hit:hit:hit:comm.c:	if ( iClass == MAX_CLASS || race_array[ch->race]->classes[iClass] == FALSE )
hit:hit:hit:comm.c:	ch->long_descr = str_dup( argument );
hit:hit:hit:comm.c:	ch->short_descr = str_dup( argument );
hit:hit:hit:comm.c:	ch->namelist = str_dup( argument );
hit:hit:hit:comm.c:	    strcpy( buf, ch->description );
hit:hit:hit:comm.c:	    free_string( ch->description, MEM_PCDATA );
hit:hit:hit:comm.c:	    ch->description = str_dup( buf );
hit:hit:hit:comm.c:	ch->pcdata->email_address = str_dup( argument );
hit:hit:hit:comm.c:	ch->pcdata->rejected = str_dup( "" );
hit:hit:hit:comm.c:	SET_BIT( ch->act, PLR_UNAPPROVED );
hit:hit:hit:comm.c:        SET_BIT( ch->act, PLR_HOLYLIGHT );
hit:hit:hit:comm.c:	  ch->name, d->host );
hit:hit:hit:comm.c:    for ( ch = char_list; ch != NULL; ch = ch->next )
hit:hit:hit:comm.c:	&& ( ch->name && !str_cmp( ch->name, name ) )
hit:hit:hit:comm.c:	&& IS_SET( ch->act, PLR_REVIEWING ) )
hit:hit:hit:comm.c:    for ( ch = char_list; ch != NULL; ch = ch->next )
hit:hit:hit:comm.c:	&& ( !fConn || ch->desc == NULL )
hit:hit:hit:comm.c:	&& !str_cmp( d->character->name, ch->name ) )
hit:hit:hit:comm.c:		d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
hit:hit:hit:comm.c:		if ( ch->switched_into != NULL )
hit:hit:hit:comm.c:		    do_return( ch->switched_into, "" );
hit:hit:hit:comm.c:    if ( ch->desc != NULL )
hit:hit:hit:comm.c:	free_descriptor( ch->desc );
hit:hit:hit:comm.c:    ch->desc         = d;
hit:hit:hit:comm.c:    ch->timer        = 0;
hit:hit:hit:comm.c:    sprintf( log_buf, "%s@%s reconnected.", ch->name, d->host );
hit:hit:hit:comm.c:    if (IS_SET(ch->act, PLR_AFK)) 
hit:hit:hit:comm.c:	REMOVE_BIT(ch->act, PLR_AFK);
hit:hit:hit:comm.c:    ||   ch->desc == NULL
hit:hit:hit:comm.c:    ||   ch->desc->connected != CON_PLAYING
hit:hit:hit:comm.c:    ||   ch->was_in_room == NULL 
hit:hit:hit:comm.c:    ||   ch->in_room != get_room_index( ROOM_VNUM_LIMBO ) )
hit:hit:hit:comm.c:    ch->timer = 0;
hit:hit:hit:comm.c:    char_to_room( ch, ch->was_in_room, FALSE );
hit:hit:hit:comm.c:    ch->was_in_room	= NULL;
hit:hit:hit:comm.c:    if ( txt == NULL || ch->desc == NULL )
hit:hit:hit:comm.c:    if ( ch->desc->showstr_point )
hit:hit:hit:comm.c:	write_to_buffer( ch->desc, txt, strlen( txt ) );
hit:hit:hit:comm.c:    ch->desc->showstr_head = alloc_mem( strlen( txt ) + 1 );
hit:hit:hit:comm.c:    strcpy( ch->desc->showstr_head, txt );
hit:hit:hit:comm.c:    ch->desc->showstr_point = ch->desc->showstr_head;
hit:hit:hit:comm.c:    show_string( ch->desc, "" );
hit:hit:hit:comm.c:    to = ch->in_room->people;
hit:hit:hit:comm.c:	to = vch->in_room->people;
hit:hit:hit:db.c:  pArea = ch->in_room->area;
hit:hit:hit:db.c:    pArea = ch->in_room->area;
hit:hit:hit:db.c:    ch->in_room->area->vnum_final = vnum;
hit:hit:hit:db.c:    ch->next_fighting		= NULL;
hit:hit:hit:db.c:    ch->name			= &str_empty[0];
hit:hit:hit:db.c:    ch->short_descr		= &str_empty[0];
hit:hit:hit:db.c:    ch->long_descr		= &str_empty[0];
hit:hit:hit:db.c:    ch->dynamic_descr		= NULL;
hit:hit:hit:db.c:    ch->description		= &str_empty[0];
hit:hit:hit:db.c:    ch->prompt			= NULL;
hit:hit:hit:db.c:    ch->predelay_time		= 0;
hit:hit:hit:db.c:    ch->predelay_info		= NULL;
hit:hit:hit:db.c:    ch->position		= POS_STANDING;
hit:hit:hit:db.c:    ch->hit[HIT_LOC_BODY]	= 20;
hit:hit:hit:db.c:    ch->max_hit			= 20;
hit:hit:hit:db.c:    ch->mana			= 100;
hit:hit:hit:db.c:    ch->max_mana		= 100;
hit:hit:hit:db.c:    ch->move			= 100;
hit:hit:hit:db.c:    ch->max_move		= 100;
hit:hit:hit:db.c:    ch->perm_stat_phys_str	= 40;
hit:hit:hit:db.c:    ch->perm_stat_phys_dex	= 40;
hit:hit:hit:db.c:    ch->perm_stat_phys_tou	= 40;
hit:hit:hit:db.c:    ch->perm_stat_phys_qui	= 40;
hit:hit:hit:db.c:    ch->perm_stat_ment_int	= 40;
hit:hit:hit:db.c:    ch->pReset			= NULL;
hit:hit:hit:db.c:    ch->riding			= NULL;
hit:hit:hit:db.c:    ch->switched_into		= NULL;
hit:hit:hit:db.c:    ch->language		= 0;
hit:hit:hit:db.c:    ch->move_speed		= MOVE_WALK;
hit:hit:hit:db.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:db.c:    for ( paf = ch->affected; paf != NULL; paf = paf_next )
hit:hit:hit:db.c:    free_string( ch->name, MEM_MOB_NAME_FREE_CHAR );
hit:hit:hit:db.c:    free_string( ch->namelist, MEM_MOB_NAMELIST_FREE_CHAR );
hit:hit:hit:db.c:    free_string( ch->short_descr, MEM_MOB_SHORT_DESCR_FREE_CHAR );
hit:hit:hit:db.c:    free_string( ch->long_descr, MEM_MOB_LONG_DESCR_FREE_CHAR );
hit:hit:hit:db.c:    free_string( ch->description, MEM_MOB_DESCRIPTION_FREE_CHAR );
hit:hit:hit:db.c:    free_string( ch->spec_fun_name, MEM_MOB_SPEC_FUN_NAME_FREE_CHAR );
hit:hit:hit:db.c:    free_string( ch->prompt, MEM_GENERAL );
hit:hit:hit:db.c:    free_predelay( ch->predelay_info );
hit:hit:hit:db.c:    if ( ch->pcdata != NULL )
hit:hit:hit:db.c:	free_string( ch->pcdata->pwd, MEM_PCDATA );
hit:hit:hit:db.c:	free_string( ch->pcdata->bamfin, MEM_PCDATA );
hit:hit:hit:db.c:	free_string( ch->pcdata->bamfout, MEM_PCDATA );
hit:hit:hit:db.c:	free_string( ch->pcdata->email_address, MEM_PCDATA );
hit:hit:hit:db.c:	free_string( ch->pcdata->rejected, MEM_PCDATA );
hit:hit:hit:db.c:	ch->pcdata->next = pcdata_free;
hit:hit:hit:db.c:	pcdata_free      = ch->pcdata;
hit:hit:hit:db.c:    ch->next	     = char_free;
hit:hit:hit:emote.c:  if ( ach->leader != NULL ) 
hit:hit:hit:emote.c:    ach = ach->leader;
hit:hit:hit:emote.c:  if ( bch->leader != NULL ) 
hit:hit:hit:emote.c:    bch = bch->leader;
hit:hit:hit:emote.c:  for (vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room) {
hit:hit:hit:emote.c:    vch->leader=NULL;
hit:hit:hit:emote.c:	vch->leader=ch;
hit:hit:hit:emote.c:  for (vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room) {              
hit:hit:hit:emote.c:      if (vch->leader==ch) {
hit:hit:hit:emote.c:	  wch->leader = ch;
hit:hit:hit:emote.c:	  wch->leader = ch;
hit:hit:hit:emote.c:	strcat(buf, ((vch == wch) ? "you" : him_her[wch->sex]));
hit:hit:hit:emote.c:          wch->leader = ch;
hit:hit:hit:emote.c:        strcat(buf, ((vch == wch) ? "your" : his_her[wch->sex]));
hit:hit:hit:emote.c:          wch->leader = ch;
hit:hit:hit:emote.c:        strcat(buf, ((vch == wch) ? "you" : he_she[wch->sex]));
hit:hit:hit:emote.orig:  if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_NO_EMOTE) )
hit:hit:hit:emote.orig:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:emote.orig:		      strcat( buf, him_her[wch->sex] );
hit:hit:hit:emote.orig:		      strcat( buf, his_her[wch->sex] );
hit:hit:hit:emote.orig:		      strcat( buf, he_she[wch->sex] );
hit:hit:hit:fight.c:	combat_next = ch->next_fighting;
hit:hit:hit:fight.c:	if ( ( victim = ch->fighting ) == NULL || ch->in_room == NULL )
hit:hit:hit:fight.c:      if ( --ch->strike_rank < 0 )
hit:hit:hit:fight.c:	if ( IS_AWAKE(ch) && ch->in_room == victim->in_room )
hit:hit:hit:fight.c:	ch->strike_rank = calc_strike_rank( ch );
hit:hit:hit:fight.c:	if ( ( victim = ch->fighting ) == NULL )
hit:hit:hit:fight.c:	&& --ch->strike_rank_2 < 0 )
hit:hit:hit:fight.c:	    if ( IS_AWAKE(ch) && ch->in_room == victim->in_room )
hit:hit:hit:fight.c:	    ch->strike_rank_2 = calc_strike_rank( ch ) + 100
hit:hit:hit:fight.c:	    if ( ( victim = ch->fighting ) == NULL )
hit:hit:hit:fight.c:	for ( rch = ch->in_room->people; rch != NULL; rch = rch_next )
hit:hit:hit:fight.c:	    rch_next = rch->next_in_room;
hit:hit:hit:fight.c:	    if ( IS_AWAKE(rch) && rch->fighting == NULL )
hit:hit:hit:fight.c:    if ( victim->position == POS_DEAD || ch->in_room != victim->in_room )
hit:hit:hit:fight.c:    attacker_roll = ch->perm_offense + ch->mod_offense;
hit:hit:hit:fight.c:	if ( dice(1,100) > ch->perm_offense && !number_bits( 5 ) )
hit:hit:hit:fight.c:	    ch->perm_offense++;
hit:hit:hit:fight.c:	dam = dice( ch->damnodice, ch->damsizedice );
hit:hit:hit:fight.c:	    dam = dam + ch->damplus;
hit:hit:hit:fight.c:	    dam += ch->damplus;
hit:hit:hit:fight.c:	    dam += dice( ch->damnodice, ch->damsizedice ) + ch->damplus;
hit:hit:hit:fight.c:    if ( victim->position == POS_DEAD || ch->in_room != victim->in_room )
hit:hit:hit:fight.c:    attacker_roll = ch->perm_offense + ch->mod_offense;
hit:hit:hit:fight.c:	if ( dice(1,100) > ch->pcdata->learned[gsn_dual_wield]
hit:hit:hit:fight.c:	    ch->pcdata->learned[gsn_dual_wield]++;
hit:hit:hit:fight.c:    if ( !IS_NPC(ch) && ch->pcdata->learned[gsn_enhanced_damage] > 0 )
hit:hit:hit:fight.c:	dam += dam * ch->pcdata->learned[gsn_enhanced_damage] / 100;
hit:hit:hit:fight.c:	    REMOVE_BIT( ch->affected_by, AFF_INVISIBLE );
hit:hit:hit:fight.c:	    if ( IS_NPC(ch) && number_percent( ) < ch->level / 2 )
hit:hit:hit:fight.c:	    if ( IS_NPC(ch) && number_percent( ) < ch->level / 2 )
hit:hit:hit:fight.c:		(IS_NPC(ch) ? ch->short_descr : ch->name),
hit:hit:hit:fight.c:  if ( ch->fighting != NULL )
hit:hit:hit:fight.c:    if ( ch->desc != NULL
hit:hit:hit:fight.c:    && ch->desc->original != NULL 
hit:hit:hit:fight.c:    && IS_SET( ch->desc->original->act, PLR_PEACEFUL ) )
hit:hit:hit:fight.c:  else if ( IS_SET( ch->act, PLR_PEACEFUL ) )
hit:hit:hit:fight.c:    if ( ch->fighting != NULL )
hit:hit:hit:fight.c:    ch->fighting = victim;
hit:hit:hit:fight.c:    ch->next_fighting = combat_list;
hit:hit:hit:fight.c:    for ( fch = char_list; fch != NULL; fch = fch->next )
hit:hit:hit:fight.c:	    fch->fighting	= NULL;
hit:hit:hit:fight.c:	if ( fBoth && fch->fighting == ch )
hit:hit:hit:fight.c:    combat_list = ch->next_fighting;
hit:hit:hit:fight.c:    for ( fch = combat_list; fch != NULL; fch = fch->next_fighting )
hit:hit:hit:fight.c:	if ( fch->next_fighting == ch )
hit:hit:hit:fight.c:	    fch->next_fighting = ch->next_fighting;
hit:hit:hit:fight.c:    ch->next_fighting = NULL;
hit:hit:hit:fight.c:	name		= ch->short_descr;
hit:hit:hit:fight.c:    if ( IS_NPC( ch ) && ( pMobIndex = ch->pIndexData ) != NULL )
hit:hit:hit:fight.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:fight.c:    obj_to_room( corpse, ch->in_room, TRUE );
hit:hit:hit:fight.c:    was_in_room = ch->in_room;
hit:hit:hit:fight.c:	    ch->in_room = pexit->to_room;
hit:hit:hit:fight.c:    ch->in_room = was_in_room;
hit:hit:hit:fight.c:    lch = (ch->leader != NULL) ? ch->leader : ch;
hit:hit:hit:fight.c:    for ( gch = ch->in_room->people; gch != NULL; gch = gch->next_in_room )
hit:hit:hit:fight.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:fight.c:		obj_to_room( obj, ch->in_room, TRUE );
hit:hit:hit:fight.c:  if ( IS_AFFECTED(ch, AFF_CHARM) && ch->master == victim )
hit:hit:hit:fight.c:  if ( ch->fighting != NULL )
hit:hit:hit:fight.c:    if ( ch->fighting == victim )
hit:hit:hit:fight.c:    ch->fighting = victim;
hit:hit:hit:fight.c:    if ( arg[0] == '\0' && ch->fighting == NULL )
hit:hit:hit:fight.c:	victim = ch->fighting;
hit:hit:hit:fight.c:	if ( get_skill( ch, gsn_bash ) < ch->perm_stat_phys_str )
hit:hit:hit:fight.c:	ch->position = POS_RESTING;
hit:hit:hit:fight.c:    if ( ch->position < POS_STANDING )
hit:hit:hit:fight.c:    was_in = ch->in_room;
hit:hit:hit:fight.c:	if ( ( now_in = ch->in_room ) == was_in )
hit:hit:hit:fight.c:	ch->in_room = was_in;
hit:hit:hit:fight.c:	ch->in_room = now_in;
hit:hit:hit:fight.c:    if ( ch->fighting == victim )
hit:hit:hit:fight.c:    if ( arg[0] == '\0' && ch->fighting == NULL )
hit:hit:hit:fight.c:	victim = ch->fighting;
hit:hit:hit:fight.c:    if ( ( victim = ch->fighting ) == NULL )
hit:hit:hit:fight.c:	act("$n attempted to disarm you.", ch, ch->fighting, NULL, NULL, NULL, TO_VICT, SENSE_SIGHT );
hit:hit:hit:fight.c:	act("$N maintained their grip on their weapon.", ch, ch->fighting, NULL, NULL, NULL, TO_CHAR, SENSE_SIGHT|SENSE_TOUCH );
hit:hit:hit:fight.c:    if ( !IS_NPC(victim) && victim->level >= ch->level )
hit:hit:hit:fight.c:  if ( ch->in_room == NULL )
hit:hit:hit:fight.c:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:fight.c:    if ( vch->fighting == ch )
hit:hit:hit:fight.c:  if ( i == 0 && ch->fighting != NULL )
hit:hit:hit:fileio.c:            ch->in_room ? ch->in_room->vnum : 0, ch->name, str );
hit:hit:hit:flora.c:  for ( fi = ch->in_room->flora; fi != NULL; fi = fi->next )
hit:hit:hit:flora.c:    write_environment_area( ch->in_room->area );
hit:hit:hit:flora.c:    if ( ch->in_room->flora == NULL )
hit:hit:hit:flora.c:    update_flora( ch->in_room );
hit:hit:hit:flora.c:    for ( fi = ch->in_room->flora; fi != NULL; fi = fi->next )
hit:hit:hit:flora.c:    fi->next = ch->in_room->flora;
hit:hit:hit:flora.c:    ch->in_room->flora = fi;
hit:hit:hit:flora.c:    destroy_flora( fi, ch->in_room );
hit:hit:hit:handler.c:    if ( ch->desc != NULL && ch->desc->original != NULL )
hit:hit:hit:handler.c:	ch = ch->desc->original;
hit:hit:hit:handler.c:    if ( ch->trust != 0 )
hit:hit:hit:handler.c:	return ch->trust;
hit:hit:hit:handler.c:    if ( IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
hit:hit:hit:handler.c:	return ch->level;
hit:hit:hit:handler.c:    year = (long) current_time - (long) ch->pcdata->birth;
hit:hit:hit:handler.c:    return ( ch->pcdata->played + (int) (current_time - ch->pcdata->logon) ) / 3600;
hit:hit:hit:handler.c:    return URANGE( 3, ch->perm_stat_phys_str + ch->mod_stat_phys_str, 200 );
hit:hit:hit:handler.c:    return URANGE( 3, ch->perm_stat_ment_int + ch->mod_stat_ment_int, 200 );
hit:hit:hit:handler.c:    return URANGE( 3, ch->perm_stat_phys_dex + ch->mod_stat_phys_dex, 200 );
hit:hit:hit:handler.c:    return URANGE( 3, ch->perm_stat_phys_qui + ch->mod_stat_phys_qui, 200 );
hit:hit:hit:handler.c:    return URANGE( 3, ch->perm_stat_phys_tou + ch->mod_stat_phys_tou, 200 );
hit:hit:hit:handler.c:	return ch->pcdata->learned[sn];
hit:hit:hit:handler.c:    if ( ch->pIndexData == NULL )
hit:hit:hit:handler.c:    return ch->pIndexData->learned[sn];
hit:hit:hit:handler.c:	return ch->pcdata->power_level[sn];
hit:hit:hit:handler.c:    if ( ch->pIndexData == NULL )
hit:hit:hit:handler.c:    return ch->pIndexData->power_level[sn];
hit:hit:hit:handler.c:    if ( !IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
hit:hit:hit:handler.c:    if ( !IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
hit:hit:hit:handler.c:    delay_new->next	= ch->pcdata->skill_delays;
hit:hit:hit:handler.c:    ch->pcdata->skill_delays	= delay_new;
hit:hit:hit:handler.c:    if ( ch->pcdata->skill_delays == NULL )
hit:hit:hit:handler.c:    if ( delay == ch->pcdata->skill_delays )
hit:hit:hit:handler.c:	ch->pcdata->skill_delays	= delay->next;
hit:hit:hit:handler.c:	for ( prev = ch->pcdata->skill_delays; prev != NULL; prev = prev->next )
hit:hit:hit:handler.c:  for ( delay = ch->pcdata->skill_delays; delay != NULL; delay = delay->next )
hit:hit:hit:handler.c:	SET_BIT( ch->affected_by, paf->bitvector );
hit:hit:hit:handler.c:	REMOVE_BIT( ch->affected_by, paf->bitvector );
hit:hit:hit:handler.c:    case APPLY_STAT_PHYS_STR: ch->mod_stat_phys_str	+= mod;	break;
hit:hit:hit:handler.c:    case APPLY_STAT_PHYS_DEX: ch->mod_stat_phys_dex	+= mod;	break;
hit:hit:hit:handler.c:    case APPLY_STAT_PHYS_TOU: ch->mod_stat_phys_tou	+= mod;	break;
hit:hit:hit:handler.c:    case APPLY_STAT_PHYS_QUI: ch->mod_stat_phys_qui	+= mod;	break;
hit:hit:hit:handler.c:    case APPLY_STAT_MENT_INT: ch->mod_stat_ment_int	+= mod;	break;
hit:hit:hit:handler.c:    case APPLY_SEX:           ch->sex			+= mod;	break;
hit:hit:hit:handler.c:    case APPLY_MANA:          ch->max_mana		+= mod;	break;
hit:hit:hit:handler.c:    case APPLY_HIT:           ch->max_hit		+= mod;	break;
hit:hit:hit:handler.c:    case APPLY_MOVE:          ch->max_move		+= mod;	break;
hit:hit:hit:handler.c:    case APPLY_HITROLL:       ch->hitroll		+= mod;	break;
hit:hit:hit:handler.c:    case APPLY_DAMROLL:       ch->damroll		+= mod;	break;
hit:hit:hit:handler.c:    case APPLY_SAVING_PARA:   ch->saving_throw		+= mod;	break;
hit:hit:hit:handler.c:    case APPLY_SAVING_ROD:    ch->saving_throw		+= mod;	break;
hit:hit:hit:handler.c:    case APPLY_SAVING_PETRI:  ch->saving_throw		+= mod;	break;
hit:hit:hit:handler.c:    case APPLY_SAVING_BREATH: ch->saving_throw		+= mod;	break;
hit:hit:hit:handler.c:    case APPLY_SAVING_SPELL:  ch->saving_throw		+= mod;	break;
hit:hit:hit:handler.c:    case APPLY_ABSORBTION:    ch->general_absorb	+= mod; break;
hit:hit:hit:handler.c:    case APPLY_CHANNELING:    ch->channeling		+= mod; break;
hit:hit:hit:handler.c:    case APPLY_VISION_PROFILE:  ch->vision_min += mod;
hit:hit:hit:handler.c:				ch->vision_max += mod;		break;
hit:hit:hit:handler.c:    case APPLY_VISION_RANGE:	ch->vision_range += mod;	break;
hit:hit:hit:handler.c:	    obj_to_room( wield, ch->in_room, TRUE );
hit:hit:hit:handler.c:    paf_new->next	= ch->affected;
hit:hit:hit:handler.c:    ch->affected	= paf_new;
hit:hit:hit:handler.c:    if ( ch->affected == NULL )
hit:hit:hit:handler.c:    if ( paf == ch->affected )
hit:hit:hit:handler.c:	ch->affected	= paf->next;
hit:hit:hit:handler.c:	for ( prev = ch->affected; prev != NULL; prev = prev->next )
hit:hit:hit:handler.c:    for ( paf = ch->affected; paf != NULL; paf = paf_next )
hit:hit:hit:handler.c:    for ( paf = ch->affected; paf != NULL; paf = paf->next )
hit:hit:hit:handler.c:    for ( paf_old = ch->affected; paf_old != NULL; paf_old = paf_old->next )
hit:hit:hit:handler.c:    if ( (room = ch->in_room) == NULL )
hit:hit:hit:handler.c:	--ch->in_room->area->nplayer;
hit:hit:hit:handler.c:    ch->in_room->light_mod -= ch->light;
hit:hit:hit:handler.c:    if ( ch == ch->in_room->people )
hit:hit:hit:handler.c:	ch->in_room->people = ch->next_in_room;
hit:hit:hit:handler.c:	for ( prev = ch->in_room->people; prev; prev = prev->next_in_room )
hit:hit:hit:handler.c:		prev->next_in_room = ch->next_in_room;
hit:hit:hit:handler.c:    ch->in_room      = NULL;
hit:hit:hit:handler.c:    ch->next_in_room = NULL;
hit:hit:hit:handler.c:    ch->in_room		= pRoomIndex;
hit:hit:hit:handler.c:    ch->next_in_room	= pRoomIndex->people;
hit:hit:hit:handler.c:	++ch->in_room->area->nplayer;
hit:hit:hit:handler.c:    ch->in_room->light_mod += ch->light;
hit:hit:hit:handler.c:    obj->next_content	 = ch->carrying;
hit:hit:hit:handler.c:    ch->carrying	 = obj;
hit:hit:hit:handler.c:    ch->carry_number	+= 1;
hit:hit:hit:handler.c:    ch->carry_weight	+= get_obj_weight( obj );
hit:hit:hit:handler.c:    if ( ch->carrying == obj )
hit:hit:hit:handler.c:	ch->carrying = obj->next_content;
hit:hit:hit:handler.c:	for ( prev = ch->carrying; prev != NULL; prev = prev->next_content )
hit:hit:hit:handler.c:    ch->carry_number	-= 1;
hit:hit:hit:handler.c:    ch->carry_weight	-= get_obj_weight( obj );
hit:hit:hit:handler.c:    return ch->wearing[iWear];
hit:hit:hit:handler.c:    iWear = race_array[ch->race]->hit_loc_location[hit_loc];
hit:hit:hit:handler.c:	obj_to_room( obj, ch->in_room, TRUE );
hit:hit:hit:handler.c:    if ( ch->wearing[iWear] == NULL )
hit:hit:hit:handler.c:	ch->wearing[iWear] = obj;
hit:hit:hit:handler.c:    else if ( ch->wearing[iWear]->size > 50 )
hit:hit:hit:handler.c:	obj->next_worn = ch->wearing[iWear]->next_worn;
hit:hit:hit:handler.c:	ch->wearing[iWear]->next_worn = obj;
hit:hit:hit:handler.c:	obj->next_worn = ch->wearing[iWear];
hit:hit:hit:handler.c:	ch->wearing[iWear] = obj;
hit:hit:hit:handler.c:    &&   ch->in_room != NULL )
hit:hit:hit:handler.c:	ch->in_room->light_mod += obj->value[0];
hit:hit:hit:handler.c:	ch->light += obj->value[0];
hit:hit:hit:handler.c:	ch->in_room->light_mod += GLOW_LIGHT;
hit:hit:hit:handler.c:	ch->light += GLOW_LIGHT;
hit:hit:hit:handler.c:	ch->in_room->light_mod += DARK_LIGHT;
hit:hit:hit:handler.c:	ch->light += DARK_LIGHT;
hit:hit:hit:handler.c:    if ( ch->wearing[wear_loc] == NULL )
hit:hit:hit:handler.c:    else if ( ch->wearing[wear_loc] == obj )
hit:hit:hit:handler.c:	ch->wearing[wear_loc] = obj->next_worn;
hit:hit:hit:handler.c:	for ( o = ch->wearing[wear_loc]; o != NULL; o = o->next_worn )
hit:hit:hit:handler.c:    if ( obj != ch->carrying )
hit:hit:hit:handler.c:	for ( prev = ch->carrying; prev != NULL; prev = prev->next_content )
hit:hit:hit:handler.c:	obj->next_content = ch->carrying;
hit:hit:hit:handler.c:	ch->carrying = obj;
hit:hit:hit:handler.c:    &&   ch->in_room != NULL )
hit:hit:hit:handler.c:	ch->in_room->light_mod -= obj->value[0];
hit:hit:hit:handler.c:	ch->light -= obj->value[0];
hit:hit:hit:handler.c:	ch->in_room->light_mod -= GLOW_LIGHT;
hit:hit:hit:handler.c:	ch->light -= GLOW_LIGHT;
hit:hit:hit:handler.c:	ch->in_room->light_mod -= DARK_LIGHT;
hit:hit:hit:handler.c:	ch->light -= DARK_LIGHT;
hit:hit:hit:handler.c:    if ( ch->wearing[wear_loc] != NULL
hit:hit:hit:handler.c:    || ch->in_room == NULL )
hit:hit:hit:handler.c:	    while( (od = ch->wearing[i]) != NULL )
hit:hit:hit:handler.c:		obj_to_room( od, ch->in_room, TRUE );
hit:hit:hit:handler.c:    for ( ch = char_list; ch != NULL; ch = ch->next )
hit:hit:hit:handler.c:	if ( (p = ch->predelay_info) != NULL )
hit:hit:hit:handler.c:    if ( ch->in_room == NULL )
hit:hit:hit:handler.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:handler.c:	if ( ch->pReset != NULL )
hit:hit:hit:handler.c:	    ch->pReset->target = NULL;
hit:hit:hit:handler.c:    if ( ch->desc != NULL && ch->desc->original != NULL )
hit:hit:hit:handler.c:    for ( wch = char_list; wch != NULL; wch = wch->next )
hit:hit:hit:handler.c:	if ( wch->reply == ch )
hit:hit:hit:handler.c:	    wch->reply = NULL;
hit:hit:hit:handler.c:	if ( (p = wch->predelay_info) != NULL )
hit:hit:hit:handler.c:    while ( ch->hunting != NULL )
hit:hit:hit:handler.c:	remove_hunting( ch, ch->hunting->victim, TRUE );
hit:hit:hit:handler.c:       char_list = ch->next;
hit:hit:hit:handler.c:		prev->next = ch->next;
hit:hit:hit:handler.c:    if ( ch->desc )
hit:hit:hit:handler.c:        ch->desc->character = NULL;
hit:hit:hit:handler.c:    for ( rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:handler.c:	( !is_name( arg, rch->name ) && !is_name( arg, rch->namelist ) ) )
hit:hit:hit:handler.c:    for ( wch = char_list; wch != NULL ; wch = wch->next )
hit:hit:hit:handler.c:	( !is_name( arg, wch->name ) && !is_name( arg, wch->namelist ) ) )
hit:hit:hit:handler.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:hit:hit:handler.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:hit:hit:handler.c:    obj = get_obj_list( ch, argument, ch->in_room->contents );
hit:hit:hit:handler.c:    diff = ch->vision_current - room_light( pRoomIndex );
hit:hit:hit:handler.c:    for ( rch = pRoomIndex->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:handler.c:    if ( (!IS_NPC(ch) && IS_SET(ch->act, PLR_HOLYLIGHT)) 
hit:hit:hit:handler.c:    if ( room_is_dark( ch->in_room, ch ) == VISION_TOO_DARK
hit:hit:hit:handler.c:    || room_is_dark( ch->in_room, ch ) == VISION_TOO_BRIGHT )
hit:hit:hit:handler.c:    if ( room_is_dark( ch->in_room, ch ) == VISION_HAZY )
hit:hit:hit:handler.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_HOLYLIGHT) )
hit:hit:hit:handler.c:    if ( room_is_dark( ch->in_room, ch ) == VISION_TOO_DARK
hit:hit:hit:handler.c:    || room_is_dark( ch->in_room, ch ) == VISION_TOO_BRIGHT )
hit:hit:hit:handler.c:    if ( !IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
hit:hit:hit:handler.c:    if ( IS_NPC( victim ) && ch->pIndexData == victim->pIndexData )
hit:hit:hit:handler.c:    aggr_bits = ch->aggression;
hit:hit:hit:handler.c:	if ( victim->weight > ch->weight )
hit:hit:hit:handler.c:	aggr += ch->weight - victim->weight;
hit:hit:hit:handler.c:	aggr -= (ch->max_hit - ch->hit[HIT_LOC_BODY])*100/ch->max_hit;
hit:hit:hit:handler.c:	aggr -= race_array[ch->race]->relations[victim->race];
hit:hit:hit:handler.c:    if ( ch->predelay_info != NULL )
hit:hit:hit:handler.c:	free_predelay( ch->predelay_info );
hit:hit:hit:handler.c:    ch->predelay_info = p;
hit:hit:hit:handler.c:    ch->predelay_time = delay;
hit:hit:hit:hit:act_comm.c:    if ( !str_cmp( ch->name, pnote->sender ) )
hit:hit:hit:hit:act_comm.c:    if ( is_name( ch->name, pnote->to_list ) )
hit:hit:hit:hit:act_comm.c:    if ( ch->pnote != NULL )
hit:hit:hit:hit:act_comm.c:	pnote	  = alloc_perm( sizeof(*ch->pnote) );
hit:hit:hit:hit:act_comm.c:    pnote->sender	= str_dup( ch->name );
hit:hit:hit:hit:act_comm.c:    ch->pnote		= pnote;
hit:hit:hit:hit:act_comm.c:	REMOVE_BIT(ch->act, PLR_AFK);
hit:hit:hit:hit:act_comm.c:    if (IS_SET(ch->act, PLR_AFK)) {
hit:hit:hit:hit:act_comm.c:       REMOVE_BIT(ch->act, PLR_AFK);
hit:hit:hit:hit:act_comm.c:	SET_BIT(ch->act, PLR_AFK);
hit:hit:hit:hit:act_comm.c:	if ( to_one[0] != '\0' && str_cmp( ch->name, to_one ) )
hit:hit:hit:hit:act_comm.c:    if ( str_cmp( ch->name, pnote->sender ) && to_new[0] != '\0' 
hit:hit:hit:hit:act_comm.c:    if ( ch->pnote == NULL || ch->pnote->text[0] == '\0' )
hit:hit:hit:hit:act_comm.c:    oldb = ch->pnote->text;
hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:act_comm.c:	    free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:act_comm.c:	    ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:act_comm.c:	send_to_char( ch->pnote->text, ch );
hit:hit:hit:hit:act_comm.c:	strcpy( buf, ch->pnote->text );
hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->subject, MEM_GENERAL );
hit:hit:hit:hit:act_comm.c:	ch->pnote->subject = str_dup( argument );
hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->to_list, MEM_GENERAL );
hit:hit:hit:hit:act_comm.c:	ch->pnote->to_list = str_dup( argument );
hit:hit:hit:hit:act_comm.c:	if ( ch->pnote != NULL )
hit:hit:hit:hit:act_comm.c:	    free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:act_comm.c:	    free_string( ch->pnote->subject, MEM_GENERAL );
hit:hit:hit:hit:act_comm.c:	    free_string( ch->pnote->to_list, MEM_GENERAL );
hit:hit:hit:hit:act_comm.c:	    free_string( ch->pnote->date, MEM_GENERAL );
hit:hit:hit:hit:act_comm.c:	    free_string( ch->pnote->sender, MEM_GENERAL );
hit:hit:hit:hit:act_comm.c:	    ch->pnote->next	= note_free;
hit:hit:hit:hit:act_comm.c:	    note_free		= ch->pnote;
hit:hit:hit:hit:act_comm.c:	    ch->pnote		= NULL;
hit:hit:hit:hit:act_comm.c:	if ( ch->pnote == NULL )
hit:hit:hit:hit:act_comm.c:	    ch->pnote->sender,
hit:hit:hit:hit:act_comm.c:	    ch->pnote->subject,
hit:hit:hit:hit:act_comm.c:	    ch->pnote->to_list
hit:hit:hit:hit:act_comm.c:	send_to_char( ch->pnote->text, ch );
hit:hit:hit:hit:act_comm.c:	if ( ch->pnote == NULL )
hit:hit:hit:hit:act_comm.c:	ch->pnote->next			= NULL;
hit:hit:hit:hit:act_comm.c:	ch->pnote->date			= str_dup( strtime );
hit:hit:hit:hit:act_comm.c:	    note_list	= ch->pnote;
hit:hit:hit:hit:act_comm.c:	    pnote->next	= ch->pnote;
hit:hit:hit:hit:act_comm.c:	pnote		= ch->pnote;
hit:hit:hit:hit:act_comm.c:	ch->pnote	= NULL;
hit:hit:hit:hit:act_comm.c:    REMOVE_BIT(ch->deaf, channel);
hit:hit:hit:hit:act_comm.c:	position	= ch->position;
hit:hit:hit:hit:act_comm.c:	ch->position	= POS_STANDING;
hit:hit:hit:hit:act_comm.c:	ch->position	= position;
hit:hit:hit:hit:act_comm.c:	&&  !IS_SET(och->deaf, channel) )
hit:hit:hit:hit:act_comm.c:	    position		= vch->position;
hit:hit:hit:hit:act_comm.c:	    vch->position	= position;
hit:hit:hit:hit:act_comm.c:  gsn = *language_table[ch->language].pgsn;
hit:hit:hit:hit:act_comm.c:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:hit:act_comm.c:    if ( ch->in_room->exit[door] == NULL
hit:hit:hit:hit:act_comm.c:    || ( room = ch->in_room->exit[door]->to_room ) == NULL )
hit:hit:hit:hit:act_comm.c:    for ( vch = room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:hit:act_comm.c:  gsn = *language_table[ch->language].pgsn;
hit:hit:hit:hit:act_comm.c:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:hit:act_comm.c:           sprintf(log_buf, "%s wishes to all \"%s\"",ch->name,argument );
hit:hit:hit:hit:act_comm.c:    || ( IS_NPC(victim) && victim->in_room != ch->in_room ) )
hit:hit:hit:hit:act_comm.c:	 || IS_SET(ch->act, PLR_WIZINVIS))
hit:hit:hit:hit:act_comm.c:        sprintf( log_buf, "%s sends to %s \"%s\"", ch->name, victim->name, argument );
hit:hit:hit:hit:act_comm.c:        sprintf( log_buf, "%s wishes to %s \"%s\"", ch->name, victim->name, argument );
hit:hit:hit:hit:act_comm.c:    if ( ( victim = ch->reply ) == NULL )
hit:hit:hit:hit:act_comm.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_NO_EMOTE) )
hit:hit:hit:hit:act_comm.c:    if ( ch->position  < POS_STUNNED  )
hit:hit:hit:hit:act_comm.c:    if ( ch->in_room && !IS_SET( ch->in_room->room_flags, ROOM_RENT )
hit:hit:hit:hit:act_comm.c:    sprintf( log_buf, "%s has quit.", ch->name );
hit:hit:hit:hit:act_comm.c:  //  d = ch->desc;
hit:hit:hit:hit:act_comm.c:    d = ch->desc;
hit:hit:hit:hit:act_comm.c:    if (!IS_SET(ch->act, PLR_AFK))
hit:hit:hit:hit:act_comm.c:    if ( IS_AFFECTED(ch, AFF_CHARM) && ch->master != NULL )
hit:hit:hit:hit:act_comm.c:	act( "You don't wish to leave your beloved master!", ch, ch->master, NULL, NULL, NULL, TO_CHAR, SENSE_SIXTH );
hit:hit:hit:hit:act_comm.c:	if ( ch->master == NULL )
hit:hit:hit:hit:act_comm.c:    if ( ch->master != NULL )
hit:hit:hit:hit:act_comm.c:    if ( ch->master != NULL )
hit:hit:hit:hit:act_comm.c:    ch->master        = master;
hit:hit:hit:hit:act_comm.c:    ch->leader        = NULL;
hit:hit:hit:hit:act_comm.c:    if ( ch->master == NULL )
hit:hit:hit:hit:act_comm.c:	REMOVE_BIT( ch->affected_by, AFF_CHARM );
hit:hit:hit:hit:act_comm.c:    act( "You stop following $N.", ch, ch->master, NULL, NULL, NULL, TO_CHAR, SENSE_SIXTH );
hit:hit:hit:hit:act_comm.c:    ch->master = NULL;
hit:hit:hit:hit:act_comm.c:    ch->leader = NULL;
hit:hit:hit:hit:act_comm.c:    if ( ch->master != NULL )
hit:hit:hit:hit:act_comm.c:    ch->leader = NULL;
hit:hit:hit:hit:act_comm.c:    for ( fch = char_list; fch != NULL; fch = fch->next )
hit:hit:hit:hit:act_comm.c:	if ( fch->master == ch )
hit:hit:hit:hit:act_comm.c:	if ( fch->leader == ch )
hit:hit:hit:hit:act_comm.c:	    fch->leader = fch;
hit:hit:hit:hit:act_comm.c:    for ( och = ch->in_room->people; och != NULL; och = och_next )
hit:hit:hit:hit:act_comm.c:	och_next = och->next_in_room;
hit:hit:hit:hit:act_comm.c:	&&   och->master == ch
hit:hit:hit:hit:act_comm.c:	leader = (ch->leader != NULL) ? ch->leader : ch;
hit:hit:hit:hit:act_comm.c:	for ( gch = char_list; gch != NULL; gch = gch->next )
hit:hit:hit:hit:act_comm.c:    if ( ch->master != NULL || ( ch->leader != NULL && ch->leader != ch ) )
hit:hit:hit:hit:act_comm.c:    if ( IS_SET( ch->act, PLR_NO_TELL ) )
hit:hit:hit:hit:act_comm.c:    sprintf( buf, "%s tells the group '%s'.\n\r", ch->name, argument );
hit:hit:hit:hit:act_comm.c:    for ( gch = char_list; gch != NULL; gch = gch->next )
hit:hit:hit:hit:act_comm.c:    if ( ach->leader != NULL ) ach = ach->leader;
hit:hit:hit:hit:act_comm.c:    if ( bch->leader != NULL ) bch = bch->leader;
hit:hit:hit:hit:act_info.c:    if ( ch->desc == NULL )
hit:hit:hit:hit:act_info.c:	    if ( IS_NPC(ch) || IS_SET(ch->act, PLR_COMBINE) )
hit:hit:hit:hit:act_info.c:	if ( IS_NPC(ch) || IS_SET(ch->act, PLR_COMBINE) )
hit:hit:hit:hit:act_info.c:	if ( IS_NPC(ch) || IS_SET(ch->act, PLR_COMBINE) )
hit:hit:hit:hit:act_info.c:	      rch != NULL; rch = rch->next_in_room ) {
hit:hit:hit:hit:act_info.c:	    if ( rch->riding == victim ) {
hit:hit:hit:hit:act_info.c:    for ( rch = list; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:act_info.c:	&&   IS_SET(rch->act, PLR_WIZINVIS)
hit:hit:hit:hit:act_info.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_HOLYLIGHT) )
hit:hit:hit:hit:act_info.c:    if ( ch->desc == NULL )
hit:hit:hit:hit:act_info.c:    if ( ch->position < POS_SLEEPING )
hit:hit:hit:hit:act_info.c:    if ( ch->position == POS_SLEEPING )
hit:hit:hit:hit:act_info.c:    &&   !IS_SET(ch->act, PLR_HOLYLIGHT)
hit:hit:hit:hit:act_info.c:    &&   room_is_dark( ch->in_room, ch ) == VISION_TOO_DARK )
hit:hit:hit:hit:act_info.c:	show_char_to_char( ch->in_room->people, ch );
hit:hit:hit:hit:act_info.c:    &&   !IS_SET(ch->act, PLR_HOLYLIGHT)
hit:hit:hit:hit:act_info.c:    &&   room_is_dark( ch->in_room, ch ) == VISION_TOO_BRIGHT )
hit:hit:hit:hit:act_info.c:	show_char_to_char( ch->in_room->people, ch );
hit:hit:hit:hit:act_info.c:	 sprintf(buf2,"[%d] ", ch->in_room->vnum);
hit:hit:hit:hit:act_info.c:     send_to_char( ch->in_room->name, ch );
hit:hit:hit:hit:act_info.c:	  ( !IS_NPC( ch ) && !IS_SET( ch->act, PLR_BRIEF ) ) )
hit:hit:hit:hit:act_info.c:	 send_to_char( ch->in_room->description, ch );
hit:hit:hit:hit:act_info.c:     if ( IS_SET(ch->act, PLR_AUTOWEATHER) && IS_OUTDOORS(ch))
hit:hit:hit:hit:act_info.c:     update_flora( ch->in_room );
hit:hit:hit:hit:act_info.c:     display_flora( ch, ch->in_room->flora, 0 );
hit:hit:hit:hit:act_info.c:     show_list_to_char( ch->in_room->contents, ch, FALSE, FALSE, FALSE );
hit:hit:hit:hit:act_info.c:     show_char_to_char( ch->in_room->people,   ch );
hit:hit:hit:hit:act_info.c:	for ( obj = ch->in_room->contents; obj != NULL; obj = obj->next_content )
hit:hit:hit:hit:act_info.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:hit:hit:hit:act_info.c:    for ( obj = ch->in_room->contents; obj != NULL; obj = obj->next_content )
hit:hit:hit:hit:act_info.c:    pdesc = get_extra_descr( arg1, ch->in_room->extra_descr );
hit:hit:hit:hit:act_info.c:	if ( (pexit = ch->in_room->exit[door]) == NULL )
hit:hit:hit:hit:act_info.c:    if ( ( pexit = ch->in_room->exit[door] ) == NULL )
hit:hit:hit:hit:act_info.c:    dist = URANGE( 1, ch->vision_range, 200 );
hit:hit:hit:hit:act_info.c:    in_room = ch->in_room;
hit:hit:hit:hit:act_info.c:    update_flora( ch->in_room );
hit:hit:hit:hit:act_info.c:    if ( !IS_SET( ch->in_room->sector->flags, SECTOR_OUTDOORS ) )
hit:hit:hit:hit:act_info.c:    soil_condition( ch, get_water_value( ch->in_room ) );
hit:hit:hit:hit:act_info.c:	if ( ( pexit = ch->in_room->exit[door] ) != NULL
hit:hit:hit:hit:act_info.c:       // && IS_SET( ch->act, PLR_HOLYLIGHT ))
hit:hit:hit:hit:act_info.c:	ch->name,
hit:hit:hit:hit:act_info.c:	IS_NPC(ch) ? "" : ch->short_descr );
hit:hit:hit:hit:act_info.c:	(is_vowel(race_array[ch->race]->race_name[0]) ? "an" : "a" ),
hit:hit:hit:hit:act_info.c:	race_array[ch->race]->race_name);
hit:hit:hit:hit:act_info.c:    if ( get_trust( ch ) != ch->level )
hit:hit:hit:hit:act_info.c:	ch->hit[HIT_LOC_BODY],  ch->max_hit,
hit:hit:hit:hit:act_info.c:	ch->mana, ch->max_mana,
hit:hit:hit:hit:act_info.c:	ch->move, ch->max_move );
hit:hit:hit:hit:act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->condition[COND_DRUNK]   > 10 )
hit:hit:hit:hit:act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->condition[COND_THIRST] ==  0 )
hit:hit:hit:hit:act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->condition[COND_FULL]   ==  0 )
hit:hit:hit:hit:act_info.c:    switch ( ch->position )
hit:hit:hit:hit:act_info.c:    switch( ch->move_speed )
hit:hit:hit:hit:act_info.c:      skill_table[*language_table[ch->language].pgsn].name );
hit:hit:hit:hit:act_info.c:   free_string( ch->prompt, MEM_GENERAL );
hit:hit:hit:hit:act_info.c:   ch->prompt = str_dup( buf );
hit:hit:hit:hit:act_info.c:	if ( ( fImmortalOnly  && wch->level < LEVEL_IMMORTAL ) )
hit:hit:hit:hit:act_info.c:/*	switch ( wch->level )
hit:hit:hit:hit:act_info.c:	if ( IS_IMMORTAL( ch ) || wch->level > LEVEL_IMMORTAL )
hit:hit:hit:hit:act_info.c:		     (IS_SET(wch->act, PLR_AFK) ? "[AFK]" : " "),
hit:hit:hit:hit:act_info.c:                     (IS_SET(wch->act, PLR_WIZINVIS) ? "[INVIS]" : " "),
hit:hit:hit:hit:act_info.c:		     wch->name,
hit:hit:hit:hit:act_info.c:		     wch->short_descr);
hit:hit:hit:hit:act_info.c:    show_list_to_char( ch->carrying, ch, TRUE, TRUE, FALSE );
hit:hit:hit:hit:act_info.c:	for ( obj = ch->wearing[iWear]; obj != NULL; obj = obj->next_worn )
hit:hit:hit:hit:act_info.c:	for ( obj2 = ch->carrying; obj2 != NULL; obj2 = obj2->next_content )
hit:hit:hit:hit:act_info.c:	    &&   victim->in_room->area == ch->in_room->area
hit:hit:hit:hit:act_info.c:	    &&   victim->in_room->area == ch->in_room->area
hit:hit:hit:hit:act_info.c:	    if ( ch->description != NULL )
hit:hit:hit:hit:act_info.c:		strcat( buf, ch->description );
hit:hit:hit:hit:act_info.c:	free_string( ch->description, MEM_GENERAL );
hit:hit:hit:hit:act_info.c:	ch->description = str_dup( buf );
hit:hit:hit:hit:act_info.c:    send_to_char( ch->description ? ch->description : "(None).\n\r", ch );
hit:hit:hit:hit:act_info.c:    if ( strcmp( crypt( arg1, ch->pcdata->pwd ), ch->pcdata->pwd ) )
hit:hit:hit:hit:act_info.c:    pwdnew = crypt( arg2, ch->name );
hit:hit:hit:hit:act_info.c:    free_string( ch->pcdata->pwd, MEM_PCDATA );
hit:hit:hit:hit:act_info.c:    ch->pcdata->pwd = str_dup( pwdnew );
hit:hit:hit:hit:act_info.c:	send_to_char( !IS_SET(ch->deaf, CHANNEL_CHAT)
hit:hit:hit:hit:act_info.c:	    send_to_char( !IS_SET(ch->deaf, CHANNEL_IMMTALK)
hit:hit:hit:hit:act_info.c:	    send_to_char( !IS_SET(ch->deaf, CHANNEL_LOG)
hit:hit:hit:hit:act_info.c:	    REMOVE_BIT (ch->deaf, bit);
hit:hit:hit:hit:act_info.c:	    SET_BIT    (ch->deaf, bit);
hit:hit:hit:hit:act_info.c:	if ( IS_SET(ch->act,PLR_BRIEF))
hit:hit:hit:hit:act_info.c:	    REMOVE_BIT(ch->act,PLR_BRIEF);
hit:hit:hit:hit:act_info.c:	    SET_BIT(ch->act,PLR_BRIEF);
hit:hit:hit:hit:act_info.c:	if ( IS_SET(ch->act,PLR_BLANK))
hit:hit:hit:hit:act_info.c:	    REMOVE_BIT(ch->act,PLR_BLANK);
hit:hit:hit:hit:act_info.c:	    SET_BIT(ch->act,PLR_BLANK);
hit:hit:hit:hit:act_info.c:	if ( IS_SET(ch->act,PLR_PEACEFUL))
hit:hit:hit:hit:act_info.c:	    REMOVE_BIT(ch->act,PLR_PEACEFUL);
hit:hit:hit:hit:act_info.c:	    SET_BIT(ch->act,PLR_PEACEFUL);
hit:hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_BLANK)
hit:hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_BRIEF)
hit:hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_COMBINE)
hit:hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_PEACEFUL)
hit:hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_PROMPT)
hit:hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_TELNET_GA)
hit:hit:hit:hit:act_info.c:	send_to_char( !IS_SET(ch->act, PLR_NO_EMOTE)
hit:hit:hit:hit:act_info.c:	send_to_char( !IS_SET(ch->act, PLR_NO_TELL)
hit:hit:hit:hit:act_info.c:	    SET_BIT    (ch->act, bit);
hit:hit:hit:hit:act_info.c:	    REMOVE_BIT (ch->act, bit);
hit:hit:hit:hit:act_info.c:    ch->pcdata->pagelen = i;
hit:hit:hit:hit:act_info.c:  sprintf( buf, "Page Length (pagelen):  %d\n\r", ch->pcdata->pagelen );
hit:hit:hit:hit:act_move.c:  in_room = ch->in_room;
hit:hit:hit:hit:act_move.c:  if ( ch->riding != NULL && ch->riding->in_room != in_room )
hit:hit:hit:hit:act_move.c:    ch->riding = NULL;
hit:hit:hit:hit:act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:act_move.c:       &&   ch->master != NULL
hit:hit:hit:hit:act_move.c:       &&   in_room == ch->master->in_room 
hit:hit:hit:hit:act_move.c:       &&   !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:act_move.c:      &&  !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:act_move.c:      for ( obj = ch->carrying; obj != NULL; obj = obj->next_content) {
hit:hit:hit:hit:act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:act_move.c:  if ( ch->move_speed < 0 || ch->move_speed >= MOVE_MAX )
hit:hit:hit:hit:act_move.c:    ch->move_speed = MOVE_WALK;
hit:hit:hit:hit:act_move.c:  if ( ch->move < move && ch->riding == NULL )
hit:hit:hit:hit:act_move.c:  if ( ch->riding != NULL && ch->riding->move < 2 * move )
hit:hit:hit:hit:act_move.c:  if ( ch->riding == NULL )
hit:hit:hit:hit:act_move.c:    ch->move -= move;
hit:hit:hit:hit:act_move.c:    ch->riding->move -= 2 * move;
hit:hit:hit:hit:act_move.c:  if ( ch->move_speed == MOVE_SNEAK && ch->riding == NULL )
hit:hit:hit:hit:act_move.c:      if ( ch->next_in_room != NULL )
hit:hit:hit:hit:act_move.c:    if ( ch->riding == NULL )
hit:hit:hit:hit:act_move.c:        move_names[ch->move_speed], TO_ROOM, SENSE_SIGHT|SENSE_HEARING );
hit:hit:hit:hit:act_move.c:      act( "$n leaves $t, riding $N.", ch, ch->riding, NULL, dir_name[door],
hit:hit:hit:hit:act_move.c:  if ( ch->riding != NULL )
hit:hit:hit:hit:act_move.c:    char_from_room( ch->riding );
hit:hit:hit:hit:act_move.c:    char_to_room( ch->riding, to_room, TRUE );
hit:hit:hit:hit:act_move.c:    if ( ch->riding == NULL )
hit:hit:hit:hit:act_move.c:        dir_name_2[rev_dir[door]], move_names[ch->move_speed],
hit:hit:hit:hit:act_move.c:      act( "$n has arrived from $t, riding $N.", ch, ch->riding, NULL,
hit:hit:hit:hit:act_move.c:    fch_next = fch->next_in_room;
hit:hit:hit:hit:act_move.c:    if ( fch->master == ch && fch->position == POS_STANDING
hit:hit:hit:hit:act_move.c:  if (!IS_UNSWITCHED_MOB(ch) && IS_SET(ch->act, PLR_HOLYWALK))
hit:hit:hit:hit:act_move.c:  switch( ch->move_speed )
hit:hit:hit:hit:act_move.c:  if (!IS_UNSWITCHED_MOB(ch) && IS_SET(ch->act, PLR_HOLYWALK))
hit:hit:hit:hit:act_move.c:  switch( ch->move_speed )
hit:hit:hit:hit:act_move.c:	    if ( ( pexit = ch->in_room->exit[door] ) != NULL
hit:hit:hit:hit:act_move.c:    if ( ( pexit = ch->in_room->exit[door] ) == NULL )
hit:hit:hit:hit:act_move.c:	    if ( ( pexit = ch->in_room->exit[dir] ) != NULL
hit:hit:hit:hit:act_move.c:    if ( ( pexit = ch->in_room->exit[dir] ) == NULL
hit:hit:hit:hit:act_move.c:	damage( ch, ch, UMIN(dice(1,pain),dice(1,ch->hit[0])), gsn_tumbling, NULL, gn_wear_none );
hit:hit:hit:hit:act_move.c:	pexit = ch->in_room->exit[door];
hit:hit:hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:hit:act_move.c:	    for ( rch = to_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:act_move.c:	pexit = ch->in_room->exit[door];
hit:hit:hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:hit:act_move.c:	    for ( rch = to_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:act_move.c:	pexit	= ch->in_room->exit[door];
hit:hit:hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:hit:act_move.c:	    for ( rch = to_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:act_move.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:hit:hit:hit:act_move.c:	if ( building->value[0] != ch->in_room->vnum )
hit:hit:hit:hit:act_move.c:	pexit	= ch->in_room->exit[door];
hit:hit:hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:hit:act_move.c:	pexit = ch->in_room->exit[door];
hit:hit:hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:hit:act_move.c:  for ( fi = ch->in_room->flora; fi != NULL; fi = fi->next )
hit:hit:hit:hit:act_move.c:    pexit = ch->in_room->exit[door];
hit:hit:hit:hit:act_move.c:    &&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:hit:act_move.c:    switch ( ch->position )
hit:hit:hit:hit:act_move.c:	ch->position = POS_STANDING;
hit:hit:hit:hit:act_move.c:    switch ( ch->position )
hit:hit:hit:hit:act_move.c:	ch->position = POS_RESTING;
hit:hit:hit:hit:act_move.c:	ch->position = POS_RESTING;
hit:hit:hit:hit:act_move.c:    switch ( ch->position )
hit:hit:hit:hit:act_move.c:	ch->position = POS_RESTING;
hit:hit:hit:hit:act_move.c:    if ( ch->riding != NULL )
hit:hit:hit:hit:act_move.c:    for ( rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:act_move.c:	if ( rch->riding == mount )
hit:hit:hit:hit:act_move.c:    if ( rch != NULL && rch->riding == mount )
hit:hit:hit:hit:act_move.c:    ch->riding = mount;
hit:hit:hit:hit:act_move.c:    switch ( ch->position )
hit:hit:hit:hit:act_move.c:	ch->position = POS_SLEEPING;
hit:hit:hit:hit:act_move.c:	if (ch->position != POS_SLEEPING)
hit:hit:hit:hit:act_move.c:	ch->position = POS_RESTING;
hit:hit:hit:hit:act_move.c:  ch->move_speed = MOVE_WALK;
hit:hit:hit:hit:act_move.c:  ch->move_speed = MOVE_RUN;
hit:hit:hit:hit:act_move.c:  ch->move_speed = MOVE_SNEAK;
hit:hit:hit:hit:act_move.c:    if ( ch->riding == NULL )
hit:hit:hit:hit:act_move.c:    act("You stop riding $N.", ch, ch->riding, NULL, NULL, NULL, TO_CHAR, SENSE_SIGHT );
hit:hit:hit:hit:act_move.c:    act("$n stops riding $N.", ch, ch->riding, NULL, NULL, NULL, TO_ROOM, SENSE_SIGHT );
hit:hit:hit:hit:act_move.c:    ch->riding = NULL;
hit:hit:hit:hit:act_move.c:    for ( controls = ch->in_room->contents; controls != NULL; controls = controls->next_content )
hit:hit:hit:hit:act_move.c:        in_room = ch->in_room;
hit:hit:hit:hit:act_move.c:    for ( vch = in_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:hit:act_move.c:    in_room = ch->in_room;
hit:hit:hit:hit:act_move.c:    for ( vch = to_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:hit:act_move.c:    for ( building = ch->in_room->contents; building != NULL; building = building->next_content )
hit:hit:hit:hit:act_move.c:	REMOVE_BIT(ch->affected_by, AFF_HIDE);
hit:hit:hit:hit:act_move.c:	SET_BIT(ch->affected_by, AFF_HIDE);
hit:hit:hit:hit:act_move.c:    if (IS_SET(ch->affected_by, AFF_INVISIBLE) )
hit:hit:hit:hit:act_move.c:        REMOVE_BIT   ( ch->affected_by, AFF_INVISIBLE	);
hit:hit:hit:hit:act_obj.c:    if ( ch->carry_number + 1 > can_carry_n( ch ) )
hit:hit:hit:hit:act_obj.c:    if ( ch->carry_weight + get_obj_weight( obj ) > can_carry_w( ch ) )
hit:hit:hit:hit:act_obj.c:	    obj = get_obj_list( ch, arg1, ch->in_room->contents );
hit:hit:hit:hit:act_obj.c:	    for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
hit:hit:hit:hit:act_obj.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:hit:act_obj.c:	for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
hit:hit:hit:hit:act_obj.c:	obj_to_room( create_money( amount, coin ), ch->in_room, TRUE );
hit:hit:hit:hit:act_obj.c:	obj_to_room( obj, ch->in_room, TRUE );
hit:hit:hit:hit:act_obj.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:hit:act_obj.c:		obj_to_room( obj, ch->in_room, TRUE );
hit:hit:hit:hit:act_obj.c:    if ( !str_cmp( arg, "channel" ) && is_name( arg, ch->in_room->name ) )
hit:hit:hit:hit:act_obj.c:    if ( !str_cmp( arg, "lake" ) && is_name( arg, ch->in_room->name ) )
hit:hit:hit:hit:act_obj.c:    if ( !str_cmp( arg, "river" ) && is_name( arg, ch->in_room->name ) )
hit:hit:hit:hit:act_obj.c:    if ( !str_cmp( arg, "stream" ) && is_name( arg, ch->in_room->name ) )
hit:hit:hit:hit:act_obj.c:    if ( !str_cmp( arg, "waterfall" ) && is_name( arg, ch->in_room->name ) )
hit:hit:hit:hit:act_obj.c:	if ( !IS_SET( ch->in_room->room_flags, ROOM_DRINKABLE_WATER )
hit:hit:hit:hit:act_obj.c:    && IS_SET( ch->in_room->sector->flags, SECTOR_OUTDOORS ) )
hit:hit:hit:hit:act_obj.c:      ch->in_room->water += obj->value[1];
hit:hit:hit:hit:act_obj.c:    && IS_SET( ch->in_room->sector->flags, SECTOR_OUTDOORS ) )
hit:hit:hit:hit:act_obj.c:	for ( obj = ch->in_room->contents; obj; obj = obj->next_content )
hit:hit:hit:hit:act_obj.c:	&& ( !IS_SET( ch->in_room->room_flags, ROOM_DRINKABLE_WATER )
hit:hit:hit:hit:act_obj.c:    && ch->pcdata->condition[COND_DRUNK] > 10
hit:hit:hit:hit:act_obj.c:	ch->pcdata->condition[COND_THIRST] = 48;
hit:hit:hit:hit:act_obj.c:	    ch->pcdata->condition[COND_THIRST] = 48;
hit:hit:hit:hit:act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_DRUNK]  > 10 )
hit:hit:hit:hit:act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_FULL]   > 40 )
hit:hit:hit:hit:act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_THIRST] > 40 )
hit:hit:hit:hit:act_obj.c:	    ch->pcdata->condition[COND_FULL] = UMIN( ch->pcdata->condition[COND_FULL], 48 );
hit:hit:hit:hit:act_obj.c:	    ch->pcdata->condition[COND_THIRST] = UMIN( ch->pcdata->condition[COND_THIRST], 48 );
hit:hit:hit:hit:act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_FULL] > 40 )
hit:hit:hit:hit:act_obj.c:	    condition = ch->pcdata->condition[COND_FULL];
hit:hit:hit:hit:act_obj.c:	    if ( condition == 0 && ch->pcdata->condition[COND_FULL] > 0 )
hit:hit:hit:hit:act_obj.c:	    else if ( ch->pcdata->condition[COND_FULL] > 40 )
hit:hit:hit:hit:act_obj.c:    && ch->wearing[*wear_info[location].dependency] == NULL )
hit:hit:hit:hit:act_obj.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:hit:hit:hit:act_obj.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:hit:act_obj.c:    && ch->wearing[*wear_info[gn_wear_on_belt].dependency] == NULL )
hit:hit:hit:hit:act_obj.c:    for ( obj = ch->wearing[gn_wear_on_belt]; obj != NULL; obj = obj->next_worn )
hit:hit:hit:hit:act_obj.c:	  for ( vch = ch->in_room->people; vch != NULL; vch = vch_next )
hit:hit:hit:hit:act_obj.c:	    vch_next	= vch->next_in_room;
hit:hit:hit:hit:act_obj.c:	if ( ( obj = get_obj_list( ch, arg1, ch->in_room->contents ) ) == NULL )
hit:hit:hit:hit:act_obj.c:/*        if ( IS_SET(ch->act, PLR_HOLYWALK) )
hit:hit:hit:hit:act_obj.c:    && ( objfrom = get_obj_list( ch, arg2, ch->in_room->contents ) ) == NULL )
hit:hit:hit:hit:act_obj.c:/*        if ( IS_SET(ch->act, PLR_HOLYWALK ) )
hit:hit:hit:hit:act_obj.c:/*    if ( IS_SET(ch->act, PLR_HOLYWALK ) )
hit:hit:hit:hit:act_obj.c:    if ( ch->predelay_info == NULL )
hit:hit:hit:hit:act_obj.c:    type =  ch->predelay_info->number;
hit:hit:hit:hit:act_obj.c:    victim = ch->predelay_info->victim1;
hit:hit:hit:hit:act_obj.c:    obj = ch->predelay_info->obj1;
hit:hit:hit:hit:act_obj.c:    objfrom = ch->predelay_info->obj2;
hit:hit:hit:hit:act_obj.c:	|| obj->in_room != ch->in_room )
hit:hit:hit:hit:act_obj.c:	|| objfrom->in_room != ch->in_room )
hit:hit:hit:hit:act_obj.c:      || victim->in_room != ch->in_room
hit:hit:hit:hit:act_obj.c:	sprintf( buf, "%s is a bloody thief!", ch->name );
hit:hit:hit:hit:act_obj.c:    if ( ch->carry_number + 1 > can_carry_n( ch ) )
hit:hit:hit:hit:act_obj.c:    if ( ch->carry_weight + get_obj_weight( obj ) > can_carry_w( ch ) )
hit:hit:hit:hit:act_obj.c:	    obj_to_room( obj, ch->in_room, TRUE );
hit:hit:hit:hit:act_obj.c:	obj_to_room( item, ch->in_room, TRUE );
hit:hit:hit:hit:act_obj.c:	obj_to_room( item, ch->in_room, TRUE );
hit:hit:hit:hit:act_wiz.c:	free_string( ch->pcdata->bamfin, MEM_PCDATA );
hit:hit:hit:hit:act_wiz.c:	ch->pcdata->bamfin = str_dup( argument );
hit:hit:hit:hit:act_wiz.c:    for ( rch = char_list; rch != NULL; rch = rch->next )
hit:hit:hit:hit:act_wiz.c:	if ( !IS_NPC(rch) && !str_cmp( rch->name, name ) )
hit:hit:hit:hit:act_wiz.c:    rch->next = char_list;
hit:hit:hit:hit:act_wiz.c:	free_string( ch->pcdata->bamfout, MEM_PCDATA );
hit:hit:hit:hit:act_wiz.c:	ch->pcdata->bamfout = str_dup( argument );
hit:hit:hit:hit:act_wiz.c:	&&   d->character->in_room == ch->in_room )
hit:hit:hit:hit:act_wiz.c:	location = ch->in_room;
hit:hit:hit:hit:act_wiz.c:	&& !can_build( ( ch->desc->original != NULL ?
hit:hit:hit:hit:act_wiz.c:	                 ch->desc->original : ch), victim->pIndexData->area ) )
hit:hit:hit:hit:act_wiz.c:    original = ch->in_room;
hit:hit:hit:hit:act_wiz.c:    for ( wch = char_list; wch != NULL; wch = wch->next )
hit:hit:hit:hit:act_wiz.c:    if ( !IS_SET(ch->act, PLR_WIZINVIS) )
hit:hit:hit:hit:act_wiz.c:	    (ch->pcdata != NULL && ch->pcdata->bamfout[0] != '\0')
hit:hit:hit:hit:act_wiz.c:	    ? ch->pcdata->bamfout : "leaves in a swirling mist",
hit:hit:hit:hit:act_wiz.c:    if ( !IS_SET(ch->act, PLR_WIZINVIS) )
hit:hit:hit:hit:act_wiz.c:	    (ch->pcdata != NULL && ch->pcdata->bamfin[0] != '\0')
hit:hit:hit:hit:act_wiz.c:	    ? ch->pcdata->bamfin : "appears in a swirling mist",
hit:hit:hit:hit:act_wiz.c:    location = ( arg[0] == '\0' ) ? ch->in_room : find_location( ch, arg );
hit:hit:hit:hit:act_wiz.c:    if ( ch->in_room != location && room_is_private( location )
hit:hit:hit:hit:act_wiz.c:    for ( rch = location->people; rch; rch = rch->next_in_room )
hit:hit:hit:hit:act_wiz.c:	one_argument( rch->name, buf );
hit:hit:hit:hit:act_wiz.c:    sprintf( buf, "Reboot by %s.", ch->name );
hit:hit:hit:hit:act_wiz.c:        sprintf( buf, "Reboot for code by %s.", ch->name );
hit:hit:hit:hit:act_wiz.c:    sprintf( buf, "Shutdown by %s.", ch->name );
hit:hit:hit:hit:act_wiz.c:	    if ( d->snoop_by == ch->desc )
hit:hit:hit:hit:act_wiz.c:    if ( ch->desc != NULL )
hit:hit:hit:hit:act_wiz.c:	for ( d = ch->desc->snoop_by; d != NULL; d = d->snoop_by )
hit:hit:hit:hit:act_wiz.c:    victim->desc->snoop_by = ch->desc;
hit:hit:hit:hit:act_wiz.c:    if ( ch->desc == NULL )
hit:hit:hit:hit:act_wiz.c:    if ( ch->desc->original != NULL )
hit:hit:hit:hit:act_wiz.c:    ch->desc->character = victim;
hit:hit:hit:hit:act_wiz.c:    ch->desc->original  = ch;
hit:hit:hit:hit:act_wiz.c:    victim->desc        = ch->desc;
hit:hit:hit:hit:act_wiz.c:    ch->desc            = NULL;
hit:hit:hit:hit:act_wiz.c:    ch->switched_into	= victim;
hit:hit:hit:hit:act_wiz.c:    if ( ch->desc == NULL )
hit:hit:hit:hit:act_wiz.c:    if ( ch->desc->original == NULL )
hit:hit:hit:hit:act_wiz.c:    ch->desc->character       = ch->desc->original;
hit:hit:hit:hit:act_wiz.c:    ch->desc->original        = NULL;
hit:hit:hit:hit:act_wiz.c:    ch->desc->character->desc = ch->desc; 
hit:hit:hit:hit:act_wiz.c:    ch->desc                  = NULL;
hit:hit:hit:hit:act_wiz.c:    ch->switched_into	      = NULL;
hit:hit:hit:hit:act_wiz.c:    char_to_room( victim, ch->in_room, TRUE );
hit:hit:hit:hit:act_wiz.c:	obj_to_room( obj, ch->in_room, TRUE );
hit:hit:hit:hit:act_wiz.c:	for ( victim = ch->in_room->people; victim != NULL; victim = vnext )
hit:hit:hit:hit:act_wiz.c:	for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
hit:hit:hit:hit:act_wiz.c:    for ( rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:act_wiz.c:        sprintf( log_buf, "Log: %s changed %s's password.",ch->name,victim->name );
hit:hit:hit:hit:act_wiz.c:        sprintf( log_buf, "%s changed %s's password.",ch->name,victim->name );
hit:hit:hit:hit:act_wiz.c:    sprintf( log_buf, "%s: %s %s %s",ch->name,arg1,arg2,arg3 );
hit:hit:hit:hit:act_wiz.c:    if ( !can_build( ch, ch->in_room->area ) )
hit:hit:hit:hit:act_wiz.c:    location = ch->in_room;
hit:hit:hit:hit:act_wiz.c:      s = sector_lookup( arg3, ch->in_room->area );
hit:hit:hit:hit:act_wiz.c:	    vch_next = vch->next;
hit:hit:hit:hit:act_wiz.c:		if (IS_SET(vch->act, PLR_AFK)) {
hit:hit:hit:hit:act_wiz.c:		    REMOVE_BIT(vch->act, PLR_AFK);
hit:hit:hit:hit:act_wiz.c:		if (was_afk) SET_BIT(vch->act, PLR_AFK);
hit:hit:hit:hit:act_wiz.c:    if ( IS_SET(ch->act, PLR_WIZINVIS) )
hit:hit:hit:hit:act_wiz.c:	REMOVE_BIT(ch->act, PLR_WIZINVIS);
hit:hit:hit:hit:act_wiz.c:	SET_BIT(ch->act, PLR_WIZINVIS);
hit:hit:hit:hit:act_wiz.c:    if (IS_SET(ch->act, PLR_HOLYLIGHT)) {
hit:hit:hit:hit:act_wiz.c:        REMOVE_BIT(ch->act, PLR_HOLYLIGHT);
hit:hit:hit:hit:act_wiz.c:        SET_BIT(ch->act, PLR_HOLYLIGHT);
hit:hit:hit:hit:act_wiz.c:	REMOVE_BIT(ch->act, PLR_HOLYSPEECH);
hit:hit:hit:hit:act_wiz.c:	SET_BIT(ch->act, PLR_HOLYSPEECH);
hit:hit:hit:hit:act_wiz.c:    if (IS_SET(ch->act, PLR_HOLYNAME)) {
hit:hit:hit:hit:act_wiz.c:        REMOVE_BIT(ch->act, PLR_HOLYNAME);
hit:hit:hit:hit:act_wiz.c:        SET_BIT(ch->act, PLR_HOLYNAME);
hit:hit:hit:hit:act_wiz.c:    if (IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:act_wiz.c:        REMOVE_BIT(ch->act, PLR_HOLYWALK);
hit:hit:hit:hit:act_wiz.c:        SET_BIT(ch->act, PLR_HOLYWALK);
hit:hit:hit:hit:act_wiz.c:    if (IS_SET(ch->act, PLR_HOLYVNUM)) {
hit:hit:hit:hit:act_wiz.c:        REMOVE_BIT(ch->act, PLR_HOLYVNUM);
hit:hit:hit:hit:act_wiz.c:        SET_BIT(ch->act, PLR_HOLYVNUM);
hit:hit:hit:hit:act_wiz.c:	    IS_SET(ch->act, PLR_HOLYLIGHT) ? "ON" : "OFF");
hit:hit:hit:hit:act_wiz.c:	    IS_SET(ch->act, PLR_HOLYNAME) ? "ON" : "OFF");
hit:hit:hit:hit:act_wiz.c:	    IS_SET(ch->act, PLR_HOLYWALK) ? "ON" : "OFF");
hit:hit:hit:hit:act_wiz.c:	    IS_SET(ch->act, PLR_HOLYVNUM) ? "ON" : "OFF");
hit:hit:hit:hit:change.c:  if ( ch->dynamic_descr )
hit:hit:hit:hit:change.c:    free_string( ch->dynamic_descr, MEM_GENERAL );
hit:hit:hit:hit:change.c:  ch->dynamic_descr = NULL;
hit:hit:hit:hit:change.c:        ch->dynamic_descr = str_dup( c );
hit:hit:hit:hit:change.c:        send_to_char( ch->dynamic_descr, ch );
hit:hit:hit:hit:change.c:      ch->language = i; 
hit:hit:hit:hit:character:act_wiz.c:	&&   d->character->in_room == ch->in_room )
hit:hit:hit:hit:character:act_wiz.c:	    if ( d->snoop_by == ch->desc )
hit:hit:hit:hit:character:act_wiz.c:	for ( d = ch->desc->snoop_by; d != NULL; d = d->snoop_by )
hit:hit:hit:hit:character:comm.c:	sprintf( log_buf, "%s@%s has connected.", ch->name, d->host );
hit:hit:hit:hit:character:comm.c:	sprintf( log_buf, "%s@%s has entered the game.", ch->name, d->host );
hit:hit:hit:hit:character:comm.c:	  ch->name, d->host );
hit:hit:hit:hit:character:comm.c:	&& !str_cmp( d->character->name, ch->name ) )
hit:hit:hit:hit:character:comm.c:		d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
hit:hit:hit:hit:character:comm.c:    sprintf( log_buf, "%s@%s reconnected.", ch->name, d->host );
hit:hit:hit:hit:character:handler.c:    for ( paf_old = ch->affected; paf_old != NULL; paf_old = paf_old->next )
hit:hit:hit:hit:character:olc.c:	for ( ed = ch->in_room->extra_descr; ed != NULL; ed = ed->next )
hit:hit:hit:hit:character:olc.c:	ed->description = str_dup_tab( ch->pnote->text, TRUE );
hit:hit:hit:hit:character:olc.c:	for ( ed = ch->in_room->extra_descr; ed != NULL; ed = ed->next )
hit:hit:hit:hit:character:olc.c:	ch->pnote->text = str_dup_tab( ed->description, FALSE );
hit:hit:hit:hit:character:olc.c:		pAppend->next = ch->in_room->area->reset_first;
hit:hit:hit:hit:character:olc.c:    for ( ed = ch->in_room->extra_descr; ed != NULL; ed = ed->next )
hit:hit:hit:hit:character:olc.c:	ed->next = ch->in_room->extra_descr;
hit:hit:hit:hit:character:olc.c:	    ch->in_room->extra_descr = ed->next;
hit:hit:hit:hit:comm.c:	sprintf( log_buf, "Closing link to %s.", ch->name );
hit:hit:hit:hit:comm.c:	    ch->desc = NULL;
hit:hit:hit:hit:comm.c:	if ( IS_SET(ch->act, PLR_BLANK) )
hit:hit:hit:hit:comm.c:	if ( IS_SET(ch->act, PLR_TELNET_GA) )
hit:hit:hit:hit:comm.c:   if( ch->prompt == NULL )
hit:hit:hit:hit:comm.c:   else if ( ch->prompt[0] == '\0' )
hit:hit:hit:hit:comm.c:            sprintf( buf2, "%d", ch->hit[HIT_LOC_BODY] );
hit:hit:hit:hit:comm.c:            sprintf( buf2, "%d", ch->max_hit );
hit:hit:hit:hit:comm.c:            if ( IS_IMMORTAL(ch) && IS_SET(ch->act, PLR_WIZINVIS) )
hit:hit:hit:hit:comm.c:            sprintf( buf2, "%d", ch->mana );
hit:hit:hit:hit:comm.c:            sprintf( buf2, "%d", ch->max_mana );
hit:hit:hit:hit:comm.c:            sprintf( buf2, "%d", ch->move );
hit:hit:hit:hit:comm.c:            sprintf( buf2, "%d", ch->max_move );
hit:hit:hit:hit:comm.c:            if( ch->in_room != NULL )
hit:hit:hit:hit:comm.c:		((!IS_NPC(ch) && IS_SET(ch->act,PLR_HOLYLIGHT)) ||
hit:hit:hit:hit:comm.c:		 (!IS_AFFECTED(ch,AFF_BLIND) && !room_is_dark( ch->in_room, ch ) != VISION_NORMAL))
hit:hit:hit:hit:comm.c:		? ch->in_room->name : "darkness");
hit:hit:hit:hit:comm.c:            if( ch->in_room != NULL )
hit:hit:hit:hit:comm.c:               sprintf( buf2, "%s", ch->in_room->name );
hit:hit:hit:hit:comm.c:            if( IS_IMMORTAL( ch ) && ch->in_room != NULL )
hit:hit:hit:hit:comm.c:               sprintf( buf2, "%d", ch->in_room->vnum );
hit:hit:hit:hit:comm.c:            if( IS_IMMORTAL( ch ) && ch->in_room != NULL )
hit:hit:hit:hit:comm.c:               sprintf( buf2, "%s", ch->in_room->area->name );
hit:hit:hit:hit:comm.c:   write_to_buffer( ch->desc, buf, point - buf );
hit:hit:hit:hit:comm.c:	if ( strcmp( crypt( argument, ch->pcdata->pwd ), ch->pcdata->pwd ) )
hit:hit:hit:hit:comm.c:	if ( check_reconnect( d, ch->name, TRUE ) )
hit:hit:hit:hit:comm.c:	if ( IS_SET( ch->act, PLR_REJECTED ) )
hit:hit:hit:hit:comm.c:		ch->pcdata->rejected );
hit:hit:hit:hit:comm.c:		REJECTED_DIR, capitalize( ch->name ) );
hit:hit:hit:hit:comm.c:	if (IS_SET(ch->act, PLR_AFK))
hit:hit:hit:hit:comm.c:	    REMOVE_BIT(ch->act, PLR_AFK);
hit:hit:hit:hit:comm.c:	sprintf( log_buf, "%s@%s has connected.", ch->name, d->host );
hit:hit:hit:hit:comm.c:	sprintf( buf, "\n\rWelcome back, %s.\n\r", ch->name );
hit:hit:hit:hit:comm.c:	if ( IS_SET( ch->act, PLR_UNAPPROVED ) )
hit:hit:hit:hit:comm.c:	ch->next	= char_list;
hit:hit:hit:hit:comm.c:	if ( ch->level == 0 )
hit:hit:hit:hit:comm.c:	    ch->perm_stat_phys_str
hit:hit:hit:hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_phys_str_mod;
hit:hit:hit:hit:comm.c:	    ch->perm_stat_phys_dex
hit:hit:hit:hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_phys_dex_mod;
hit:hit:hit:hit:comm.c:	    ch->perm_stat_phys_tou
hit:hit:hit:hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_phys_tou_mod;
hit:hit:hit:hit:comm.c:	    ch->perm_stat_phys_qui
hit:hit:hit:hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_phys_qui_mod;
hit:hit:hit:hit:comm.c:	    ch->perm_stat_ment_int
hit:hit:hit:hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_ment_int_mod;
hit:hit:hit:hit:comm.c:	    ch->perm_offense = 10;
hit:hit:hit:hit:comm.c:	    ch->level	= 1;
hit:hit:hit:hit:comm.c:	    ch->max_hit = race_array[ch->race]->hits_base
hit:hit:hit:hit:comm.c:    + dice( race_array[ch->race]->hitnodice, race_array[ch->race]->hitsizedice );
hit:hit:hit:hit:comm.c:	    ch->hit[HIT_LOC_BODY]	= ch->max_hit;
hit:hit:hit:hit:comm.c:	    ch->max_mana = race_array[ch->race]->mana;
hit:hit:hit:hit:comm.c:	    ch->mana	= ch->max_mana;
hit:hit:hit:hit:comm.c:	    ch->max_move = race_array[ch->race]->move;
hit:hit:hit:hit:comm.c:	    ch->move	= ch->max_move;
hit:hit:hit:hit:comm.c:	    ch->vision_min = race_array[ch->race]->vision_min;
hit:hit:hit:hit:comm.c:	    ch->vision_max = race_array[ch->race]->vision_max;
hit:hit:hit:hit:comm.c:	    ch->vision_range = race_array[ch->race]->vision_range;
hit:hit:hit:hit:comm.c:	    ch->prompt = NULL;
hit:hit:hit:hit:comm.c:	    ch->height = race_array[ch->race]->height_base
hit:hit:hit:hit:comm.c:                         + dice( race_array[ch->race]->heightnodice,
hit:hit:hit:hit:comm.c:                                 race_array[ch->race]->heightsizedice );
hit:hit:hit:hit:comm.c:	    ch->weight = race_array[ch->race]->weight_base
hit:hit:hit:hit:comm.c:                         + dice( race_array[ch->race]->weightnodice,
hit:hit:hit:hit:comm.c:                                 race_array[ch->race]->weightsizedice );
hit:hit:hit:hit:comm.c:            ch->pcdata->learned[gsn_common] = 100;
hit:hit:hit:hit:comm.c:	else if ( ch->in_room != NULL )
hit:hit:hit:hit:comm.c:	    char_to_room( ch, ch->in_room, FALSE );
hit:hit:hit:hit:comm.c:	sprintf( log_buf, "%s@%s has entered the game.", ch->name, d->host );
hit:hit:hit:hit:comm.c:	if ( IS_SET(ch->act, PLR_DENY) )
hit:hit:hit:hit:comm.c:        if (IS_SET(ch->act, PLR_DEAD) )
hit:hit:hit:hit:comm.c:	pwdnew = crypt( argument, ch->name );
hit:hit:hit:hit:comm.c:	free_string( ch->pcdata->pwd, MEM_PCDATA );
hit:hit:hit:hit:comm.c:	ch->pcdata->pwd	= str_dup( pwdnew );
hit:hit:hit:hit:comm.c:	if ( strcmp( crypt( argument, ch->pcdata->pwd ), ch->pcdata->pwd ) )
hit:hit:hit:hit:comm.c:	case 'm': case 'M': ch->sex = SEX_MALE;    break;
hit:hit:hit:hit:comm.c:	case 'f': case 'F': ch->sex = SEX_FEMALE;  break;
hit:hit:hit:hit:comm.c:		ch->race = iRace;
hit:hit:hit:hit:comm.c:	    if ( race_array[ch->race]->classes[iClass] == TRUE )
hit:hit:hit:hit:comm.c:		ch->class = iClass;
hit:hit:hit:hit:comm.c:	if ( iClass == MAX_CLASS || race_array[ch->race]->classes[iClass] == FALSE )
hit:hit:hit:hit:comm.c:	ch->long_descr = str_dup( argument );
hit:hit:hit:hit:comm.c:	ch->short_descr = str_dup( argument );
hit:hit:hit:hit:comm.c:	ch->namelist = str_dup( argument );
hit:hit:hit:hit:comm.c:	    strcpy( buf, ch->description );
hit:hit:hit:hit:comm.c:	    free_string( ch->description, MEM_PCDATA );
hit:hit:hit:hit:comm.c:	    ch->description = str_dup( buf );
hit:hit:hit:hit:comm.c:	ch->pcdata->email_address = str_dup( argument );
hit:hit:hit:hit:comm.c:	ch->pcdata->rejected = str_dup( "" );
hit:hit:hit:hit:comm.c:	SET_BIT( ch->act, PLR_UNAPPROVED );
hit:hit:hit:hit:comm.c:        SET_BIT( ch->act, PLR_HOLYLIGHT );
hit:hit:hit:hit:comm.c:	  ch->name, d->host );
hit:hit:hit:hit:comm.c:    for ( ch = char_list; ch != NULL; ch = ch->next )
hit:hit:hit:hit:comm.c:	&& ( ch->name && !str_cmp( ch->name, name ) )
hit:hit:hit:hit:comm.c:	&& IS_SET( ch->act, PLR_REVIEWING ) )
hit:hit:hit:hit:comm.c:    for ( ch = char_list; ch != NULL; ch = ch->next )
hit:hit:hit:hit:comm.c:	&& ( !fConn || ch->desc == NULL )
hit:hit:hit:hit:comm.c:	&& !str_cmp( d->character->name, ch->name ) )
hit:hit:hit:hit:comm.c:		d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
hit:hit:hit:hit:comm.c:		if ( ch->switched_into != NULL )
hit:hit:hit:hit:comm.c:		    do_return( ch->switched_into, "" );
hit:hit:hit:hit:comm.c:    if ( ch->desc != NULL )
hit:hit:hit:hit:comm.c:	free_descriptor( ch->desc );
hit:hit:hit:hit:comm.c:    ch->desc         = d;
hit:hit:hit:hit:comm.c:    ch->timer        = 0;
hit:hit:hit:hit:comm.c:    sprintf( log_buf, "%s@%s reconnected.", ch->name, d->host );
hit:hit:hit:hit:comm.c:    if (IS_SET(ch->act, PLR_AFK)) 
hit:hit:hit:hit:comm.c:	REMOVE_BIT(ch->act, PLR_AFK);
hit:hit:hit:hit:comm.c:    ||   ch->desc == NULL
hit:hit:hit:hit:comm.c:    ||   ch->desc->connected != CON_PLAYING
hit:hit:hit:hit:comm.c:    ||   ch->was_in_room == NULL 
hit:hit:hit:hit:comm.c:    ||   ch->in_room != get_room_index( ROOM_VNUM_LIMBO ) )
hit:hit:hit:hit:comm.c:    ch->timer = 0;
hit:hit:hit:hit:comm.c:    char_to_room( ch, ch->was_in_room, FALSE );
hit:hit:hit:hit:comm.c:    ch->was_in_room	= NULL;
hit:hit:hit:hit:comm.c:    if ( txt == NULL || ch->desc == NULL )
hit:hit:hit:hit:comm.c:    if ( ch->desc->showstr_point )
hit:hit:hit:hit:comm.c:	write_to_buffer( ch->desc, txt, strlen( txt ) );
hit:hit:hit:hit:comm.c:    ch->desc->showstr_head = alloc_mem( strlen( txt ) + 1 );
hit:hit:hit:hit:comm.c:    strcpy( ch->desc->showstr_head, txt );
hit:hit:hit:hit:comm.c:    ch->desc->showstr_point = ch->desc->showstr_head;
hit:hit:hit:hit:comm.c:    show_string( ch->desc, "" );
hit:hit:hit:hit:comm.c:    to = ch->in_room->people;
hit:hit:hit:hit:comm.c:	to = vch->in_room->people;
hit:hit:hit:hit:db.c:  pArea = ch->in_room->area;
hit:hit:hit:hit:db.c:    pArea = ch->in_room->area;
hit:hit:hit:hit:db.c:    ch->in_room->area->vnum_final = vnum;
hit:hit:hit:hit:db.c:    ch->next_fighting		= NULL;
hit:hit:hit:hit:db.c:    ch->name			= &str_empty[0];
hit:hit:hit:hit:db.c:    ch->short_descr		= &str_empty[0];
hit:hit:hit:hit:db.c:    ch->long_descr		= &str_empty[0];
hit:hit:hit:hit:db.c:    ch->dynamic_descr		= NULL;
hit:hit:hit:hit:db.c:    ch->description		= &str_empty[0];
hit:hit:hit:hit:db.c:    ch->prompt			= NULL;
hit:hit:hit:hit:db.c:    ch->predelay_time		= 0;
hit:hit:hit:hit:db.c:    ch->predelay_info		= NULL;
hit:hit:hit:hit:db.c:    ch->position		= POS_STANDING;
hit:hit:hit:hit:db.c:    ch->hit[HIT_LOC_BODY]	= 20;
hit:hit:hit:hit:db.c:    ch->max_hit			= 20;
hit:hit:hit:hit:db.c:    ch->mana			= 100;
hit:hit:hit:hit:db.c:    ch->max_mana		= 100;
hit:hit:hit:hit:db.c:    ch->move			= 100;
hit:hit:hit:hit:db.c:    ch->max_move		= 100;
hit:hit:hit:hit:db.c:    ch->perm_stat_phys_str	= 40;
hit:hit:hit:hit:db.c:    ch->perm_stat_phys_dex	= 40;
hit:hit:hit:hit:db.c:    ch->perm_stat_phys_tou	= 40;
hit:hit:hit:hit:db.c:    ch->perm_stat_phys_qui	= 40;
hit:hit:hit:hit:db.c:    ch->perm_stat_ment_int	= 40;
hit:hit:hit:hit:db.c:    ch->pReset			= NULL;
hit:hit:hit:hit:db.c:    ch->riding			= NULL;
hit:hit:hit:hit:db.c:    ch->switched_into		= NULL;
hit:hit:hit:hit:db.c:    ch->language		= 0;
hit:hit:hit:hit:db.c:    ch->move_speed		= MOVE_WALK;
hit:hit:hit:hit:db.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:hit:db.c:    for ( paf = ch->affected; paf != NULL; paf = paf_next )
hit:hit:hit:hit:db.c:    free_string( ch->name, MEM_MOB_NAME_FREE_CHAR );
hit:hit:hit:hit:db.c:    free_string( ch->namelist, MEM_MOB_NAMELIST_FREE_CHAR );
hit:hit:hit:hit:db.c:    free_string( ch->short_descr, MEM_MOB_SHORT_DESCR_FREE_CHAR );
hit:hit:hit:hit:db.c:    free_string( ch->long_descr, MEM_MOB_LONG_DESCR_FREE_CHAR );
hit:hit:hit:hit:db.c:    free_string( ch->description, MEM_MOB_DESCRIPTION_FREE_CHAR );
hit:hit:hit:hit:db.c:    free_string( ch->spec_fun_name, MEM_MOB_SPEC_FUN_NAME_FREE_CHAR );
hit:hit:hit:hit:db.c:    free_string( ch->prompt, MEM_GENERAL );
hit:hit:hit:hit:db.c:    free_predelay( ch->predelay_info );
hit:hit:hit:hit:db.c:    if ( ch->pcdata != NULL )
hit:hit:hit:hit:db.c:	free_string( ch->pcdata->pwd, MEM_PCDATA );
hit:hit:hit:hit:db.c:	free_string( ch->pcdata->bamfin, MEM_PCDATA );
hit:hit:hit:hit:db.c:	free_string( ch->pcdata->bamfout, MEM_PCDATA );
hit:hit:hit:hit:db.c:	free_string( ch->pcdata->email_address, MEM_PCDATA );
hit:hit:hit:hit:db.c:	free_string( ch->pcdata->rejected, MEM_PCDATA );
hit:hit:hit:hit:db.c:	ch->pcdata->next = pcdata_free;
hit:hit:hit:hit:db.c:	pcdata_free      = ch->pcdata;
hit:hit:hit:hit:db.c:    ch->next	     = char_free;
hit:hit:hit:hit:emote.c:  if ( ach->leader != NULL ) 
hit:hit:hit:hit:emote.c:    ach = ach->leader;
hit:hit:hit:hit:emote.c:  if ( bch->leader != NULL ) 
hit:hit:hit:hit:emote.c:    bch = bch->leader;
hit:hit:hit:hit:emote.c:  for (vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room) {
hit:hit:hit:hit:emote.c:    vch->leader=NULL;
hit:hit:hit:hit:emote.c:	vch->leader=ch;
hit:hit:hit:hit:emote.c:  for (vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room) {              
hit:hit:hit:hit:emote.c:      if (vch->leader==ch) {
hit:hit:hit:hit:emote.c:	  wch->leader = ch;
hit:hit:hit:hit:emote.c:	  wch->leader = ch;
hit:hit:hit:hit:emote.c:	strcat(buf, ((vch == wch) ? "you" : him_her[wch->sex]));
hit:hit:hit:hit:emote.c:          wch->leader = ch;
hit:hit:hit:hit:emote.c:        strcat(buf, ((vch == wch) ? "your" : his_her[wch->sex]));
hit:hit:hit:hit:emote.c:          wch->leader = ch;
hit:hit:hit:hit:emote.c:        strcat(buf, ((vch == wch) ? "you" : he_she[wch->sex]));
hit:hit:hit:hit:emote.orig:  if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_NO_EMOTE) )
hit:hit:hit:hit:emote.orig:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:hit:emote.orig:		      strcat( buf, him_her[wch->sex] );
hit:hit:hit:hit:emote.orig:		      strcat( buf, his_her[wch->sex] );
hit:hit:hit:hit:emote.orig:		      strcat( buf, he_she[wch->sex] );
hit:hit:hit:hit:fight.c:	combat_next = ch->next_fighting;
hit:hit:hit:hit:fight.c:	if ( ( victim = ch->fighting ) == NULL || ch->in_room == NULL )
hit:hit:hit:hit:fight.c:      if ( --ch->strike_rank < 0 )
hit:hit:hit:hit:fight.c:	if ( IS_AWAKE(ch) && ch->in_room == victim->in_room )
hit:hit:hit:hit:fight.c:	ch->strike_rank = calc_strike_rank( ch );
hit:hit:hit:hit:fight.c:	if ( ( victim = ch->fighting ) == NULL )
hit:hit:hit:hit:fight.c:	&& --ch->strike_rank_2 < 0 )
hit:hit:hit:hit:fight.c:	    if ( IS_AWAKE(ch) && ch->in_room == victim->in_room )
hit:hit:hit:hit:fight.c:	    ch->strike_rank_2 = calc_strike_rank( ch ) + 100
hit:hit:hit:hit:fight.c:	    if ( ( victim = ch->fighting ) == NULL )
hit:hit:hit:hit:fight.c:	for ( rch = ch->in_room->people; rch != NULL; rch = rch_next )
hit:hit:hit:hit:fight.c:	    rch_next = rch->next_in_room;
hit:hit:hit:hit:fight.c:	    if ( IS_AWAKE(rch) && rch->fighting == NULL )
hit:hit:hit:hit:fight.c:    if ( victim->position == POS_DEAD || ch->in_room != victim->in_room )
hit:hit:hit:hit:fight.c:    attacker_roll = ch->perm_offense + ch->mod_offense;
hit:hit:hit:hit:fight.c:	if ( dice(1,100) > ch->perm_offense && !number_bits( 5 ) )
hit:hit:hit:hit:fight.c:	    ch->perm_offense++;
hit:hit:hit:hit:fight.c:	dam = dice( ch->damnodice, ch->damsizedice );
hit:hit:hit:hit:fight.c:	    dam = dam + ch->damplus;
hit:hit:hit:hit:fight.c:	    dam += ch->damplus;
hit:hit:hit:hit:fight.c:	    dam += dice( ch->damnodice, ch->damsizedice ) + ch->damplus;
hit:hit:hit:hit:fight.c:    if ( victim->position == POS_DEAD || ch->in_room != victim->in_room )
hit:hit:hit:hit:fight.c:    attacker_roll = ch->perm_offense + ch->mod_offense;
hit:hit:hit:hit:fight.c:	if ( dice(1,100) > ch->pcdata->learned[gsn_dual_wield]
hit:hit:hit:hit:fight.c:	    ch->pcdata->learned[gsn_dual_wield]++;
hit:hit:hit:hit:fight.c:    if ( !IS_NPC(ch) && ch->pcdata->learned[gsn_enhanced_damage] > 0 )
hit:hit:hit:hit:fight.c:	dam += dam * ch->pcdata->learned[gsn_enhanced_damage] / 100;
hit:hit:hit:hit:fight.c:	    REMOVE_BIT( ch->affected_by, AFF_INVISIBLE );
hit:hit:hit:hit:fight.c:	    if ( IS_NPC(ch) && number_percent( ) < ch->level / 2 )
hit:hit:hit:hit:fight.c:	    if ( IS_NPC(ch) && number_percent( ) < ch->level / 2 )
hit:hit:hit:hit:fight.c:		(IS_NPC(ch) ? ch->short_descr : ch->name),
hit:hit:hit:hit:fight.c:  if ( ch->fighting != NULL )
hit:hit:hit:hit:fight.c:    if ( ch->desc != NULL
hit:hit:hit:hit:fight.c:    && ch->desc->original != NULL 
hit:hit:hit:hit:fight.c:    && IS_SET( ch->desc->original->act, PLR_PEACEFUL ) )
hit:hit:hit:hit:fight.c:  else if ( IS_SET( ch->act, PLR_PEACEFUL ) )
hit:hit:hit:hit:fight.c:    if ( ch->fighting != NULL )
hit:hit:hit:hit:fight.c:    ch->fighting = victim;
hit:hit:hit:hit:fight.c:    ch->next_fighting = combat_list;
hit:hit:hit:hit:fight.c:    for ( fch = char_list; fch != NULL; fch = fch->next )
hit:hit:hit:hit:fight.c:	    fch->fighting	= NULL;
hit:hit:hit:hit:fight.c:	if ( fBoth && fch->fighting == ch )
hit:hit:hit:hit:fight.c:    combat_list = ch->next_fighting;
hit:hit:hit:hit:fight.c:    for ( fch = combat_list; fch != NULL; fch = fch->next_fighting )
hit:hit:hit:hit:fight.c:	if ( fch->next_fighting == ch )
hit:hit:hit:hit:fight.c:	    fch->next_fighting = ch->next_fighting;
hit:hit:hit:hit:fight.c:    ch->next_fighting = NULL;
hit:hit:hit:hit:fight.c:	name		= ch->short_descr;
hit:hit:hit:hit:fight.c:    if ( IS_NPC( ch ) && ( pMobIndex = ch->pIndexData ) != NULL )
hit:hit:hit:hit:fight.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:hit:fight.c:    obj_to_room( corpse, ch->in_room, TRUE );
hit:hit:hit:hit:fight.c:    was_in_room = ch->in_room;
hit:hit:hit:hit:fight.c:	    ch->in_room = pexit->to_room;
hit:hit:hit:hit:fight.c:    ch->in_room = was_in_room;
hit:hit:hit:hit:fight.c:    lch = (ch->leader != NULL) ? ch->leader : ch;
hit:hit:hit:hit:fight.c:    for ( gch = ch->in_room->people; gch != NULL; gch = gch->next_in_room )
hit:hit:hit:hit:fight.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:hit:fight.c:		obj_to_room( obj, ch->in_room, TRUE );
hit:hit:hit:hit:fight.c:  if ( IS_AFFECTED(ch, AFF_CHARM) && ch->master == victim )
hit:hit:hit:hit:fight.c:  if ( ch->fighting != NULL )
hit:hit:hit:hit:fight.c:    if ( ch->fighting == victim )
hit:hit:hit:hit:fight.c:    ch->fighting = victim;
hit:hit:hit:hit:fight.c:    if ( arg[0] == '\0' && ch->fighting == NULL )
hit:hit:hit:hit:fight.c:	victim = ch->fighting;
hit:hit:hit:hit:fight.c:	if ( get_skill( ch, gsn_bash ) < ch->perm_stat_phys_str )
hit:hit:hit:hit:fight.c:	ch->position = POS_RESTING;
hit:hit:hit:hit:fight.c:    if ( ch->position < POS_STANDING )
hit:hit:hit:hit:fight.c:    was_in = ch->in_room;
hit:hit:hit:hit:fight.c:	if ( ( now_in = ch->in_room ) == was_in )
hit:hit:hit:hit:fight.c:	ch->in_room = was_in;
hit:hit:hit:hit:fight.c:	ch->in_room = now_in;
hit:hit:hit:hit:fight.c:    if ( ch->fighting == victim )
hit:hit:hit:hit:fight.c:    if ( arg[0] == '\0' && ch->fighting == NULL )
hit:hit:hit:hit:fight.c:	victim = ch->fighting;
hit:hit:hit:hit:fight.c:    if ( ( victim = ch->fighting ) == NULL )
hit:hit:hit:hit:fight.c:	act("$n attempted to disarm you.", ch, ch->fighting, NULL, NULL, NULL, TO_VICT, SENSE_SIGHT );
hit:hit:hit:hit:fight.c:	act("$N maintained their grip on their weapon.", ch, ch->fighting, NULL, NULL, NULL, TO_CHAR, SENSE_SIGHT|SENSE_TOUCH );
hit:hit:hit:hit:fight.c:    if ( !IS_NPC(victim) && victim->level >= ch->level )
hit:hit:hit:hit:fight.c:  if ( ch->in_room == NULL )
hit:hit:hit:hit:fight.c:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:hit:fight.c:    if ( vch->fighting == ch )
hit:hit:hit:hit:fight.c:  if ( i == 0 && ch->fighting != NULL )
hit:hit:hit:hit:fileio.c:            ch->in_room ? ch->in_room->vnum : 0, ch->name, str );
hit:hit:hit:hit:flora.c:  for ( fi = ch->in_room->flora; fi != NULL; fi = fi->next )
hit:hit:hit:hit:flora.c:    write_environment_area( ch->in_room->area );
hit:hit:hit:hit:flora.c:    if ( ch->in_room->flora == NULL )
hit:hit:hit:hit:flora.c:    update_flora( ch->in_room );
hit:hit:hit:hit:flora.c:    for ( fi = ch->in_room->flora; fi != NULL; fi = fi->next )
hit:hit:hit:hit:flora.c:    fi->next = ch->in_room->flora;
hit:hit:hit:hit:flora.c:    ch->in_room->flora = fi;
hit:hit:hit:hit:flora.c:    destroy_flora( fi, ch->in_room );
hit:hit:hit:hit:handler.c:    if ( ch->desc != NULL && ch->desc->original != NULL )
hit:hit:hit:hit:handler.c:	ch = ch->desc->original;
hit:hit:hit:hit:handler.c:    if ( ch->trust != 0 )
hit:hit:hit:hit:handler.c:	return ch->trust;
hit:hit:hit:hit:handler.c:    if ( IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
hit:hit:hit:hit:handler.c:	return ch->level;
hit:hit:hit:hit:handler.c:    year = (long) current_time - (long) ch->pcdata->birth;
hit:hit:hit:hit:handler.c:    return ( ch->pcdata->played + (int) (current_time - ch->pcdata->logon) ) / 3600;
hit:hit:hit:hit:handler.c:    return URANGE( 3, ch->perm_stat_phys_str + ch->mod_stat_phys_str, 200 );
hit:hit:hit:hit:handler.c:    return URANGE( 3, ch->perm_stat_ment_int + ch->mod_stat_ment_int, 200 );
hit:hit:hit:hit:handler.c:    return URANGE( 3, ch->perm_stat_phys_dex + ch->mod_stat_phys_dex, 200 );
hit:hit:hit:hit:handler.c:    return URANGE( 3, ch->perm_stat_phys_qui + ch->mod_stat_phys_qui, 200 );
hit:hit:hit:hit:handler.c:    return URANGE( 3, ch->perm_stat_phys_tou + ch->mod_stat_phys_tou, 200 );
hit:hit:hit:hit:handler.c:	return ch->pcdata->learned[sn];
hit:hit:hit:hit:handler.c:    if ( ch->pIndexData == NULL )
hit:hit:hit:hit:handler.c:    return ch->pIndexData->learned[sn];
hit:hit:hit:hit:handler.c:	return ch->pcdata->power_level[sn];
hit:hit:hit:hit:handler.c:    if ( ch->pIndexData == NULL )
hit:hit:hit:hit:handler.c:    return ch->pIndexData->power_level[sn];
hit:hit:hit:hit:handler.c:    if ( !IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
hit:hit:hit:hit:handler.c:    if ( !IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
hit:hit:hit:hit:handler.c:    delay_new->next	= ch->pcdata->skill_delays;
hit:hit:hit:hit:handler.c:    ch->pcdata->skill_delays	= delay_new;
hit:hit:hit:hit:handler.c:    if ( ch->pcdata->skill_delays == NULL )
hit:hit:hit:hit:handler.c:    if ( delay == ch->pcdata->skill_delays )
hit:hit:hit:hit:handler.c:	ch->pcdata->skill_delays	= delay->next;
hit:hit:hit:hit:handler.c:	for ( prev = ch->pcdata->skill_delays; prev != NULL; prev = prev->next )
hit:hit:hit:hit:handler.c:  for ( delay = ch->pcdata->skill_delays; delay != NULL; delay = delay->next )
hit:hit:hit:hit:handler.c:	SET_BIT( ch->affected_by, paf->bitvector );
hit:hit:hit:hit:handler.c:	REMOVE_BIT( ch->affected_by, paf->bitvector );
hit:hit:hit:hit:handler.c:    case APPLY_STAT_PHYS_STR: ch->mod_stat_phys_str	+= mod;	break;
hit:hit:hit:hit:handler.c:    case APPLY_STAT_PHYS_DEX: ch->mod_stat_phys_dex	+= mod;	break;
hit:hit:hit:hit:handler.c:    case APPLY_STAT_PHYS_TOU: ch->mod_stat_phys_tou	+= mod;	break;
hit:hit:hit:hit:handler.c:    case APPLY_STAT_PHYS_QUI: ch->mod_stat_phys_qui	+= mod;	break;
hit:hit:hit:hit:handler.c:    case APPLY_STAT_MENT_INT: ch->mod_stat_ment_int	+= mod;	break;
hit:hit:hit:hit:handler.c:    case APPLY_SEX:           ch->sex			+= mod;	break;
hit:hit:hit:hit:handler.c:    case APPLY_MANA:          ch->max_mana		+= mod;	break;
hit:hit:hit:hit:handler.c:    case APPLY_HIT:           ch->max_hit		+= mod;	break;
hit:hit:hit:hit:handler.c:    case APPLY_MOVE:          ch->max_move		+= mod;	break;
hit:hit:hit:hit:handler.c:    case APPLY_HITROLL:       ch->hitroll		+= mod;	break;
hit:hit:hit:hit:handler.c:    case APPLY_DAMROLL:       ch->damroll		+= mod;	break;
hit:hit:hit:hit:handler.c:    case APPLY_SAVING_PARA:   ch->saving_throw		+= mod;	break;
hit:hit:hit:hit:handler.c:    case APPLY_SAVING_ROD:    ch->saving_throw		+= mod;	break;
hit:hit:hit:hit:handler.c:    case APPLY_SAVING_PETRI:  ch->saving_throw		+= mod;	break;
hit:hit:hit:hit:handler.c:    case APPLY_SAVING_BREATH: ch->saving_throw		+= mod;	break;
hit:hit:hit:hit:handler.c:    case APPLY_SAVING_SPELL:  ch->saving_throw		+= mod;	break;
hit:hit:hit:hit:handler.c:    case APPLY_ABSORBTION:    ch->general_absorb	+= mod; break;
hit:hit:hit:hit:handler.c:    case APPLY_CHANNELING:    ch->channeling		+= mod; break;
hit:hit:hit:hit:handler.c:    case APPLY_VISION_PROFILE:  ch->vision_min += mod;
hit:hit:hit:hit:handler.c:				ch->vision_max += mod;		break;
hit:hit:hit:hit:handler.c:    case APPLY_VISION_RANGE:	ch->vision_range += mod;	break;
hit:hit:hit:hit:handler.c:	    obj_to_room( wield, ch->in_room, TRUE );
hit:hit:hit:hit:handler.c:    paf_new->next	= ch->affected;
hit:hit:hit:hit:handler.c:    ch->affected	= paf_new;
hit:hit:hit:hit:handler.c:    if ( ch->affected == NULL )
hit:hit:hit:hit:handler.c:    if ( paf == ch->affected )
hit:hit:hit:hit:handler.c:	ch->affected	= paf->next;
hit:hit:hit:hit:handler.c:	for ( prev = ch->affected; prev != NULL; prev = prev->next )
hit:hit:hit:hit:handler.c:    for ( paf = ch->affected; paf != NULL; paf = paf_next )
hit:hit:hit:hit:handler.c:    for ( paf = ch->affected; paf != NULL; paf = paf->next )
hit:hit:hit:hit:handler.c:    for ( paf_old = ch->affected; paf_old != NULL; paf_old = paf_old->next )
hit:hit:hit:hit:handler.c:    if ( (room = ch->in_room) == NULL )
hit:hit:hit:hit:handler.c:	--ch->in_room->area->nplayer;
hit:hit:hit:hit:handler.c:    ch->in_room->light_mod -= ch->light;
hit:hit:hit:hit:handler.c:    if ( ch == ch->in_room->people )
hit:hit:hit:hit:handler.c:	ch->in_room->people = ch->next_in_room;
hit:hit:hit:hit:handler.c:	for ( prev = ch->in_room->people; prev; prev = prev->next_in_room )
hit:hit:hit:hit:handler.c:		prev->next_in_room = ch->next_in_room;
hit:hit:hit:hit:handler.c:    ch->in_room      = NULL;
hit:hit:hit:hit:handler.c:    ch->next_in_room = NULL;
hit:hit:hit:hit:handler.c:    ch->in_room		= pRoomIndex;
hit:hit:hit:hit:handler.c:    ch->next_in_room	= pRoomIndex->people;
hit:hit:hit:hit:handler.c:	++ch->in_room->area->nplayer;
hit:hit:hit:hit:handler.c:    ch->in_room->light_mod += ch->light;
hit:hit:hit:hit:handler.c:    obj->next_content	 = ch->carrying;
hit:hit:hit:hit:handler.c:    ch->carrying	 = obj;
hit:hit:hit:hit:handler.c:    ch->carry_number	+= 1;
hit:hit:hit:hit:handler.c:    ch->carry_weight	+= get_obj_weight( obj );
hit:hit:hit:hit:handler.c:    if ( ch->carrying == obj )
hit:hit:hit:hit:handler.c:	ch->carrying = obj->next_content;
hit:hit:hit:hit:handler.c:	for ( prev = ch->carrying; prev != NULL; prev = prev->next_content )
hit:hit:hit:hit:handler.c:    ch->carry_number	-= 1;
hit:hit:hit:hit:handler.c:    ch->carry_weight	-= get_obj_weight( obj );
hit:hit:hit:hit:handler.c:    return ch->wearing[iWear];
hit:hit:hit:hit:handler.c:    iWear = race_array[ch->race]->hit_loc_location[hit_loc];
hit:hit:hit:hit:handler.c:	obj_to_room( obj, ch->in_room, TRUE );
hit:hit:hit:hit:handler.c:    if ( ch->wearing[iWear] == NULL )
hit:hit:hit:hit:handler.c:	ch->wearing[iWear] = obj;
hit:hit:hit:hit:handler.c:    else if ( ch->wearing[iWear]->size > 50 )
hit:hit:hit:hit:handler.c:	obj->next_worn = ch->wearing[iWear]->next_worn;
hit:hit:hit:hit:handler.c:	ch->wearing[iWear]->next_worn = obj;
hit:hit:hit:hit:handler.c:	obj->next_worn = ch->wearing[iWear];
hit:hit:hit:hit:handler.c:	ch->wearing[iWear] = obj;
hit:hit:hit:hit:handler.c:    &&   ch->in_room != NULL )
hit:hit:hit:hit:handler.c:	ch->in_room->light_mod += obj->value[0];
hit:hit:hit:hit:handler.c:	ch->light += obj->value[0];
hit:hit:hit:hit:handler.c:	ch->in_room->light_mod += GLOW_LIGHT;
hit:hit:hit:hit:handler.c:	ch->light += GLOW_LIGHT;
hit:hit:hit:hit:handler.c:	ch->in_room->light_mod += DARK_LIGHT;
hit:hit:hit:hit:handler.c:	ch->light += DARK_LIGHT;
hit:hit:hit:hit:handler.c:    if ( ch->wearing[wear_loc] == NULL )
hit:hit:hit:hit:handler.c:    else if ( ch->wearing[wear_loc] == obj )
hit:hit:hit:hit:handler.c:	ch->wearing[wear_loc] = obj->next_worn;
hit:hit:hit:hit:handler.c:	for ( o = ch->wearing[wear_loc]; o != NULL; o = o->next_worn )
hit:hit:hit:hit:handler.c:    if ( obj != ch->carrying )
hit:hit:hit:hit:handler.c:	for ( prev = ch->carrying; prev != NULL; prev = prev->next_content )
hit:hit:hit:hit:handler.c:	obj->next_content = ch->carrying;
hit:hit:hit:hit:handler.c:	ch->carrying = obj;
hit:hit:hit:hit:handler.c:    &&   ch->in_room != NULL )
hit:hit:hit:hit:handler.c:	ch->in_room->light_mod -= obj->value[0];
hit:hit:hit:hit:handler.c:	ch->light -= obj->value[0];
hit:hit:hit:hit:handler.c:	ch->in_room->light_mod -= GLOW_LIGHT;
hit:hit:hit:hit:handler.c:	ch->light -= GLOW_LIGHT;
hit:hit:hit:hit:handler.c:	ch->in_room->light_mod -= DARK_LIGHT;
hit:hit:hit:hit:handler.c:	ch->light -= DARK_LIGHT;
hit:hit:hit:hit:handler.c:    if ( ch->wearing[wear_loc] != NULL
hit:hit:hit:hit:handler.c:    || ch->in_room == NULL )
hit:hit:hit:hit:handler.c:	    while( (od = ch->wearing[i]) != NULL )
hit:hit:hit:hit:handler.c:		obj_to_room( od, ch->in_room, TRUE );
hit:hit:hit:hit:handler.c:    for ( ch = char_list; ch != NULL; ch = ch->next )
hit:hit:hit:hit:handler.c:	if ( (p = ch->predelay_info) != NULL )
hit:hit:hit:hit:handler.c:    if ( ch->in_room == NULL )
hit:hit:hit:hit:handler.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:hit:handler.c:	if ( ch->pReset != NULL )
hit:hit:hit:hit:handler.c:	    ch->pReset->target = NULL;
hit:hit:hit:hit:handler.c:    if ( ch->desc != NULL && ch->desc->original != NULL )
hit:hit:hit:hit:handler.c:    for ( wch = char_list; wch != NULL; wch = wch->next )
hit:hit:hit:hit:handler.c:	if ( wch->reply == ch )
hit:hit:hit:hit:handler.c:	    wch->reply = NULL;
hit:hit:hit:hit:handler.c:	if ( (p = wch->predelay_info) != NULL )
hit:hit:hit:hit:handler.c:    while ( ch->hunting != NULL )
hit:hit:hit:hit:handler.c:	remove_hunting( ch, ch->hunting->victim, TRUE );
hit:hit:hit:hit:handler.c:       char_list = ch->next;
hit:hit:hit:hit:handler.c:		prev->next = ch->next;
hit:hit:hit:hit:handler.c:    if ( ch->desc )
hit:hit:hit:hit:handler.c:        ch->desc->character = NULL;
hit:hit:hit:hit:handler.c:    for ( rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:handler.c:	( !is_name( arg, rch->name ) && !is_name( arg, rch->namelist ) ) )
hit:hit:hit:hit:handler.c:    for ( wch = char_list; wch != NULL ; wch = wch->next )
hit:hit:hit:hit:handler.c:	( !is_name( arg, wch->name ) && !is_name( arg, wch->namelist ) ) )
hit:hit:hit:hit:handler.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:hit:hit:hit:handler.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:hit:hit:hit:handler.c:    obj = get_obj_list( ch, argument, ch->in_room->contents );
hit:hit:hit:hit:handler.c:    diff = ch->vision_current - room_light( pRoomIndex );
hit:hit:hit:hit:handler.c:    for ( rch = pRoomIndex->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:handler.c:    if ( (!IS_NPC(ch) && IS_SET(ch->act, PLR_HOLYLIGHT)) 
hit:hit:hit:hit:handler.c:    if ( room_is_dark( ch->in_room, ch ) == VISION_TOO_DARK
hit:hit:hit:hit:handler.c:    || room_is_dark( ch->in_room, ch ) == VISION_TOO_BRIGHT )
hit:hit:hit:hit:handler.c:    if ( room_is_dark( ch->in_room, ch ) == VISION_HAZY )
hit:hit:hit:hit:handler.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_HOLYLIGHT) )
hit:hit:hit:hit:handler.c:    if ( room_is_dark( ch->in_room, ch ) == VISION_TOO_DARK
hit:hit:hit:hit:handler.c:    || room_is_dark( ch->in_room, ch ) == VISION_TOO_BRIGHT )
hit:hit:hit:hit:handler.c:    if ( !IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
hit:hit:hit:hit:handler.c:    if ( IS_NPC( victim ) && ch->pIndexData == victim->pIndexData )
hit:hit:hit:hit:handler.c:    aggr_bits = ch->aggression;
hit:hit:hit:hit:handler.c:	if ( victim->weight > ch->weight )
hit:hit:hit:hit:handler.c:	aggr += ch->weight - victim->weight;
hit:hit:hit:hit:handler.c:	aggr -= (ch->max_hit - ch->hit[HIT_LOC_BODY])*100/ch->max_hit;
hit:hit:hit:hit:handler.c:	aggr -= race_array[ch->race]->relations[victim->race];
hit:hit:hit:hit:handler.c:    if ( ch->predelay_info != NULL )
hit:hit:hit:hit:handler.c:	free_predelay( ch->predelay_info );
hit:hit:hit:hit:handler.c:    ch->predelay_info = p;
hit:hit:hit:hit:handler.c:    ch->predelay_time = delay;
hit:hit:hit:hit:hit:act_comm.c:    if ( !str_cmp( ch->name, pnote->sender ) )
hit:hit:hit:hit:hit:act_comm.c:    if ( is_name( ch->name, pnote->to_list ) )
hit:hit:hit:hit:hit:act_comm.c:    if ( ch->pnote != NULL )
hit:hit:hit:hit:hit:act_comm.c:	pnote	  = alloc_perm( sizeof(*ch->pnote) );
hit:hit:hit:hit:hit:act_comm.c:    pnote->sender	= str_dup( ch->name );
hit:hit:hit:hit:hit:act_comm.c:    ch->pnote		= pnote;
hit:hit:hit:hit:hit:act_comm.c:	REMOVE_BIT(ch->act, PLR_AFK);
hit:hit:hit:hit:hit:act_comm.c:    if (IS_SET(ch->act, PLR_AFK)) {
hit:hit:hit:hit:hit:act_comm.c:       REMOVE_BIT(ch->act, PLR_AFK);
hit:hit:hit:hit:hit:act_comm.c:	SET_BIT(ch->act, PLR_AFK);
hit:hit:hit:hit:hit:act_comm.c:	if ( to_one[0] != '\0' && str_cmp( ch->name, to_one ) )
hit:hit:hit:hit:hit:act_comm.c:    if ( str_cmp( ch->name, pnote->sender ) && to_new[0] != '\0' 
hit:hit:hit:hit:hit:act_comm.c:    if ( ch->pnote == NULL || ch->pnote->text[0] == '\0' )
hit:hit:hit:hit:hit:act_comm.c:    oldb = ch->pnote->text;
hit:hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:hit:act_comm.c:	    free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:hit:act_comm.c:	    ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:hit:act_comm.c:	send_to_char( ch->pnote->text, ch );
hit:hit:hit:hit:hit:act_comm.c:	strcpy( buf, ch->pnote->text );
hit:hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->subject, MEM_GENERAL );
hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->subject = str_dup( argument );
hit:hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->to_list, MEM_GENERAL );
hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->to_list = str_dup( argument );
hit:hit:hit:hit:hit:act_comm.c:	if ( ch->pnote != NULL )
hit:hit:hit:hit:hit:act_comm.c:	    free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:hit:act_comm.c:	    free_string( ch->pnote->subject, MEM_GENERAL );
hit:hit:hit:hit:hit:act_comm.c:	    free_string( ch->pnote->to_list, MEM_GENERAL );
hit:hit:hit:hit:hit:act_comm.c:	    free_string( ch->pnote->date, MEM_GENERAL );
hit:hit:hit:hit:hit:act_comm.c:	    free_string( ch->pnote->sender, MEM_GENERAL );
hit:hit:hit:hit:hit:act_comm.c:	    ch->pnote->next	= note_free;
hit:hit:hit:hit:hit:act_comm.c:	    note_free		= ch->pnote;
hit:hit:hit:hit:hit:act_comm.c:	    ch->pnote		= NULL;
hit:hit:hit:hit:hit:act_comm.c:	if ( ch->pnote == NULL )
hit:hit:hit:hit:hit:act_comm.c:	    ch->pnote->sender,
hit:hit:hit:hit:hit:act_comm.c:	    ch->pnote->subject,
hit:hit:hit:hit:hit:act_comm.c:	    ch->pnote->to_list
hit:hit:hit:hit:hit:act_comm.c:	send_to_char( ch->pnote->text, ch );
hit:hit:hit:hit:hit:act_comm.c:	if ( ch->pnote == NULL )
hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->next			= NULL;
hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->date			= str_dup( strtime );
hit:hit:hit:hit:hit:act_comm.c:	    note_list	= ch->pnote;
hit:hit:hit:hit:hit:act_comm.c:	    pnote->next	= ch->pnote;
hit:hit:hit:hit:hit:act_comm.c:	pnote		= ch->pnote;
hit:hit:hit:hit:hit:act_comm.c:	ch->pnote	= NULL;
hit:hit:hit:hit:hit:act_comm.c:    REMOVE_BIT(ch->deaf, channel);
hit:hit:hit:hit:hit:act_comm.c:	position	= ch->position;
hit:hit:hit:hit:hit:act_comm.c:	ch->position	= POS_STANDING;
hit:hit:hit:hit:hit:act_comm.c:	ch->position	= position;
hit:hit:hit:hit:hit:act_comm.c:	&&  !IS_SET(och->deaf, channel) )
hit:hit:hit:hit:hit:act_comm.c:	    position		= vch->position;
hit:hit:hit:hit:hit:act_comm.c:	    vch->position	= position;
hit:hit:hit:hit:hit:act_comm.c:  gsn = *language_table[ch->language].pgsn;
hit:hit:hit:hit:hit:act_comm.c:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:hit:hit:act_comm.c:    if ( ch->in_room->exit[door] == NULL
hit:hit:hit:hit:hit:act_comm.c:    || ( room = ch->in_room->exit[door]->to_room ) == NULL )
hit:hit:hit:hit:hit:act_comm.c:    for ( vch = room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:hit:hit:act_comm.c:  gsn = *language_table[ch->language].pgsn;
hit:hit:hit:hit:hit:act_comm.c:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:hit:hit:act_comm.c:           sprintf(log_buf, "%s wishes to all \"%s\"",ch->name,argument );
hit:hit:hit:hit:hit:act_comm.c:    || ( IS_NPC(victim) && victim->in_room != ch->in_room ) )
hit:hit:hit:hit:hit:act_comm.c:	 || IS_SET(ch->act, PLR_WIZINVIS))
hit:hit:hit:hit:hit:act_comm.c:        sprintf( log_buf, "%s sends to %s \"%s\"", ch->name, victim->name, argument );
hit:hit:hit:hit:hit:act_comm.c:        sprintf( log_buf, "%s wishes to %s \"%s\"", ch->name, victim->name, argument );
hit:hit:hit:hit:hit:act_comm.c:    if ( ( victim = ch->reply ) == NULL )
hit:hit:hit:hit:hit:act_comm.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_NO_EMOTE) )
hit:hit:hit:hit:hit:act_comm.c:    if ( ch->position  < POS_STUNNED  )
hit:hit:hit:hit:hit:act_comm.c:    if ( ch->in_room && !IS_SET( ch->in_room->room_flags, ROOM_RENT )
hit:hit:hit:hit:hit:act_comm.c:    sprintf( log_buf, "%s has quit.", ch->name );
hit:hit:hit:hit:hit:act_comm.c:  //  d = ch->desc;
hit:hit:hit:hit:hit:act_comm.c:    d = ch->desc;
hit:hit:hit:hit:hit:act_comm.c:    if (!IS_SET(ch->act, PLR_AFK))
hit:hit:hit:hit:hit:act_comm.c:    if ( IS_AFFECTED(ch, AFF_CHARM) && ch->master != NULL )
hit:hit:hit:hit:hit:act_comm.c:	act( "You don't wish to leave your beloved master!", ch, ch->master, NULL, NULL, NULL, TO_CHAR, SENSE_SIXTH );
hit:hit:hit:hit:hit:act_comm.c:	if ( ch->master == NULL )
hit:hit:hit:hit:hit:act_comm.c:    if ( ch->master != NULL )
hit:hit:hit:hit:hit:act_comm.c:    if ( ch->master != NULL )
hit:hit:hit:hit:hit:act_comm.c:    ch->master        = master;
hit:hit:hit:hit:hit:act_comm.c:    ch->leader        = NULL;
hit:hit:hit:hit:hit:act_comm.c:    if ( ch->master == NULL )
hit:hit:hit:hit:hit:act_comm.c:	REMOVE_BIT( ch->affected_by, AFF_CHARM );
hit:hit:hit:hit:hit:act_comm.c:    act( "You stop following $N.", ch, ch->master, NULL, NULL, NULL, TO_CHAR, SENSE_SIXTH );
hit:hit:hit:hit:hit:act_comm.c:    ch->master = NULL;
hit:hit:hit:hit:hit:act_comm.c:    ch->leader = NULL;
hit:hit:hit:hit:hit:act_comm.c:    if ( ch->master != NULL )
hit:hit:hit:hit:hit:act_comm.c:    ch->leader = NULL;
hit:hit:hit:hit:hit:act_comm.c:    for ( fch = char_list; fch != NULL; fch = fch->next )
hit:hit:hit:hit:hit:act_comm.c:	if ( fch->master == ch )
hit:hit:hit:hit:hit:act_comm.c:	if ( fch->leader == ch )
hit:hit:hit:hit:hit:act_comm.c:	    fch->leader = fch;
hit:hit:hit:hit:hit:act_comm.c:    for ( och = ch->in_room->people; och != NULL; och = och_next )
hit:hit:hit:hit:hit:act_comm.c:	och_next = och->next_in_room;
hit:hit:hit:hit:hit:act_comm.c:	&&   och->master == ch
hit:hit:hit:hit:hit:act_comm.c:	leader = (ch->leader != NULL) ? ch->leader : ch;
hit:hit:hit:hit:hit:act_comm.c:	for ( gch = char_list; gch != NULL; gch = gch->next )
hit:hit:hit:hit:hit:act_comm.c:    if ( ch->master != NULL || ( ch->leader != NULL && ch->leader != ch ) )
hit:hit:hit:hit:hit:act_comm.c:    if ( IS_SET( ch->act, PLR_NO_TELL ) )
hit:hit:hit:hit:hit:act_comm.c:    sprintf( buf, "%s tells the group '%s'.\n\r", ch->name, argument );
hit:hit:hit:hit:hit:act_comm.c:    for ( gch = char_list; gch != NULL; gch = gch->next )
hit:hit:hit:hit:hit:act_comm.c:    if ( ach->leader != NULL ) ach = ach->leader;
hit:hit:hit:hit:hit:act_comm.c:    if ( bch->leader != NULL ) bch = bch->leader;
hit:hit:hit:hit:hit:act_info.c:    if ( ch->desc == NULL )
hit:hit:hit:hit:hit:act_info.c:	    if ( IS_NPC(ch) || IS_SET(ch->act, PLR_COMBINE) )
hit:hit:hit:hit:hit:act_info.c:	if ( IS_NPC(ch) || IS_SET(ch->act, PLR_COMBINE) )
hit:hit:hit:hit:hit:act_info.c:	if ( IS_NPC(ch) || IS_SET(ch->act, PLR_COMBINE) )
hit:hit:hit:hit:hit:act_info.c:	      rch != NULL; rch = rch->next_in_room ) {
hit:hit:hit:hit:hit:act_info.c:	    if ( rch->riding == victim ) {
hit:hit:hit:hit:hit:act_info.c:    for ( rch = list; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:hit:act_info.c:	&&   IS_SET(rch->act, PLR_WIZINVIS)
hit:hit:hit:hit:hit:act_info.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_HOLYLIGHT) )
hit:hit:hit:hit:hit:act_info.c:    if ( ch->desc == NULL )
hit:hit:hit:hit:hit:act_info.c:    if ( ch->position < POS_SLEEPING )
hit:hit:hit:hit:hit:act_info.c:    if ( ch->position == POS_SLEEPING )
hit:hit:hit:hit:hit:act_info.c:    &&   !IS_SET(ch->act, PLR_HOLYLIGHT)
hit:hit:hit:hit:hit:act_info.c:    &&   room_is_dark( ch->in_room, ch ) == VISION_TOO_DARK )
hit:hit:hit:hit:hit:act_info.c:	show_char_to_char( ch->in_room->people, ch );
hit:hit:hit:hit:hit:act_info.c:    &&   !IS_SET(ch->act, PLR_HOLYLIGHT)
hit:hit:hit:hit:hit:act_info.c:    &&   room_is_dark( ch->in_room, ch ) == VISION_TOO_BRIGHT )
hit:hit:hit:hit:hit:act_info.c:	show_char_to_char( ch->in_room->people, ch );
hit:hit:hit:hit:hit:act_info.c:	 sprintf(buf2,"[%d] ", ch->in_room->vnum);
hit:hit:hit:hit:hit:act_info.c:     send_to_char( ch->in_room->name, ch );
hit:hit:hit:hit:hit:act_info.c:	  ( !IS_NPC( ch ) && !IS_SET( ch->act, PLR_BRIEF ) ) )
hit:hit:hit:hit:hit:act_info.c:	 send_to_char( ch->in_room->description, ch );
hit:hit:hit:hit:hit:act_info.c:     if ( IS_SET(ch->act, PLR_AUTOWEATHER) && IS_OUTDOORS(ch))
hit:hit:hit:hit:hit:act_info.c:     update_flora( ch->in_room );
hit:hit:hit:hit:hit:act_info.c:     display_flora( ch, ch->in_room->flora, 0 );
hit:hit:hit:hit:hit:act_info.c:     show_list_to_char( ch->in_room->contents, ch, FALSE, FALSE, FALSE );
hit:hit:hit:hit:hit:act_info.c:     show_char_to_char( ch->in_room->people,   ch );
hit:hit:hit:hit:hit:act_info.c:	for ( obj = ch->in_room->contents; obj != NULL; obj = obj->next_content )
hit:hit:hit:hit:hit:act_info.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:hit:hit:hit:hit:act_info.c:    for ( obj = ch->in_room->contents; obj != NULL; obj = obj->next_content )
hit:hit:hit:hit:hit:act_info.c:    pdesc = get_extra_descr( arg1, ch->in_room->extra_descr );
hit:hit:hit:hit:hit:act_info.c:	if ( (pexit = ch->in_room->exit[door]) == NULL )
hit:hit:hit:hit:hit:act_info.c:    if ( ( pexit = ch->in_room->exit[door] ) == NULL )
hit:hit:hit:hit:hit:act_info.c:    dist = URANGE( 1, ch->vision_range, 200 );
hit:hit:hit:hit:hit:act_info.c:    in_room = ch->in_room;
hit:hit:hit:hit:hit:act_info.c:    update_flora( ch->in_room );
hit:hit:hit:hit:hit:act_info.c:    if ( !IS_SET( ch->in_room->sector->flags, SECTOR_OUTDOORS ) )
hit:hit:hit:hit:hit:act_info.c:    soil_condition( ch, get_water_value( ch->in_room ) );
hit:hit:hit:hit:hit:act_info.c:	if ( ( pexit = ch->in_room->exit[door] ) != NULL
hit:hit:hit:hit:hit:act_info.c:       // && IS_SET( ch->act, PLR_HOLYLIGHT ))
hit:hit:hit:hit:hit:act_info.c:	ch->name,
hit:hit:hit:hit:hit:act_info.c:	IS_NPC(ch) ? "" : ch->short_descr );
hit:hit:hit:hit:hit:act_info.c:	(is_vowel(race_array[ch->race]->race_name[0]) ? "an" : "a" ),
hit:hit:hit:hit:hit:act_info.c:	race_array[ch->race]->race_name);
hit:hit:hit:hit:hit:act_info.c:    if ( get_trust( ch ) != ch->level )
hit:hit:hit:hit:hit:act_info.c:	ch->hit[HIT_LOC_BODY],  ch->max_hit,
hit:hit:hit:hit:hit:act_info.c:	ch->mana, ch->max_mana,
hit:hit:hit:hit:hit:act_info.c:	ch->move, ch->max_move );
hit:hit:hit:hit:hit:act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->condition[COND_DRUNK]   > 10 )
hit:hit:hit:hit:hit:act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->condition[COND_THIRST] ==  0 )
hit:hit:hit:hit:hit:act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->condition[COND_FULL]   ==  0 )
hit:hit:hit:hit:hit:act_info.c:    switch ( ch->position )
hit:hit:hit:hit:hit:act_info.c:    switch( ch->move_speed )
hit:hit:hit:hit:hit:act_info.c:      skill_table[*language_table[ch->language].pgsn].name );
hit:hit:hit:hit:hit:act_info.c:   free_string( ch->prompt, MEM_GENERAL );
hit:hit:hit:hit:hit:act_info.c:   ch->prompt = str_dup( buf );
hit:hit:hit:hit:hit:act_info.c:	if ( ( fImmortalOnly  && wch->level < LEVEL_IMMORTAL ) )
hit:hit:hit:hit:hit:act_info.c:/*	switch ( wch->level )
hit:hit:hit:hit:hit:act_info.c:	if ( IS_IMMORTAL( ch ) || wch->level > LEVEL_IMMORTAL )
hit:hit:hit:hit:hit:act_info.c:		     (IS_SET(wch->act, PLR_AFK) ? "[AFK]" : " "),
hit:hit:hit:hit:hit:act_info.c:                     (IS_SET(wch->act, PLR_WIZINVIS) ? "[INVIS]" : " "),
hit:hit:hit:hit:hit:act_info.c:		     wch->name,
hit:hit:hit:hit:hit:act_info.c:		     wch->short_descr);
hit:hit:hit:hit:hit:act_info.c:    show_list_to_char( ch->carrying, ch, TRUE, TRUE, FALSE );
hit:hit:hit:hit:hit:act_info.c:	for ( obj = ch->wearing[iWear]; obj != NULL; obj = obj->next_worn )
hit:hit:hit:hit:hit:act_info.c:	for ( obj2 = ch->carrying; obj2 != NULL; obj2 = obj2->next_content )
hit:hit:hit:hit:hit:act_info.c:	    &&   victim->in_room->area == ch->in_room->area
hit:hit:hit:hit:hit:act_info.c:	    &&   victim->in_room->area == ch->in_room->area
hit:hit:hit:hit:hit:act_info.c:	    if ( ch->description != NULL )
hit:hit:hit:hit:hit:act_info.c:		strcat( buf, ch->description );
hit:hit:hit:hit:hit:act_info.c:	free_string( ch->description, MEM_GENERAL );
hit:hit:hit:hit:hit:act_info.c:	ch->description = str_dup( buf );
hit:hit:hit:hit:hit:act_info.c:    send_to_char( ch->description ? ch->description : "(None).\n\r", ch );
hit:hit:hit:hit:hit:act_info.c:    if ( strcmp( crypt( arg1, ch->pcdata->pwd ), ch->pcdata->pwd ) )
hit:hit:hit:hit:hit:act_info.c:    pwdnew = crypt( arg2, ch->name );
hit:hit:hit:hit:hit:act_info.c:    free_string( ch->pcdata->pwd, MEM_PCDATA );
hit:hit:hit:hit:hit:act_info.c:    ch->pcdata->pwd = str_dup( pwdnew );
hit:hit:hit:hit:hit:act_info.c:	send_to_char( !IS_SET(ch->deaf, CHANNEL_CHAT)
hit:hit:hit:hit:hit:act_info.c:	    send_to_char( !IS_SET(ch->deaf, CHANNEL_IMMTALK)
hit:hit:hit:hit:hit:act_info.c:	    send_to_char( !IS_SET(ch->deaf, CHANNEL_LOG)
hit:hit:hit:hit:hit:act_info.c:	    REMOVE_BIT (ch->deaf, bit);
hit:hit:hit:hit:hit:act_info.c:	    SET_BIT    (ch->deaf, bit);
hit:hit:hit:hit:hit:act_info.c:	if ( IS_SET(ch->act,PLR_BRIEF))
hit:hit:hit:hit:hit:act_info.c:	    REMOVE_BIT(ch->act,PLR_BRIEF);
hit:hit:hit:hit:hit:act_info.c:	    SET_BIT(ch->act,PLR_BRIEF);
hit:hit:hit:hit:hit:act_info.c:	if ( IS_SET(ch->act,PLR_BLANK))
hit:hit:hit:hit:hit:act_info.c:	    REMOVE_BIT(ch->act,PLR_BLANK);
hit:hit:hit:hit:hit:act_info.c:	    SET_BIT(ch->act,PLR_BLANK);
hit:hit:hit:hit:hit:act_info.c:	if ( IS_SET(ch->act,PLR_PEACEFUL))
hit:hit:hit:hit:hit:act_info.c:	    REMOVE_BIT(ch->act,PLR_PEACEFUL);
hit:hit:hit:hit:hit:act_info.c:	    SET_BIT(ch->act,PLR_PEACEFUL);
hit:hit:hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_BLANK)
hit:hit:hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_BRIEF)
hit:hit:hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_COMBINE)
hit:hit:hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_PEACEFUL)
hit:hit:hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_PROMPT)
hit:hit:hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_TELNET_GA)
hit:hit:hit:hit:hit:act_info.c:	send_to_char( !IS_SET(ch->act, PLR_NO_EMOTE)
hit:hit:hit:hit:hit:act_info.c:	send_to_char( !IS_SET(ch->act, PLR_NO_TELL)
hit:hit:hit:hit:hit:act_info.c:	    SET_BIT    (ch->act, bit);
hit:hit:hit:hit:hit:act_info.c:	    REMOVE_BIT (ch->act, bit);
hit:hit:hit:hit:hit:act_info.c:    ch->pcdata->pagelen = i;
hit:hit:hit:hit:hit:act_info.c:  sprintf( buf, "Page Length (pagelen):  %d\n\r", ch->pcdata->pagelen );
hit:hit:hit:hit:hit:act_move.c:  in_room = ch->in_room;
hit:hit:hit:hit:hit:act_move.c:  if ( ch->riding != NULL && ch->riding->in_room != in_room )
hit:hit:hit:hit:hit:act_move.c:    ch->riding = NULL;
hit:hit:hit:hit:hit:act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:hit:act_move.c:       &&   ch->master != NULL
hit:hit:hit:hit:hit:act_move.c:       &&   in_room == ch->master->in_room 
hit:hit:hit:hit:hit:act_move.c:       &&   !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:hit:act_move.c:      &&  !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:hit:act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:hit:act_move.c:      for ( obj = ch->carrying; obj != NULL; obj = obj->next_content) {
hit:hit:hit:hit:hit:act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:hit:act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:hit:act_move.c:  if ( ch->move_speed < 0 || ch->move_speed >= MOVE_MAX )
hit:hit:hit:hit:hit:act_move.c:    ch->move_speed = MOVE_WALK;
hit:hit:hit:hit:hit:act_move.c:  if ( ch->move < move && ch->riding == NULL )
hit:hit:hit:hit:hit:act_move.c:  if ( ch->riding != NULL && ch->riding->move < 2 * move )
hit:hit:hit:hit:hit:act_move.c:  if ( ch->riding == NULL )
hit:hit:hit:hit:hit:act_move.c:    ch->move -= move;
hit:hit:hit:hit:hit:act_move.c:    ch->riding->move -= 2 * move;
hit:hit:hit:hit:hit:act_move.c:  if ( ch->move_speed == MOVE_SNEAK && ch->riding == NULL )
hit:hit:hit:hit:hit:act_move.c:      if ( ch->next_in_room != NULL )
hit:hit:hit:hit:hit:act_move.c:    if ( ch->riding == NULL )
hit:hit:hit:hit:hit:act_move.c:        move_names[ch->move_speed], TO_ROOM, SENSE_SIGHT|SENSE_HEARING );
hit:hit:hit:hit:hit:act_move.c:      act( "$n leaves $t, riding $N.", ch, ch->riding, NULL, dir_name[door],
hit:hit:hit:hit:hit:act_move.c:  if ( ch->riding != NULL )
hit:hit:hit:hit:hit:act_move.c:    char_from_room( ch->riding );
hit:hit:hit:hit:hit:act_move.c:    char_to_room( ch->riding, to_room, TRUE );
hit:hit:hit:hit:hit:act_move.c:    if ( ch->riding == NULL )
hit:hit:hit:hit:hit:act_move.c:        dir_name_2[rev_dir[door]], move_names[ch->move_speed],
hit:hit:hit:hit:hit:act_move.c:      act( "$n has arrived from $t, riding $N.", ch, ch->riding, NULL,
hit:hit:hit:hit:hit:act_move.c:    fch_next = fch->next_in_room;
hit:hit:hit:hit:hit:act_move.c:    if ( fch->master == ch && fch->position == POS_STANDING
hit:hit:hit:hit:hit:act_move.c:  if (!IS_UNSWITCHED_MOB(ch) && IS_SET(ch->act, PLR_HOLYWALK))
hit:hit:hit:hit:hit:act_move.c:  switch( ch->move_speed )
hit:hit:hit:hit:hit:act_move.c:  if (!IS_UNSWITCHED_MOB(ch) && IS_SET(ch->act, PLR_HOLYWALK))
hit:hit:hit:hit:hit:act_move.c:  switch( ch->move_speed )
hit:hit:hit:hit:hit:act_move.c:	    if ( ( pexit = ch->in_room->exit[door] ) != NULL
hit:hit:hit:hit:hit:act_move.c:    if ( ( pexit = ch->in_room->exit[door] ) == NULL )
hit:hit:hit:hit:hit:act_move.c:	    if ( ( pexit = ch->in_room->exit[dir] ) != NULL
hit:hit:hit:hit:hit:act_move.c:    if ( ( pexit = ch->in_room->exit[dir] ) == NULL
hit:hit:hit:hit:hit:act_move.c:	damage( ch, ch, UMIN(dice(1,pain),dice(1,ch->hit[0])), gsn_tumbling, NULL, gn_wear_none );
hit:hit:hit:hit:hit:act_move.c:	pexit = ch->in_room->exit[door];
hit:hit:hit:hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:hit:hit:act_move.c:	    for ( rch = to_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:hit:act_move.c:	pexit = ch->in_room->exit[door];
hit:hit:hit:hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:hit:hit:act_move.c:	    for ( rch = to_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:hit:act_move.c:	pexit	= ch->in_room->exit[door];
hit:hit:hit:hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:hit:hit:act_move.c:	    for ( rch = to_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:hit:act_move.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:hit:hit:hit:hit:act_move.c:	if ( building->value[0] != ch->in_room->vnum )
hit:hit:hit:hit:hit:act_move.c:	pexit	= ch->in_room->exit[door];
hit:hit:hit:hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:hit:hit:act_move.c:	pexit = ch->in_room->exit[door];
hit:hit:hit:hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:hit:hit:act_move.c:  for ( fi = ch->in_room->flora; fi != NULL; fi = fi->next )
hit:hit:hit:hit:hit:act_move.c:    pexit = ch->in_room->exit[door];
hit:hit:hit:hit:hit:act_move.c:    &&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:hit:hit:act_move.c:    switch ( ch->position )
hit:hit:hit:hit:hit:act_move.c:	ch->position = POS_STANDING;
hit:hit:hit:hit:hit:act_move.c:    switch ( ch->position )
hit:hit:hit:hit:hit:act_move.c:	ch->position = POS_RESTING;
hit:hit:hit:hit:hit:act_move.c:	ch->position = POS_RESTING;
hit:hit:hit:hit:hit:act_move.c:    switch ( ch->position )
hit:hit:hit:hit:hit:act_move.c:	ch->position = POS_RESTING;
hit:hit:hit:hit:hit:act_move.c:    if ( ch->riding != NULL )
hit:hit:hit:hit:hit:act_move.c:    for ( rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:hit:act_move.c:	if ( rch->riding == mount )
hit:hit:hit:hit:hit:act_move.c:    if ( rch != NULL && rch->riding == mount )
hit:hit:hit:hit:hit:act_move.c:    ch->riding = mount;
hit:hit:hit:hit:hit:act_move.c:    switch ( ch->position )
hit:hit:hit:hit:hit:act_move.c:	ch->position = POS_SLEEPING;
hit:hit:hit:hit:hit:act_move.c:	if (ch->position != POS_SLEEPING)
hit:hit:hit:hit:hit:act_move.c:	ch->position = POS_RESTING;
hit:hit:hit:hit:hit:act_move.c:  ch->move_speed = MOVE_WALK;
hit:hit:hit:hit:hit:act_move.c:  ch->move_speed = MOVE_RUN;
hit:hit:hit:hit:hit:act_move.c:  ch->move_speed = MOVE_SNEAK;
hit:hit:hit:hit:hit:act_move.c:    if ( ch->riding == NULL )
hit:hit:hit:hit:hit:act_move.c:    act("You stop riding $N.", ch, ch->riding, NULL, NULL, NULL, TO_CHAR, SENSE_SIGHT );
hit:hit:hit:hit:hit:act_move.c:    act("$n stops riding $N.", ch, ch->riding, NULL, NULL, NULL, TO_ROOM, SENSE_SIGHT );
hit:hit:hit:hit:hit:act_move.c:    ch->riding = NULL;
hit:hit:hit:hit:hit:act_move.c:    for ( controls = ch->in_room->contents; controls != NULL; controls = controls->next_content )
hit:hit:hit:hit:hit:act_move.c:        in_room = ch->in_room;
hit:hit:hit:hit:hit:act_move.c:    for ( vch = in_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:hit:hit:act_move.c:    in_room = ch->in_room;
hit:hit:hit:hit:hit:act_move.c:    for ( vch = to_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:hit:hit:act_move.c:    for ( building = ch->in_room->contents; building != NULL; building = building->next_content )
hit:hit:hit:hit:hit:act_move.c:	REMOVE_BIT(ch->affected_by, AFF_HIDE);
hit:hit:hit:hit:hit:act_move.c:	SET_BIT(ch->affected_by, AFF_HIDE);
hit:hit:hit:hit:hit:act_move.c:    if (IS_SET(ch->affected_by, AFF_INVISIBLE) )
hit:hit:hit:hit:hit:act_move.c:        REMOVE_BIT   ( ch->affected_by, AFF_INVISIBLE	);
hit:hit:hit:hit:hit:act_obj.c:    if ( ch->carry_number + 1 > can_carry_n( ch ) )
hit:hit:hit:hit:hit:act_obj.c:    if ( ch->carry_weight + get_obj_weight( obj ) > can_carry_w( ch ) )
hit:hit:hit:hit:hit:act_obj.c:	    obj = get_obj_list( ch, arg1, ch->in_room->contents );
hit:hit:hit:hit:hit:act_obj.c:	    for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:act_obj.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:act_obj.c:	for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:act_obj.c:	obj_to_room( create_money( amount, coin ), ch->in_room, TRUE );
hit:hit:hit:hit:hit:act_obj.c:	obj_to_room( obj, ch->in_room, TRUE );
hit:hit:hit:hit:hit:act_obj.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:act_obj.c:		obj_to_room( obj, ch->in_room, TRUE );
hit:hit:hit:hit:hit:act_obj.c:    if ( !str_cmp( arg, "channel" ) && is_name( arg, ch->in_room->name ) )
hit:hit:hit:hit:hit:act_obj.c:    if ( !str_cmp( arg, "lake" ) && is_name( arg, ch->in_room->name ) )
hit:hit:hit:hit:hit:act_obj.c:    if ( !str_cmp( arg, "river" ) && is_name( arg, ch->in_room->name ) )
hit:hit:hit:hit:hit:act_obj.c:    if ( !str_cmp( arg, "stream" ) && is_name( arg, ch->in_room->name ) )
hit:hit:hit:hit:hit:act_obj.c:    if ( !str_cmp( arg, "waterfall" ) && is_name( arg, ch->in_room->name ) )
hit:hit:hit:hit:hit:act_obj.c:	if ( !IS_SET( ch->in_room->room_flags, ROOM_DRINKABLE_WATER )
hit:hit:hit:hit:hit:act_obj.c:    && IS_SET( ch->in_room->sector->flags, SECTOR_OUTDOORS ) )
hit:hit:hit:hit:hit:act_obj.c:      ch->in_room->water += obj->value[1];
hit:hit:hit:hit:hit:act_obj.c:    && IS_SET( ch->in_room->sector->flags, SECTOR_OUTDOORS ) )
hit:hit:hit:hit:hit:act_obj.c:	for ( obj = ch->in_room->contents; obj; obj = obj->next_content )
hit:hit:hit:hit:hit:act_obj.c:	&& ( !IS_SET( ch->in_room->room_flags, ROOM_DRINKABLE_WATER )
hit:hit:hit:hit:hit:act_obj.c:    && ch->pcdata->condition[COND_DRUNK] > 10
hit:hit:hit:hit:hit:act_obj.c:	ch->pcdata->condition[COND_THIRST] = 48;
hit:hit:hit:hit:hit:act_obj.c:	    ch->pcdata->condition[COND_THIRST] = 48;
hit:hit:hit:hit:hit:act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_DRUNK]  > 10 )
hit:hit:hit:hit:hit:act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_FULL]   > 40 )
hit:hit:hit:hit:hit:act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_THIRST] > 40 )
hit:hit:hit:hit:hit:act_obj.c:	    ch->pcdata->condition[COND_FULL] = UMIN( ch->pcdata->condition[COND_FULL], 48 );
hit:hit:hit:hit:hit:act_obj.c:	    ch->pcdata->condition[COND_THIRST] = UMIN( ch->pcdata->condition[COND_THIRST], 48 );
hit:hit:hit:hit:hit:act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_FULL] > 40 )
hit:hit:hit:hit:hit:act_obj.c:	    condition = ch->pcdata->condition[COND_FULL];
hit:hit:hit:hit:hit:act_obj.c:	    if ( condition == 0 && ch->pcdata->condition[COND_FULL] > 0 )
hit:hit:hit:hit:hit:act_obj.c:	    else if ( ch->pcdata->condition[COND_FULL] > 40 )
hit:hit:hit:hit:hit:act_obj.c:    && ch->wearing[*wear_info[location].dependency] == NULL )
hit:hit:hit:hit:hit:act_obj.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:hit:hit:hit:hit:act_obj.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:act_obj.c:    && ch->wearing[*wear_info[gn_wear_on_belt].dependency] == NULL )
hit:hit:hit:hit:hit:act_obj.c:    for ( obj = ch->wearing[gn_wear_on_belt]; obj != NULL; obj = obj->next_worn )
hit:hit:hit:hit:hit:act_obj.c:	  for ( vch = ch->in_room->people; vch != NULL; vch = vch_next )
hit:hit:hit:hit:hit:act_obj.c:	    vch_next	= vch->next_in_room;
hit:hit:hit:hit:hit:act_obj.c:	if ( ( obj = get_obj_list( ch, arg1, ch->in_room->contents ) ) == NULL )
hit:hit:hit:hit:hit:act_obj.c:/*        if ( IS_SET(ch->act, PLR_HOLYWALK) )
hit:hit:hit:hit:hit:act_obj.c:    && ( objfrom = get_obj_list( ch, arg2, ch->in_room->contents ) ) == NULL )
hit:hit:hit:hit:hit:act_obj.c:/*        if ( IS_SET(ch->act, PLR_HOLYWALK ) )
hit:hit:hit:hit:hit:act_obj.c:/*    if ( IS_SET(ch->act, PLR_HOLYWALK ) )
hit:hit:hit:hit:hit:act_obj.c:    if ( ch->predelay_info == NULL )
hit:hit:hit:hit:hit:act_obj.c:    type =  ch->predelay_info->number;
hit:hit:hit:hit:hit:act_obj.c:    victim = ch->predelay_info->victim1;
hit:hit:hit:hit:hit:act_obj.c:    obj = ch->predelay_info->obj1;
hit:hit:hit:hit:hit:act_obj.c:    objfrom = ch->predelay_info->obj2;
hit:hit:hit:hit:hit:act_obj.c:	|| obj->in_room != ch->in_room )
hit:hit:hit:hit:hit:act_obj.c:	|| objfrom->in_room != ch->in_room )
hit:hit:hit:hit:hit:act_obj.c:      || victim->in_room != ch->in_room
hit:hit:hit:hit:hit:act_obj.c:	sprintf( buf, "%s is a bloody thief!", ch->name );
hit:hit:hit:hit:hit:act_obj.c:    if ( ch->carry_number + 1 > can_carry_n( ch ) )
hit:hit:hit:hit:hit:act_obj.c:    if ( ch->carry_weight + get_obj_weight( obj ) > can_carry_w( ch ) )
hit:hit:hit:hit:hit:act_obj.c:	    obj_to_room( obj, ch->in_room, TRUE );
hit:hit:hit:hit:hit:act_obj.c:	obj_to_room( item, ch->in_room, TRUE );
hit:hit:hit:hit:hit:act_obj.c:	obj_to_room( item, ch->in_room, TRUE );
hit:hit:hit:hit:hit:act_wiz.c:	free_string( ch->pcdata->bamfin, MEM_PCDATA );
hit:hit:hit:hit:hit:act_wiz.c:	ch->pcdata->bamfin = str_dup( argument );
hit:hit:hit:hit:hit:act_wiz.c:    for ( rch = char_list; rch != NULL; rch = rch->next )
hit:hit:hit:hit:hit:act_wiz.c:	if ( !IS_NPC(rch) && !str_cmp( rch->name, name ) )
hit:hit:hit:hit:hit:act_wiz.c:    rch->next = char_list;
hit:hit:hit:hit:hit:act_wiz.c:	free_string( ch->pcdata->bamfout, MEM_PCDATA );
hit:hit:hit:hit:hit:act_wiz.c:	ch->pcdata->bamfout = str_dup( argument );
hit:hit:hit:hit:hit:act_wiz.c:	&&   d->character->in_room == ch->in_room )
hit:hit:hit:hit:hit:act_wiz.c:	location = ch->in_room;
hit:hit:hit:hit:hit:act_wiz.c:	&& !can_build( ( ch->desc->original != NULL ?
hit:hit:hit:hit:hit:act_wiz.c:	                 ch->desc->original : ch), victim->pIndexData->area ) )
hit:hit:hit:hit:hit:act_wiz.c:    original = ch->in_room;
hit:hit:hit:hit:hit:act_wiz.c:    for ( wch = char_list; wch != NULL; wch = wch->next )
hit:hit:hit:hit:hit:act_wiz.c:    if ( !IS_SET(ch->act, PLR_WIZINVIS) )
hit:hit:hit:hit:hit:act_wiz.c:	    (ch->pcdata != NULL && ch->pcdata->bamfout[0] != '\0')
hit:hit:hit:hit:hit:act_wiz.c:	    ? ch->pcdata->bamfout : "leaves in a swirling mist",
hit:hit:hit:hit:hit:act_wiz.c:    if ( !IS_SET(ch->act, PLR_WIZINVIS) )
hit:hit:hit:hit:hit:act_wiz.c:	    (ch->pcdata != NULL && ch->pcdata->bamfin[0] != '\0')
hit:hit:hit:hit:hit:act_wiz.c:	    ? ch->pcdata->bamfin : "appears in a swirling mist",
hit:hit:hit:hit:hit:act_wiz.c:    location = ( arg[0] == '\0' ) ? ch->in_room : find_location( ch, arg );
hit:hit:hit:hit:hit:act_wiz.c:    if ( ch->in_room != location && room_is_private( location )
hit:hit:hit:hit:hit:act_wiz.c:    for ( rch = location->people; rch; rch = rch->next_in_room )
hit:hit:hit:hit:hit:act_wiz.c:	one_argument( rch->name, buf );
hit:hit:hit:hit:hit:act_wiz.c:    sprintf( buf, "Reboot by %s.", ch->name );
hit:hit:hit:hit:hit:act_wiz.c:        sprintf( buf, "Reboot for code by %s.", ch->name );
hit:hit:hit:hit:hit:act_wiz.c:    sprintf( buf, "Shutdown by %s.", ch->name );
hit:hit:hit:hit:hit:act_wiz.c:	    if ( d->snoop_by == ch->desc )
hit:hit:hit:hit:hit:act_wiz.c:    if ( ch->desc != NULL )
hit:hit:hit:hit:hit:act_wiz.c:	for ( d = ch->desc->snoop_by; d != NULL; d = d->snoop_by )
hit:hit:hit:hit:hit:act_wiz.c:    victim->desc->snoop_by = ch->desc;
hit:hit:hit:hit:hit:act_wiz.c:    if ( ch->desc == NULL )
hit:hit:hit:hit:hit:act_wiz.c:    if ( ch->desc->original != NULL )
hit:hit:hit:hit:hit:act_wiz.c:    ch->desc->character = victim;
hit:hit:hit:hit:hit:act_wiz.c:    ch->desc->original  = ch;
hit:hit:hit:hit:hit:act_wiz.c:    victim->desc        = ch->desc;
hit:hit:hit:hit:hit:act_wiz.c:    ch->desc            = NULL;
hit:hit:hit:hit:hit:act_wiz.c:    ch->switched_into	= victim;
hit:hit:hit:hit:hit:act_wiz.c:    if ( ch->desc == NULL )
hit:hit:hit:hit:hit:act_wiz.c:    if ( ch->desc->original == NULL )
hit:hit:hit:hit:hit:act_wiz.c:    ch->desc->character       = ch->desc->original;
hit:hit:hit:hit:hit:act_wiz.c:    ch->desc->original        = NULL;
hit:hit:hit:hit:hit:act_wiz.c:    ch->desc->character->desc = ch->desc; 
hit:hit:hit:hit:hit:act_wiz.c:    ch->desc                  = NULL;
hit:hit:hit:hit:hit:act_wiz.c:    ch->switched_into	      = NULL;
hit:hit:hit:hit:hit:act_wiz.c:    char_to_room( victim, ch->in_room, TRUE );
hit:hit:hit:hit:hit:act_wiz.c:	obj_to_room( obj, ch->in_room, TRUE );
hit:hit:hit:hit:hit:act_wiz.c:	for ( victim = ch->in_room->people; victim != NULL; victim = vnext )
hit:hit:hit:hit:hit:act_wiz.c:	for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:act_wiz.c:    for ( rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:hit:act_wiz.c:        sprintf( log_buf, "Log: %s changed %s's password.",ch->name,victim->name );
hit:hit:hit:hit:hit:act_wiz.c:        sprintf( log_buf, "%s changed %s's password.",ch->name,victim->name );
hit:hit:hit:hit:hit:act_wiz.c:    sprintf( log_buf, "%s: %s %s %s",ch->name,arg1,arg2,arg3 );
hit:hit:hit:hit:hit:act_wiz.c:    if ( !can_build( ch, ch->in_room->area ) )
hit:hit:hit:hit:hit:act_wiz.c:    location = ch->in_room;
hit:hit:hit:hit:hit:act_wiz.c:      s = sector_lookup( arg3, ch->in_room->area );
hit:hit:hit:hit:hit:act_wiz.c:	    vch_next = vch->next;
hit:hit:hit:hit:hit:act_wiz.c:		if (IS_SET(vch->act, PLR_AFK)) {
hit:hit:hit:hit:hit:act_wiz.c:		    REMOVE_BIT(vch->act, PLR_AFK);
hit:hit:hit:hit:hit:act_wiz.c:		if (was_afk) SET_BIT(vch->act, PLR_AFK);
hit:hit:hit:hit:hit:act_wiz.c:    if ( IS_SET(ch->act, PLR_WIZINVIS) )
hit:hit:hit:hit:hit:act_wiz.c:	REMOVE_BIT(ch->act, PLR_WIZINVIS);
hit:hit:hit:hit:hit:act_wiz.c:	SET_BIT(ch->act, PLR_WIZINVIS);
hit:hit:hit:hit:hit:act_wiz.c:    if (IS_SET(ch->act, PLR_HOLYLIGHT)) {
hit:hit:hit:hit:hit:act_wiz.c:        REMOVE_BIT(ch->act, PLR_HOLYLIGHT);
hit:hit:hit:hit:hit:act_wiz.c:        SET_BIT(ch->act, PLR_HOLYLIGHT);
hit:hit:hit:hit:hit:act_wiz.c:	REMOVE_BIT(ch->act, PLR_HOLYSPEECH);
hit:hit:hit:hit:hit:act_wiz.c:	SET_BIT(ch->act, PLR_HOLYSPEECH);
hit:hit:hit:hit:hit:act_wiz.c:    if (IS_SET(ch->act, PLR_HOLYNAME)) {
hit:hit:hit:hit:hit:act_wiz.c:        REMOVE_BIT(ch->act, PLR_HOLYNAME);
hit:hit:hit:hit:hit:act_wiz.c:        SET_BIT(ch->act, PLR_HOLYNAME);
hit:hit:hit:hit:hit:act_wiz.c:    if (IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:hit:act_wiz.c:        REMOVE_BIT(ch->act, PLR_HOLYWALK);
hit:hit:hit:hit:hit:act_wiz.c:        SET_BIT(ch->act, PLR_HOLYWALK);
hit:hit:hit:hit:hit:act_wiz.c:    if (IS_SET(ch->act, PLR_HOLYVNUM)) {
hit:hit:hit:hit:hit:act_wiz.c:        REMOVE_BIT(ch->act, PLR_HOLYVNUM);
hit:hit:hit:hit:hit:act_wiz.c:        SET_BIT(ch->act, PLR_HOLYVNUM);
hit:hit:hit:hit:hit:act_wiz.c:	    IS_SET(ch->act, PLR_HOLYLIGHT) ? "ON" : "OFF");
hit:hit:hit:hit:hit:act_wiz.c:	    IS_SET(ch->act, PLR_HOLYNAME) ? "ON" : "OFF");
hit:hit:hit:hit:hit:act_wiz.c:	    IS_SET(ch->act, PLR_HOLYWALK) ? "ON" : "OFF");
hit:hit:hit:hit:hit:act_wiz.c:	    IS_SET(ch->act, PLR_HOLYVNUM) ? "ON" : "OFF");
hit:hit:hit:hit:hit:change.c:  if ( ch->dynamic_descr )
hit:hit:hit:hit:hit:change.c:    free_string( ch->dynamic_descr, MEM_GENERAL );
hit:hit:hit:hit:hit:change.c:  ch->dynamic_descr = NULL;
hit:hit:hit:hit:hit:change.c:        ch->dynamic_descr = str_dup( c );
hit:hit:hit:hit:hit:change.c:        send_to_char( ch->dynamic_descr, ch );
hit:hit:hit:hit:hit:change.c:      ch->language = i; 
hit:hit:hit:hit:hit:character:act_wiz.c:	&&   d->character->in_room == ch->in_room )
hit:hit:hit:hit:hit:character:act_wiz.c:	    if ( d->snoop_by == ch->desc )
hit:hit:hit:hit:hit:character:act_wiz.c:	for ( d = ch->desc->snoop_by; d != NULL; d = d->snoop_by )
hit:hit:hit:hit:hit:character:comm.c:	sprintf( log_buf, "%s@%s has connected.", ch->name, d->host );
hit:hit:hit:hit:hit:character:comm.c:	sprintf( log_buf, "%s@%s has entered the game.", ch->name, d->host );
hit:hit:hit:hit:hit:character:comm.c:	  ch->name, d->host );
hit:hit:hit:hit:hit:character:comm.c:	&& !str_cmp( d->character->name, ch->name ) )
hit:hit:hit:hit:hit:character:comm.c:		d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
hit:hit:hit:hit:hit:character:comm.c:    sprintf( log_buf, "%s@%s reconnected.", ch->name, d->host );
hit:hit:hit:hit:hit:character:handler.c:    for ( paf_old = ch->affected; paf_old != NULL; paf_old = paf_old->next )
hit:hit:hit:hit:hit:character:olc.c:	for ( ed = ch->in_room->extra_descr; ed != NULL; ed = ed->next )
hit:hit:hit:hit:hit:character:olc.c:	ed->description = str_dup_tab( ch->pnote->text, TRUE );
hit:hit:hit:hit:hit:character:olc.c:	for ( ed = ch->in_room->extra_descr; ed != NULL; ed = ed->next )
hit:hit:hit:hit:hit:character:olc.c:	ch->pnote->text = str_dup_tab( ed->description, FALSE );
hit:hit:hit:hit:hit:character:olc.c:		pAppend->next = ch->in_room->area->reset_first;
hit:hit:hit:hit:hit:character:olc.c:    for ( ed = ch->in_room->extra_descr; ed != NULL; ed = ed->next )
hit:hit:hit:hit:hit:character:olc.c:	ed->next = ch->in_room->extra_descr;
hit:hit:hit:hit:hit:character:olc.c:	    ch->in_room->extra_descr = ed->next;
hit:hit:hit:hit:hit:comm.c:	sprintf( log_buf, "Closing link to %s.", ch->name );
hit:hit:hit:hit:hit:comm.c:	    ch->desc = NULL;
hit:hit:hit:hit:hit:comm.c:	if ( IS_SET(ch->act, PLR_BLANK) )
hit:hit:hit:hit:hit:comm.c:	if ( IS_SET(ch->act, PLR_TELNET_GA) )
hit:hit:hit:hit:hit:comm.c:   if( ch->prompt == NULL )
hit:hit:hit:hit:hit:comm.c:   else if ( ch->prompt[0] == '\0' )
hit:hit:hit:hit:hit:comm.c:            sprintf( buf2, "%d", ch->hit[HIT_LOC_BODY] );
hit:hit:hit:hit:hit:comm.c:            sprintf( buf2, "%d", ch->max_hit );
hit:hit:hit:hit:hit:comm.c:            if ( IS_IMMORTAL(ch) && IS_SET(ch->act, PLR_WIZINVIS) )
hit:hit:hit:hit:hit:comm.c:            sprintf( buf2, "%d", ch->mana );
hit:hit:hit:hit:hit:comm.c:            sprintf( buf2, "%d", ch->max_mana );
hit:hit:hit:hit:hit:comm.c:            sprintf( buf2, "%d", ch->move );
hit:hit:hit:hit:hit:comm.c:            sprintf( buf2, "%d", ch->max_move );
hit:hit:hit:hit:hit:comm.c:            if( ch->in_room != NULL )
hit:hit:hit:hit:hit:comm.c:		((!IS_NPC(ch) && IS_SET(ch->act,PLR_HOLYLIGHT)) ||
hit:hit:hit:hit:hit:comm.c:		 (!IS_AFFECTED(ch,AFF_BLIND) && !room_is_dark( ch->in_room, ch ) != VISION_NORMAL))
hit:hit:hit:hit:hit:comm.c:		? ch->in_room->name : "darkness");
hit:hit:hit:hit:hit:comm.c:            if( ch->in_room != NULL )
hit:hit:hit:hit:hit:comm.c:               sprintf( buf2, "%s", ch->in_room->name );
hit:hit:hit:hit:hit:comm.c:            if( IS_IMMORTAL( ch ) && ch->in_room != NULL )
hit:hit:hit:hit:hit:comm.c:               sprintf( buf2, "%d", ch->in_room->vnum );
hit:hit:hit:hit:hit:comm.c:            if( IS_IMMORTAL( ch ) && ch->in_room != NULL )
hit:hit:hit:hit:hit:comm.c:               sprintf( buf2, "%s", ch->in_room->area->name );
hit:hit:hit:hit:hit:comm.c:   write_to_buffer( ch->desc, buf, point - buf );
hit:hit:hit:hit:hit:comm.c:	if ( strcmp( crypt( argument, ch->pcdata->pwd ), ch->pcdata->pwd ) )
hit:hit:hit:hit:hit:comm.c:	if ( check_reconnect( d, ch->name, TRUE ) )
hit:hit:hit:hit:hit:comm.c:	if ( IS_SET( ch->act, PLR_REJECTED ) )
hit:hit:hit:hit:hit:comm.c:		ch->pcdata->rejected );
hit:hit:hit:hit:hit:comm.c:		REJECTED_DIR, capitalize( ch->name ) );
hit:hit:hit:hit:hit:comm.c:	if (IS_SET(ch->act, PLR_AFK))
hit:hit:hit:hit:hit:comm.c:	    REMOVE_BIT(ch->act, PLR_AFK);
hit:hit:hit:hit:hit:comm.c:	sprintf( log_buf, "%s@%s has connected.", ch->name, d->host );
hit:hit:hit:hit:hit:comm.c:	sprintf( buf, "\n\rWelcome back, %s.\n\r", ch->name );
hit:hit:hit:hit:hit:comm.c:	if ( IS_SET( ch->act, PLR_UNAPPROVED ) )
hit:hit:hit:hit:hit:comm.c:	ch->next	= char_list;
hit:hit:hit:hit:hit:comm.c:	if ( ch->level == 0 )
hit:hit:hit:hit:hit:comm.c:	    ch->perm_stat_phys_str
hit:hit:hit:hit:hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_phys_str_mod;
hit:hit:hit:hit:hit:comm.c:	    ch->perm_stat_phys_dex
hit:hit:hit:hit:hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_phys_dex_mod;
hit:hit:hit:hit:hit:comm.c:	    ch->perm_stat_phys_tou
hit:hit:hit:hit:hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_phys_tou_mod;
hit:hit:hit:hit:hit:comm.c:	    ch->perm_stat_phys_qui
hit:hit:hit:hit:hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_phys_qui_mod;
hit:hit:hit:hit:hit:comm.c:	    ch->perm_stat_ment_int
hit:hit:hit:hit:hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_ment_int_mod;
hit:hit:hit:hit:hit:comm.c:	    ch->perm_offense = 10;
hit:hit:hit:hit:hit:comm.c:	    ch->level	= 1;
hit:hit:hit:hit:hit:comm.c:	    ch->max_hit = race_array[ch->race]->hits_base
hit:hit:hit:hit:hit:comm.c:    + dice( race_array[ch->race]->hitnodice, race_array[ch->race]->hitsizedice );
hit:hit:hit:hit:hit:comm.c:	    ch->hit[HIT_LOC_BODY]	= ch->max_hit;
hit:hit:hit:hit:hit:comm.c:	    ch->max_mana = race_array[ch->race]->mana;
hit:hit:hit:hit:hit:comm.c:	    ch->mana	= ch->max_mana;
hit:hit:hit:hit:hit:comm.c:	    ch->max_move = race_array[ch->race]->move;
hit:hit:hit:hit:hit:comm.c:	    ch->move	= ch->max_move;
hit:hit:hit:hit:hit:comm.c:	    ch->vision_min = race_array[ch->race]->vision_min;
hit:hit:hit:hit:hit:comm.c:	    ch->vision_max = race_array[ch->race]->vision_max;
hit:hit:hit:hit:hit:comm.c:	    ch->vision_range = race_array[ch->race]->vision_range;
hit:hit:hit:hit:hit:comm.c:	    ch->prompt = NULL;
hit:hit:hit:hit:hit:comm.c:	    ch->height = race_array[ch->race]->height_base
hit:hit:hit:hit:hit:comm.c:                         + dice( race_array[ch->race]->heightnodice,
hit:hit:hit:hit:hit:comm.c:                                 race_array[ch->race]->heightsizedice );
hit:hit:hit:hit:hit:comm.c:	    ch->weight = race_array[ch->race]->weight_base
hit:hit:hit:hit:hit:comm.c:                         + dice( race_array[ch->race]->weightnodice,
hit:hit:hit:hit:hit:comm.c:                                 race_array[ch->race]->weightsizedice );
hit:hit:hit:hit:hit:comm.c:            ch->pcdata->learned[gsn_common] = 100;
hit:hit:hit:hit:hit:comm.c:	else if ( ch->in_room != NULL )
hit:hit:hit:hit:hit:comm.c:	    char_to_room( ch, ch->in_room, FALSE );
hit:hit:hit:hit:hit:comm.c:	sprintf( log_buf, "%s@%s has entered the game.", ch->name, d->host );
hit:hit:hit:hit:hit:comm.c:	if ( IS_SET(ch->act, PLR_DENY) )
hit:hit:hit:hit:hit:comm.c:        if (IS_SET(ch->act, PLR_DEAD) )
hit:hit:hit:hit:hit:comm.c:	pwdnew = crypt( argument, ch->name );
hit:hit:hit:hit:hit:comm.c:	free_string( ch->pcdata->pwd, MEM_PCDATA );
hit:hit:hit:hit:hit:comm.c:	ch->pcdata->pwd	= str_dup( pwdnew );
hit:hit:hit:hit:hit:comm.c:	if ( strcmp( crypt( argument, ch->pcdata->pwd ), ch->pcdata->pwd ) )
hit:hit:hit:hit:hit:comm.c:	case 'm': case 'M': ch->sex = SEX_MALE;    break;
hit:hit:hit:hit:hit:comm.c:	case 'f': case 'F': ch->sex = SEX_FEMALE;  break;
hit:hit:hit:hit:hit:comm.c:		ch->race = iRace;
hit:hit:hit:hit:hit:comm.c:	    if ( race_array[ch->race]->classes[iClass] == TRUE )
hit:hit:hit:hit:hit:comm.c:		ch->class = iClass;
hit:hit:hit:hit:hit:comm.c:	if ( iClass == MAX_CLASS || race_array[ch->race]->classes[iClass] == FALSE )
hit:hit:hit:hit:hit:comm.c:	ch->long_descr = str_dup( argument );
hit:hit:hit:hit:hit:comm.c:	ch->short_descr = str_dup( argument );
hit:hit:hit:hit:hit:comm.c:	ch->namelist = str_dup( argument );
hit:hit:hit:hit:hit:comm.c:	    strcpy( buf, ch->description );
hit:hit:hit:hit:hit:comm.c:	    free_string( ch->description, MEM_PCDATA );
hit:hit:hit:hit:hit:comm.c:	    ch->description = str_dup( buf );
hit:hit:hit:hit:hit:comm.c:	ch->pcdata->email_address = str_dup( argument );
hit:hit:hit:hit:hit:comm.c:	ch->pcdata->rejected = str_dup( "" );
hit:hit:hit:hit:hit:comm.c:	SET_BIT( ch->act, PLR_UNAPPROVED );
hit:hit:hit:hit:hit:comm.c:        SET_BIT( ch->act, PLR_HOLYLIGHT );
hit:hit:hit:hit:hit:comm.c:	  ch->name, d->host );
hit:hit:hit:hit:hit:comm.c:    for ( ch = char_list; ch != NULL; ch = ch->next )
hit:hit:hit:hit:hit:comm.c:	&& ( ch->name && !str_cmp( ch->name, name ) )
hit:hit:hit:hit:hit:comm.c:	&& IS_SET( ch->act, PLR_REVIEWING ) )
hit:hit:hit:hit:hit:comm.c:    for ( ch = char_list; ch != NULL; ch = ch->next )
hit:hit:hit:hit:hit:comm.c:	&& ( !fConn || ch->desc == NULL )
hit:hit:hit:hit:hit:comm.c:	&& !str_cmp( d->character->name, ch->name ) )
hit:hit:hit:hit:hit:comm.c:		d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
hit:hit:hit:hit:hit:comm.c:		if ( ch->switched_into != NULL )
hit:hit:hit:hit:hit:comm.c:		    do_return( ch->switched_into, "" );
hit:hit:hit:hit:hit:comm.c:    if ( ch->desc != NULL )
hit:hit:hit:hit:hit:comm.c:	free_descriptor( ch->desc );
hit:hit:hit:hit:hit:comm.c:    ch->desc         = d;
hit:hit:hit:hit:hit:comm.c:    ch->timer        = 0;
hit:hit:hit:hit:hit:comm.c:    sprintf( log_buf, "%s@%s reconnected.", ch->name, d->host );
hit:hit:hit:hit:hit:comm.c:    if (IS_SET(ch->act, PLR_AFK)) 
hit:hit:hit:hit:hit:comm.c:	REMOVE_BIT(ch->act, PLR_AFK);
hit:hit:hit:hit:hit:comm.c:    ||   ch->desc == NULL
hit:hit:hit:hit:hit:comm.c:    ||   ch->desc->connected != CON_PLAYING
hit:hit:hit:hit:hit:comm.c:    ||   ch->was_in_room == NULL 
hit:hit:hit:hit:hit:comm.c:    ||   ch->in_room != get_room_index( ROOM_VNUM_LIMBO ) )
hit:hit:hit:hit:hit:comm.c:    ch->timer = 0;
hit:hit:hit:hit:hit:comm.c:    char_to_room( ch, ch->was_in_room, FALSE );
hit:hit:hit:hit:hit:comm.c:    ch->was_in_room	= NULL;
hit:hit:hit:hit:hit:comm.c:    if ( txt == NULL || ch->desc == NULL )
hit:hit:hit:hit:hit:comm.c:    if ( ch->desc->showstr_point )
hit:hit:hit:hit:hit:comm.c:	write_to_buffer( ch->desc, txt, strlen( txt ) );
hit:hit:hit:hit:hit:comm.c:    ch->desc->showstr_head = alloc_mem( strlen( txt ) + 1 );
hit:hit:hit:hit:hit:comm.c:    strcpy( ch->desc->showstr_head, txt );
hit:hit:hit:hit:hit:comm.c:    ch->desc->showstr_point = ch->desc->showstr_head;
hit:hit:hit:hit:hit:comm.c:    show_string( ch->desc, "" );
hit:hit:hit:hit:hit:comm.c:    to = ch->in_room->people;
hit:hit:hit:hit:hit:comm.c:	to = vch->in_room->people;
hit:hit:hit:hit:hit:db.c:  pArea = ch->in_room->area;
hit:hit:hit:hit:hit:db.c:    pArea = ch->in_room->area;
hit:hit:hit:hit:hit:db.c:    ch->in_room->area->vnum_final = vnum;
hit:hit:hit:hit:hit:db.c:    ch->next_fighting		= NULL;
hit:hit:hit:hit:hit:db.c:    ch->name			= &str_empty[0];
hit:hit:hit:hit:hit:db.c:    ch->short_descr		= &str_empty[0];
hit:hit:hit:hit:hit:db.c:    ch->long_descr		= &str_empty[0];
hit:hit:hit:hit:hit:db.c:    ch->dynamic_descr		= NULL;
hit:hit:hit:hit:hit:db.c:    ch->description		= &str_empty[0];
hit:hit:hit:hit:hit:db.c:    ch->prompt			= NULL;
hit:hit:hit:hit:hit:db.c:    ch->predelay_time		= 0;
hit:hit:hit:hit:hit:db.c:    ch->predelay_info		= NULL;
hit:hit:hit:hit:hit:db.c:    ch->position		= POS_STANDING;
hit:hit:hit:hit:hit:db.c:    ch->hit[HIT_LOC_BODY]	= 20;
hit:hit:hit:hit:hit:db.c:    ch->max_hit			= 20;
hit:hit:hit:hit:hit:db.c:    ch->mana			= 100;
hit:hit:hit:hit:hit:db.c:    ch->max_mana		= 100;
hit:hit:hit:hit:hit:db.c:    ch->move			= 100;
hit:hit:hit:hit:hit:db.c:    ch->max_move		= 100;
hit:hit:hit:hit:hit:db.c:    ch->perm_stat_phys_str	= 40;
hit:hit:hit:hit:hit:db.c:    ch->perm_stat_phys_dex	= 40;
hit:hit:hit:hit:hit:db.c:    ch->perm_stat_phys_tou	= 40;
hit:hit:hit:hit:hit:db.c:    ch->perm_stat_phys_qui	= 40;
hit:hit:hit:hit:hit:db.c:    ch->perm_stat_ment_int	= 40;
hit:hit:hit:hit:hit:db.c:    ch->pReset			= NULL;
hit:hit:hit:hit:hit:db.c:    ch->riding			= NULL;
hit:hit:hit:hit:hit:db.c:    ch->switched_into		= NULL;
hit:hit:hit:hit:hit:db.c:    ch->language		= 0;
hit:hit:hit:hit:hit:db.c:    ch->move_speed		= MOVE_WALK;
hit:hit:hit:hit:hit:db.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:db.c:    for ( paf = ch->affected; paf != NULL; paf = paf_next )
hit:hit:hit:hit:hit:db.c:    free_string( ch->name, MEM_MOB_NAME_FREE_CHAR );
hit:hit:hit:hit:hit:db.c:    free_string( ch->namelist, MEM_MOB_NAMELIST_FREE_CHAR );
hit:hit:hit:hit:hit:db.c:    free_string( ch->short_descr, MEM_MOB_SHORT_DESCR_FREE_CHAR );
hit:hit:hit:hit:hit:db.c:    free_string( ch->long_descr, MEM_MOB_LONG_DESCR_FREE_CHAR );
hit:hit:hit:hit:hit:db.c:    free_string( ch->description, MEM_MOB_DESCRIPTION_FREE_CHAR );
hit:hit:hit:hit:hit:db.c:    free_string( ch->spec_fun_name, MEM_MOB_SPEC_FUN_NAME_FREE_CHAR );
hit:hit:hit:hit:hit:db.c:    free_string( ch->prompt, MEM_GENERAL );
hit:hit:hit:hit:hit:db.c:    free_predelay( ch->predelay_info );
hit:hit:hit:hit:hit:db.c:    if ( ch->pcdata != NULL )
hit:hit:hit:hit:hit:db.c:	free_string( ch->pcdata->pwd, MEM_PCDATA );
hit:hit:hit:hit:hit:db.c:	free_string( ch->pcdata->bamfin, MEM_PCDATA );
hit:hit:hit:hit:hit:db.c:	free_string( ch->pcdata->bamfout, MEM_PCDATA );
hit:hit:hit:hit:hit:db.c:	free_string( ch->pcdata->email_address, MEM_PCDATA );
hit:hit:hit:hit:hit:db.c:	free_string( ch->pcdata->rejected, MEM_PCDATA );
hit:hit:hit:hit:hit:db.c:	ch->pcdata->next = pcdata_free;
hit:hit:hit:hit:hit:db.c:	pcdata_free      = ch->pcdata;
hit:hit:hit:hit:hit:db.c:    ch->next	     = char_free;
hit:hit:hit:hit:hit:emote.c:  if ( ach->leader != NULL ) 
hit:hit:hit:hit:hit:emote.c:    ach = ach->leader;
hit:hit:hit:hit:hit:emote.c:  if ( bch->leader != NULL ) 
hit:hit:hit:hit:hit:emote.c:    bch = bch->leader;
hit:hit:hit:hit:hit:emote.c:  for (vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room) {
hit:hit:hit:hit:hit:emote.c:    vch->leader=NULL;
hit:hit:hit:hit:hit:emote.c:	vch->leader=ch;
hit:hit:hit:hit:hit:emote.c:  for (vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room) {              
hit:hit:hit:hit:hit:emote.c:      if (vch->leader==ch) {
hit:hit:hit:hit:hit:emote.c:	  wch->leader = ch;
hit:hit:hit:hit:hit:emote.c:	  wch->leader = ch;
hit:hit:hit:hit:hit:emote.c:	strcat(buf, ((vch == wch) ? "you" : him_her[wch->sex]));
hit:hit:hit:hit:hit:emote.c:          wch->leader = ch;
hit:hit:hit:hit:hit:emote.c:        strcat(buf, ((vch == wch) ? "your" : his_her[wch->sex]));
hit:hit:hit:hit:hit:emote.c:          wch->leader = ch;
hit:hit:hit:hit:hit:emote.c:        strcat(buf, ((vch == wch) ? "you" : he_she[wch->sex]));
hit:hit:hit:hit:hit:emote.orig:  if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_NO_EMOTE) )
hit:hit:hit:hit:hit:emote.orig:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:hit:hit:emote.orig:		      strcat( buf, him_her[wch->sex] );
hit:hit:hit:hit:hit:emote.orig:		      strcat( buf, his_her[wch->sex] );
hit:hit:hit:hit:hit:emote.orig:		      strcat( buf, he_she[wch->sex] );
hit:hit:hit:hit:hit:fight.c:	combat_next = ch->next_fighting;
hit:hit:hit:hit:hit:fight.c:	if ( ( victim = ch->fighting ) == NULL || ch->in_room == NULL )
hit:hit:hit:hit:hit:fight.c:      if ( --ch->strike_rank < 0 )
hit:hit:hit:hit:hit:fight.c:	if ( IS_AWAKE(ch) && ch->in_room == victim->in_room )
hit:hit:hit:hit:hit:fight.c:	ch->strike_rank = calc_strike_rank( ch );
hit:hit:hit:hit:hit:fight.c:	if ( ( victim = ch->fighting ) == NULL )
hit:hit:hit:hit:hit:fight.c:	&& --ch->strike_rank_2 < 0 )
hit:hit:hit:hit:hit:fight.c:	    if ( IS_AWAKE(ch) && ch->in_room == victim->in_room )
hit:hit:hit:hit:hit:fight.c:	    ch->strike_rank_2 = calc_strike_rank( ch ) + 100
hit:hit:hit:hit:hit:fight.c:	    if ( ( victim = ch->fighting ) == NULL )
hit:hit:hit:hit:hit:fight.c:	for ( rch = ch->in_room->people; rch != NULL; rch = rch_next )
hit:hit:hit:hit:hit:fight.c:	    rch_next = rch->next_in_room;
hit:hit:hit:hit:hit:fight.c:	    if ( IS_AWAKE(rch) && rch->fighting == NULL )
hit:hit:hit:hit:hit:fight.c:    if ( victim->position == POS_DEAD || ch->in_room != victim->in_room )
hit:hit:hit:hit:hit:fight.c:    attacker_roll = ch->perm_offense + ch->mod_offense;
hit:hit:hit:hit:hit:fight.c:	if ( dice(1,100) > ch->perm_offense && !number_bits( 5 ) )
hit:hit:hit:hit:hit:fight.c:	    ch->perm_offense++;
hit:hit:hit:hit:hit:fight.c:	dam = dice( ch->damnodice, ch->damsizedice );
hit:hit:hit:hit:hit:fight.c:	    dam = dam + ch->damplus;
hit:hit:hit:hit:hit:fight.c:	    dam += ch->damplus;
hit:hit:hit:hit:hit:fight.c:	    dam += dice( ch->damnodice, ch->damsizedice ) + ch->damplus;
hit:hit:hit:hit:hit:fight.c:    if ( victim->position == POS_DEAD || ch->in_room != victim->in_room )
hit:hit:hit:hit:hit:fight.c:    attacker_roll = ch->perm_offense + ch->mod_offense;
hit:hit:hit:hit:hit:fight.c:	if ( dice(1,100) > ch->pcdata->learned[gsn_dual_wield]
hit:hit:hit:hit:hit:fight.c:	    ch->pcdata->learned[gsn_dual_wield]++;
hit:hit:hit:hit:hit:fight.c:    if ( !IS_NPC(ch) && ch->pcdata->learned[gsn_enhanced_damage] > 0 )
hit:hit:hit:hit:hit:fight.c:	dam += dam * ch->pcdata->learned[gsn_enhanced_damage] / 100;
hit:hit:hit:hit:hit:fight.c:	    REMOVE_BIT( ch->affected_by, AFF_INVISIBLE );
hit:hit:hit:hit:hit:fight.c:	    if ( IS_NPC(ch) && number_percent( ) < ch->level / 2 )
hit:hit:hit:hit:hit:fight.c:	    if ( IS_NPC(ch) && number_percent( ) < ch->level / 2 )
hit:hit:hit:hit:hit:fight.c:		(IS_NPC(ch) ? ch->short_descr : ch->name),
hit:hit:hit:hit:hit:fight.c:  if ( ch->fighting != NULL )
hit:hit:hit:hit:hit:fight.c:    if ( ch->desc != NULL
hit:hit:hit:hit:hit:fight.c:    && ch->desc->original != NULL 
hit:hit:hit:hit:hit:fight.c:    && IS_SET( ch->desc->original->act, PLR_PEACEFUL ) )
hit:hit:hit:hit:hit:fight.c:  else if ( IS_SET( ch->act, PLR_PEACEFUL ) )
hit:hit:hit:hit:hit:fight.c:    if ( ch->fighting != NULL )
hit:hit:hit:hit:hit:fight.c:    ch->fighting = victim;
hit:hit:hit:hit:hit:fight.c:    ch->next_fighting = combat_list;
hit:hit:hit:hit:hit:fight.c:    for ( fch = char_list; fch != NULL; fch = fch->next )
hit:hit:hit:hit:hit:fight.c:	    fch->fighting	= NULL;
hit:hit:hit:hit:hit:fight.c:	if ( fBoth && fch->fighting == ch )
hit:hit:hit:hit:hit:fight.c:    combat_list = ch->next_fighting;
hit:hit:hit:hit:hit:fight.c:    for ( fch = combat_list; fch != NULL; fch = fch->next_fighting )
hit:hit:hit:hit:hit:fight.c:	if ( fch->next_fighting == ch )
hit:hit:hit:hit:hit:fight.c:	    fch->next_fighting = ch->next_fighting;
hit:hit:hit:hit:hit:fight.c:    ch->next_fighting = NULL;
hit:hit:hit:hit:hit:fight.c:	name		= ch->short_descr;
hit:hit:hit:hit:hit:fight.c:    if ( IS_NPC( ch ) && ( pMobIndex = ch->pIndexData ) != NULL )
hit:hit:hit:hit:hit:fight.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:fight.c:    obj_to_room( corpse, ch->in_room, TRUE );
hit:hit:hit:hit:hit:fight.c:    was_in_room = ch->in_room;
hit:hit:hit:hit:hit:fight.c:	    ch->in_room = pexit->to_room;
hit:hit:hit:hit:hit:fight.c:    ch->in_room = was_in_room;
hit:hit:hit:hit:hit:fight.c:    lch = (ch->leader != NULL) ? ch->leader : ch;
hit:hit:hit:hit:hit:fight.c:    for ( gch = ch->in_room->people; gch != NULL; gch = gch->next_in_room )
hit:hit:hit:hit:hit:fight.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:fight.c:		obj_to_room( obj, ch->in_room, TRUE );
hit:hit:hit:hit:hit:fight.c:  if ( IS_AFFECTED(ch, AFF_CHARM) && ch->master == victim )
hit:hit:hit:hit:hit:fight.c:  if ( ch->fighting != NULL )
hit:hit:hit:hit:hit:fight.c:    if ( ch->fighting == victim )
hit:hit:hit:hit:hit:fight.c:    ch->fighting = victim;
hit:hit:hit:hit:hit:fight.c:    if ( arg[0] == '\0' && ch->fighting == NULL )
hit:hit:hit:hit:hit:fight.c:	victim = ch->fighting;
hit:hit:hit:hit:hit:fight.c:	if ( get_skill( ch, gsn_bash ) < ch->perm_stat_phys_str )
hit:hit:hit:hit:hit:fight.c:	ch->position = POS_RESTING;
hit:hit:hit:hit:hit:fight.c:    if ( ch->position < POS_STANDING )
hit:hit:hit:hit:hit:fight.c:    was_in = ch->in_room;
hit:hit:hit:hit:hit:fight.c:	if ( ( now_in = ch->in_room ) == was_in )
hit:hit:hit:hit:hit:fight.c:	ch->in_room = was_in;
hit:hit:hit:hit:hit:fight.c:	ch->in_room = now_in;
hit:hit:hit:hit:hit:fight.c:    if ( ch->fighting == victim )
hit:hit:hit:hit:hit:fight.c:    if ( arg[0] == '\0' && ch->fighting == NULL )
hit:hit:hit:hit:hit:fight.c:	victim = ch->fighting;
hit:hit:hit:hit:hit:fight.c:    if ( ( victim = ch->fighting ) == NULL )
hit:hit:hit:hit:hit:fight.c:	act("$n attempted to disarm you.", ch, ch->fighting, NULL, NULL, NULL, TO_VICT, SENSE_SIGHT );
hit:hit:hit:hit:hit:fight.c:	act("$N maintained their grip on their weapon.", ch, ch->fighting, NULL, NULL, NULL, TO_CHAR, SENSE_SIGHT|SENSE_TOUCH );
hit:hit:hit:hit:hit:fight.c:    if ( !IS_NPC(victim) && victim->level >= ch->level )
hit:hit:hit:hit:hit:fight.c:  if ( ch->in_room == NULL )
hit:hit:hit:hit:hit:fight.c:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:hit:hit:fight.c:    if ( vch->fighting == ch )
hit:hit:hit:hit:hit:fight.c:  if ( i == 0 && ch->fighting != NULL )
hit:hit:hit:hit:hit:fileio.c:            ch->in_room ? ch->in_room->vnum : 0, ch->name, str );
hit:hit:hit:hit:hit:flora.c:  for ( fi = ch->in_room->flora; fi != NULL; fi = fi->next )
hit:hit:hit:hit:hit:flora.c:    write_environment_area( ch->in_room->area );
hit:hit:hit:hit:hit:flora.c:    if ( ch->in_room->flora == NULL )
hit:hit:hit:hit:hit:flora.c:    update_flora( ch->in_room );
hit:hit:hit:hit:hit:flora.c:    for ( fi = ch->in_room->flora; fi != NULL; fi = fi->next )
hit:hit:hit:hit:hit:flora.c:    fi->next = ch->in_room->flora;
hit:hit:hit:hit:hit:flora.c:    ch->in_room->flora = fi;
hit:hit:hit:hit:hit:flora.c:    destroy_flora( fi, ch->in_room );
hit:hit:hit:hit:hit:handler.c:    if ( ch->desc != NULL && ch->desc->original != NULL )
hit:hit:hit:hit:hit:handler.c:	ch = ch->desc->original;
hit:hit:hit:hit:hit:handler.c:    if ( ch->trust != 0 )
hit:hit:hit:hit:hit:handler.c:	return ch->trust;
hit:hit:hit:hit:hit:handler.c:    if ( IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
hit:hit:hit:hit:hit:handler.c:	return ch->level;
hit:hit:hit:hit:hit:handler.c:    year = (long) current_time - (long) ch->pcdata->birth;
hit:hit:hit:hit:hit:handler.c:    return ( ch->pcdata->played + (int) (current_time - ch->pcdata->logon) ) / 3600;
hit:hit:hit:hit:hit:handler.c:    return URANGE( 3, ch->perm_stat_phys_str + ch->mod_stat_phys_str, 200 );
hit:hit:hit:hit:hit:handler.c:    return URANGE( 3, ch->perm_stat_ment_int + ch->mod_stat_ment_int, 200 );
hit:hit:hit:hit:hit:handler.c:    return URANGE( 3, ch->perm_stat_phys_dex + ch->mod_stat_phys_dex, 200 );
hit:hit:hit:hit:hit:handler.c:    return URANGE( 3, ch->perm_stat_phys_qui + ch->mod_stat_phys_qui, 200 );
hit:hit:hit:hit:hit:handler.c:    return URANGE( 3, ch->perm_stat_phys_tou + ch->mod_stat_phys_tou, 200 );
hit:hit:hit:hit:hit:handler.c:	return ch->pcdata->learned[sn];
hit:hit:hit:hit:hit:handler.c:    if ( ch->pIndexData == NULL )
hit:hit:hit:hit:hit:handler.c:    return ch->pIndexData->learned[sn];
hit:hit:hit:hit:hit:handler.c:	return ch->pcdata->power_level[sn];
hit:hit:hit:hit:hit:handler.c:    if ( ch->pIndexData == NULL )
hit:hit:hit:hit:hit:handler.c:    return ch->pIndexData->power_level[sn];
hit:hit:hit:hit:hit:handler.c:    if ( !IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
hit:hit:hit:hit:hit:handler.c:    if ( !IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
hit:hit:hit:hit:hit:handler.c:    delay_new->next	= ch->pcdata->skill_delays;
hit:hit:hit:hit:hit:handler.c:    ch->pcdata->skill_delays	= delay_new;
hit:hit:hit:hit:hit:handler.c:    if ( ch->pcdata->skill_delays == NULL )
hit:hit:hit:hit:hit:handler.c:    if ( delay == ch->pcdata->skill_delays )
hit:hit:hit:hit:hit:handler.c:	ch->pcdata->skill_delays	= delay->next;
hit:hit:hit:hit:hit:handler.c:	for ( prev = ch->pcdata->skill_delays; prev != NULL; prev = prev->next )
hit:hit:hit:hit:hit:handler.c:  for ( delay = ch->pcdata->skill_delays; delay != NULL; delay = delay->next )
hit:hit:hit:hit:hit:handler.c:	SET_BIT( ch->affected_by, paf->bitvector );
hit:hit:hit:hit:hit:handler.c:	REMOVE_BIT( ch->affected_by, paf->bitvector );
hit:hit:hit:hit:hit:handler.c:    case APPLY_STAT_PHYS_STR: ch->mod_stat_phys_str	+= mod;	break;
hit:hit:hit:hit:hit:handler.c:    case APPLY_STAT_PHYS_DEX: ch->mod_stat_phys_dex	+= mod;	break;
hit:hit:hit:hit:hit:handler.c:    case APPLY_STAT_PHYS_TOU: ch->mod_stat_phys_tou	+= mod;	break;
hit:hit:hit:hit:hit:handler.c:    case APPLY_STAT_PHYS_QUI: ch->mod_stat_phys_qui	+= mod;	break;
hit:hit:hit:hit:hit:handler.c:    case APPLY_STAT_MENT_INT: ch->mod_stat_ment_int	+= mod;	break;
hit:hit:hit:hit:hit:handler.c:    case APPLY_SEX:           ch->sex			+= mod;	break;
hit:hit:hit:hit:hit:handler.c:    case APPLY_MANA:          ch->max_mana		+= mod;	break;
hit:hit:hit:hit:hit:handler.c:    case APPLY_HIT:           ch->max_hit		+= mod;	break;
hit:hit:hit:hit:hit:handler.c:    case APPLY_MOVE:          ch->max_move		+= mod;	break;
hit:hit:hit:hit:hit:handler.c:    case APPLY_HITROLL:       ch->hitroll		+= mod;	break;
hit:hit:hit:hit:hit:handler.c:    case APPLY_DAMROLL:       ch->damroll		+= mod;	break;
hit:hit:hit:hit:hit:handler.c:    case APPLY_SAVING_PARA:   ch->saving_throw		+= mod;	break;
hit:hit:hit:hit:hit:handler.c:    case APPLY_SAVING_ROD:    ch->saving_throw		+= mod;	break;
hit:hit:hit:hit:hit:handler.c:    case APPLY_SAVING_PETRI:  ch->saving_throw		+= mod;	break;
hit:hit:hit:hit:hit:handler.c:    case APPLY_SAVING_BREATH: ch->saving_throw		+= mod;	break;
hit:hit:hit:hit:hit:handler.c:    case APPLY_SAVING_SPELL:  ch->saving_throw		+= mod;	break;
hit:hit:hit:hit:hit:handler.c:    case APPLY_ABSORBTION:    ch->general_absorb	+= mod; break;
hit:hit:hit:hit:hit:handler.c:    case APPLY_CHANNELING:    ch->channeling		+= mod; break;
hit:hit:hit:hit:hit:handler.c:    case APPLY_VISION_PROFILE:  ch->vision_min += mod;
hit:hit:hit:hit:hit:handler.c:				ch->vision_max += mod;		break;
hit:hit:hit:hit:hit:handler.c:    case APPLY_VISION_RANGE:	ch->vision_range += mod;	break;
hit:hit:hit:hit:hit:handler.c:	    obj_to_room( wield, ch->in_room, TRUE );
hit:hit:hit:hit:hit:handler.c:    paf_new->next	= ch->affected;
hit:hit:hit:hit:hit:handler.c:    ch->affected	= paf_new;
hit:hit:hit:hit:hit:handler.c:    if ( ch->affected == NULL )
hit:hit:hit:hit:hit:handler.c:    if ( paf == ch->affected )
hit:hit:hit:hit:hit:handler.c:	ch->affected	= paf->next;
hit:hit:hit:hit:hit:handler.c:	for ( prev = ch->affected; prev != NULL; prev = prev->next )
hit:hit:hit:hit:hit:handler.c:    for ( paf = ch->affected; paf != NULL; paf = paf_next )
hit:hit:hit:hit:hit:handler.c:    for ( paf = ch->affected; paf != NULL; paf = paf->next )
hit:hit:hit:hit:hit:handler.c:    for ( paf_old = ch->affected; paf_old != NULL; paf_old = paf_old->next )
hit:hit:hit:hit:hit:handler.c:    if ( (room = ch->in_room) == NULL )
hit:hit:hit:hit:hit:handler.c:	--ch->in_room->area->nplayer;
hit:hit:hit:hit:hit:handler.c:    ch->in_room->light_mod -= ch->light;
hit:hit:hit:hit:hit:handler.c:    if ( ch == ch->in_room->people )
hit:hit:hit:hit:hit:handler.c:	ch->in_room->people = ch->next_in_room;
hit:hit:hit:hit:hit:handler.c:	for ( prev = ch->in_room->people; prev; prev = prev->next_in_room )
hit:hit:hit:hit:hit:handler.c:		prev->next_in_room = ch->next_in_room;
hit:hit:hit:hit:hit:handler.c:    ch->in_room      = NULL;
hit:hit:hit:hit:hit:handler.c:    ch->next_in_room = NULL;
hit:hit:hit:hit:hit:handler.c:    ch->in_room		= pRoomIndex;
hit:hit:hit:hit:hit:handler.c:    ch->next_in_room	= pRoomIndex->people;
hit:hit:hit:hit:hit:handler.c:	++ch->in_room->area->nplayer;
hit:hit:hit:hit:hit:handler.c:    ch->in_room->light_mod += ch->light;
hit:hit:hit:hit:hit:handler.c:    obj->next_content	 = ch->carrying;
hit:hit:hit:hit:hit:handler.c:    ch->carrying	 = obj;
hit:hit:hit:hit:hit:handler.c:    ch->carry_number	+= 1;
hit:hit:hit:hit:hit:handler.c:    ch->carry_weight	+= get_obj_weight( obj );
hit:hit:hit:hit:hit:handler.c:    if ( ch->carrying == obj )
hit:hit:hit:hit:hit:handler.c:	ch->carrying = obj->next_content;
hit:hit:hit:hit:hit:handler.c:	for ( prev = ch->carrying; prev != NULL; prev = prev->next_content )
hit:hit:hit:hit:hit:handler.c:    ch->carry_number	-= 1;
hit:hit:hit:hit:hit:handler.c:    ch->carry_weight	-= get_obj_weight( obj );
hit:hit:hit:hit:hit:handler.c:    return ch->wearing[iWear];
hit:hit:hit:hit:hit:handler.c:    iWear = race_array[ch->race]->hit_loc_location[hit_loc];
hit:hit:hit:hit:hit:handler.c:	obj_to_room( obj, ch->in_room, TRUE );
hit:hit:hit:hit:hit:handler.c:    if ( ch->wearing[iWear] == NULL )
hit:hit:hit:hit:hit:handler.c:	ch->wearing[iWear] = obj;
hit:hit:hit:hit:hit:handler.c:    else if ( ch->wearing[iWear]->size > 50 )
hit:hit:hit:hit:hit:handler.c:	obj->next_worn = ch->wearing[iWear]->next_worn;
hit:hit:hit:hit:hit:handler.c:	ch->wearing[iWear]->next_worn = obj;
hit:hit:hit:hit:hit:handler.c:	obj->next_worn = ch->wearing[iWear];
hit:hit:hit:hit:hit:handler.c:	ch->wearing[iWear] = obj;
hit:hit:hit:hit:hit:handler.c:    &&   ch->in_room != NULL )
hit:hit:hit:hit:hit:handler.c:	ch->in_room->light_mod += obj->value[0];
hit:hit:hit:hit:hit:handler.c:	ch->light += obj->value[0];
hit:hit:hit:hit:hit:handler.c:	ch->in_room->light_mod += GLOW_LIGHT;
hit:hit:hit:hit:hit:handler.c:	ch->light += GLOW_LIGHT;
hit:hit:hit:hit:hit:handler.c:	ch->in_room->light_mod += DARK_LIGHT;
hit:hit:hit:hit:hit:handler.c:	ch->light += DARK_LIGHT;
hit:hit:hit:hit:hit:handler.c:    if ( ch->wearing[wear_loc] == NULL )
hit:hit:hit:hit:hit:handler.c:    else if ( ch->wearing[wear_loc] == obj )
hit:hit:hit:hit:hit:handler.c:	ch->wearing[wear_loc] = obj->next_worn;
hit:hit:hit:hit:hit:handler.c:	for ( o = ch->wearing[wear_loc]; o != NULL; o = o->next_worn )
hit:hit:hit:hit:hit:handler.c:    if ( obj != ch->carrying )
hit:hit:hit:hit:hit:handler.c:	for ( prev = ch->carrying; prev != NULL; prev = prev->next_content )
hit:hit:hit:hit:hit:handler.c:	obj->next_content = ch->carrying;
hit:hit:hit:hit:hit:handler.c:	ch->carrying = obj;
hit:hit:hit:hit:hit:handler.c:    &&   ch->in_room != NULL )
hit:hit:hit:hit:hit:handler.c:	ch->in_room->light_mod -= obj->value[0];
hit:hit:hit:hit:hit:handler.c:	ch->light -= obj->value[0];
hit:hit:hit:hit:hit:handler.c:	ch->in_room->light_mod -= GLOW_LIGHT;
hit:hit:hit:hit:hit:handler.c:	ch->light -= GLOW_LIGHT;
hit:hit:hit:hit:hit:handler.c:	ch->in_room->light_mod -= DARK_LIGHT;
hit:hit:hit:hit:hit:handler.c:	ch->light -= DARK_LIGHT;
hit:hit:hit:hit:hit:handler.c:    if ( ch->wearing[wear_loc] != NULL
hit:hit:hit:hit:hit:handler.c:    || ch->in_room == NULL )
hit:hit:hit:hit:hit:handler.c:	    while( (od = ch->wearing[i]) != NULL )
hit:hit:hit:hit:hit:handler.c:		obj_to_room( od, ch->in_room, TRUE );
hit:hit:hit:hit:hit:handler.c:    for ( ch = char_list; ch != NULL; ch = ch->next )
hit:hit:hit:hit:hit:handler.c:	if ( (p = ch->predelay_info) != NULL )
hit:hit:hit:hit:hit:handler.c:    if ( ch->in_room == NULL )
hit:hit:hit:hit:hit:handler.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:handler.c:	if ( ch->pReset != NULL )
hit:hit:hit:hit:hit:handler.c:	    ch->pReset->target = NULL;
hit:hit:hit:hit:hit:handler.c:    if ( ch->desc != NULL && ch->desc->original != NULL )
hit:hit:hit:hit:hit:handler.c:    for ( wch = char_list; wch != NULL; wch = wch->next )
hit:hit:hit:hit:hit:handler.c:	if ( wch->reply == ch )
hit:hit:hit:hit:hit:handler.c:	    wch->reply = NULL;
hit:hit:hit:hit:hit:handler.c:	if ( (p = wch->predelay_info) != NULL )
hit:hit:hit:hit:hit:handler.c:    while ( ch->hunting != NULL )
hit:hit:hit:hit:hit:handler.c:	remove_hunting( ch, ch->hunting->victim, TRUE );
hit:hit:hit:hit:hit:handler.c:       char_list = ch->next;
hit:hit:hit:hit:hit:handler.c:		prev->next = ch->next;
hit:hit:hit:hit:hit:handler.c:    if ( ch->desc )
hit:hit:hit:hit:hit:handler.c:        ch->desc->character = NULL;
hit:hit:hit:hit:hit:handler.c:    for ( rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:hit:handler.c:	( !is_name( arg, rch->name ) && !is_name( arg, rch->namelist ) ) )
hit:hit:hit:hit:hit:handler.c:    for ( wch = char_list; wch != NULL ; wch = wch->next )
hit:hit:hit:hit:hit:handler.c:	( !is_name( arg, wch->name ) && !is_name( arg, wch->namelist ) ) )
hit:hit:hit:hit:hit:handler.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:hit:hit:hit:hit:handler.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:hit:hit:hit:hit:handler.c:    obj = get_obj_list( ch, argument, ch->in_room->contents );
hit:hit:hit:hit:hit:handler.c:    diff = ch->vision_current - room_light( pRoomIndex );
hit:hit:hit:hit:hit:handler.c:    for ( rch = pRoomIndex->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:hit:handler.c:    if ( (!IS_NPC(ch) && IS_SET(ch->act, PLR_HOLYLIGHT)) 
hit:hit:hit:hit:hit:handler.c:    if ( room_is_dark( ch->in_room, ch ) == VISION_TOO_DARK
hit:hit:hit:hit:hit:handler.c:    || room_is_dark( ch->in_room, ch ) == VISION_TOO_BRIGHT )
hit:hit:hit:hit:hit:handler.c:    if ( room_is_dark( ch->in_room, ch ) == VISION_HAZY )
hit:hit:hit:hit:hit:handler.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_HOLYLIGHT) )
hit:hit:hit:hit:hit:handler.c:    if ( room_is_dark( ch->in_room, ch ) == VISION_TOO_DARK
hit:hit:hit:hit:hit:handler.c:    || room_is_dark( ch->in_room, ch ) == VISION_TOO_BRIGHT )
hit:hit:hit:hit:hit:handler.c:    if ( !IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
hit:hit:hit:hit:hit:handler.c:    if ( IS_NPC( victim ) && ch->pIndexData == victim->pIndexData )
hit:hit:hit:hit:hit:handler.c:    aggr_bits = ch->aggression;
hit:hit:hit:hit:hit:handler.c:	if ( victim->weight > ch->weight )
hit:hit:hit:hit:hit:handler.c:	aggr += ch->weight - victim->weight;
hit:hit:hit:hit:hit:handler.c:	aggr -= (ch->max_hit - ch->hit[HIT_LOC_BODY])*100/ch->max_hit;
hit:hit:hit:hit:hit:handler.c:	aggr -= race_array[ch->race]->relations[victim->race];
hit:hit:hit:hit:hit:handler.c:    if ( ch->predelay_info != NULL )
hit:hit:hit:hit:hit:handler.c:	free_predelay( ch->predelay_info );
hit:hit:hit:hit:hit:handler.c:    ch->predelay_info = p;
hit:hit:hit:hit:hit:handler.c:    ch->predelay_time = delay;
hit:hit:hit:hit:hit:hit:act_comm.c:    if ( !str_cmp( ch->name, pnote->sender ) )
hit:hit:hit:hit:hit:hit:act_comm.c:    if ( is_name( ch->name, pnote->to_list ) )
hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ch->pnote != NULL )
hit:hit:hit:hit:hit:hit:act_comm.c:	pnote	  = alloc_perm( sizeof(*ch->pnote) );
hit:hit:hit:hit:hit:hit:act_comm.c:    pnote->sender	= str_dup( ch->name );
hit:hit:hit:hit:hit:hit:act_comm.c:    ch->pnote		= pnote;
hit:hit:hit:hit:hit:hit:act_comm.c:	REMOVE_BIT(ch->act, PLR_AFK);
hit:hit:hit:hit:hit:hit:act_comm.c:    if (IS_SET(ch->act, PLR_AFK)) {
hit:hit:hit:hit:hit:hit:act_comm.c:       REMOVE_BIT(ch->act, PLR_AFK);
hit:hit:hit:hit:hit:hit:act_comm.c:	SET_BIT(ch->act, PLR_AFK);
hit:hit:hit:hit:hit:hit:act_comm.c:	if ( to_one[0] != '\0' && str_cmp( ch->name, to_one ) )
hit:hit:hit:hit:hit:hit:act_comm.c:    if ( str_cmp( ch->name, pnote->sender ) && to_new[0] != '\0' 
hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ch->pnote == NULL || ch->pnote->text[0] == '\0' )
hit:hit:hit:hit:hit:hit:act_comm.c:    oldb = ch->pnote->text;
hit:hit:hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:hit:hit:act_comm.c:	    free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:act_comm.c:	    ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:hit:hit:act_comm.c:	send_to_char( ch->pnote->text, ch );
hit:hit:hit:hit:hit:hit:act_comm.c:	strcpy( buf, ch->pnote->text );
hit:hit:hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->subject, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->subject = str_dup( argument );
hit:hit:hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->to_list, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->to_list = str_dup( argument );
hit:hit:hit:hit:hit:hit:act_comm.c:	if ( ch->pnote != NULL )
hit:hit:hit:hit:hit:hit:act_comm.c:	    free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:act_comm.c:	    free_string( ch->pnote->subject, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:act_comm.c:	    free_string( ch->pnote->to_list, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:act_comm.c:	    free_string( ch->pnote->date, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:act_comm.c:	    free_string( ch->pnote->sender, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:act_comm.c:	    ch->pnote->next	= note_free;
hit:hit:hit:hit:hit:hit:act_comm.c:	    note_free		= ch->pnote;
hit:hit:hit:hit:hit:hit:act_comm.c:	    ch->pnote		= NULL;
hit:hit:hit:hit:hit:hit:act_comm.c:	if ( ch->pnote == NULL )
hit:hit:hit:hit:hit:hit:act_comm.c:	    ch->pnote->sender,
hit:hit:hit:hit:hit:hit:act_comm.c:	    ch->pnote->subject,
hit:hit:hit:hit:hit:hit:act_comm.c:	    ch->pnote->to_list
hit:hit:hit:hit:hit:hit:act_comm.c:	send_to_char( ch->pnote->text, ch );
hit:hit:hit:hit:hit:hit:act_comm.c:	if ( ch->pnote == NULL )
hit:hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->next			= NULL;
hit:hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->date			= str_dup( strtime );
hit:hit:hit:hit:hit:hit:act_comm.c:	    note_list	= ch->pnote;
hit:hit:hit:hit:hit:hit:act_comm.c:	    pnote->next	= ch->pnote;
hit:hit:hit:hit:hit:hit:act_comm.c:	pnote		= ch->pnote;
hit:hit:hit:hit:hit:hit:act_comm.c:	ch->pnote	= NULL;
hit:hit:hit:hit:hit:hit:act_comm.c:    REMOVE_BIT(ch->deaf, channel);
hit:hit:hit:hit:hit:hit:act_comm.c:	position	= ch->position;
hit:hit:hit:hit:hit:hit:act_comm.c:	ch->position	= POS_STANDING;
hit:hit:hit:hit:hit:hit:act_comm.c:	ch->position	= position;
hit:hit:hit:hit:hit:hit:act_comm.c:	&&  !IS_SET(och->deaf, channel) )
hit:hit:hit:hit:hit:hit:act_comm.c:	    position		= vch->position;
hit:hit:hit:hit:hit:hit:act_comm.c:	    vch->position	= position;
hit:hit:hit:hit:hit:hit:act_comm.c:  gsn = *language_table[ch->language].pgsn;
hit:hit:hit:hit:hit:hit:act_comm.c:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ch->in_room->exit[door] == NULL
hit:hit:hit:hit:hit:hit:act_comm.c:    || ( room = ch->in_room->exit[door]->to_room ) == NULL )
hit:hit:hit:hit:hit:hit:act_comm.c:    for ( vch = room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:hit:hit:hit:act_comm.c:  gsn = *language_table[ch->language].pgsn;
hit:hit:hit:hit:hit:hit:act_comm.c:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:hit:hit:hit:act_comm.c:           sprintf(log_buf, "%s wishes to all \"%s\"",ch->name,argument );
hit:hit:hit:hit:hit:hit:act_comm.c:    || ( IS_NPC(victim) && victim->in_room != ch->in_room ) )
hit:hit:hit:hit:hit:hit:act_comm.c:	 || IS_SET(ch->act, PLR_WIZINVIS))
hit:hit:hit:hit:hit:hit:act_comm.c:        sprintf( log_buf, "%s sends to %s \"%s\"", ch->name, victim->name, argument );
hit:hit:hit:hit:hit:hit:act_comm.c:        sprintf( log_buf, "%s wishes to %s \"%s\"", ch->name, victim->name, argument );
hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ( victim = ch->reply ) == NULL )
hit:hit:hit:hit:hit:hit:act_comm.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_NO_EMOTE) )
hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ch->position  < POS_STUNNED  )
hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ch->in_room && !IS_SET( ch->in_room->room_flags, ROOM_RENT )
hit:hit:hit:hit:hit:hit:act_comm.c:    sprintf( log_buf, "%s has quit.", ch->name );
hit:hit:hit:hit:hit:hit:act_comm.c:  //  d = ch->desc;
hit:hit:hit:hit:hit:hit:act_comm.c:    d = ch->desc;
hit:hit:hit:hit:hit:hit:act_comm.c:    if (!IS_SET(ch->act, PLR_AFK))
hit:hit:hit:hit:hit:hit:act_comm.c:    if ( IS_AFFECTED(ch, AFF_CHARM) && ch->master != NULL )
hit:hit:hit:hit:hit:hit:act_comm.c:	act( "You don't wish to leave your beloved master!", ch, ch->master, NULL, NULL, NULL, TO_CHAR, SENSE_SIXTH );
hit:hit:hit:hit:hit:hit:act_comm.c:	if ( ch->master == NULL )
hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ch->master != NULL )
hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ch->master != NULL )
hit:hit:hit:hit:hit:hit:act_comm.c:    ch->master        = master;
hit:hit:hit:hit:hit:hit:act_comm.c:    ch->leader        = NULL;
hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ch->master == NULL )
hit:hit:hit:hit:hit:hit:act_comm.c:	REMOVE_BIT( ch->affected_by, AFF_CHARM );
hit:hit:hit:hit:hit:hit:act_comm.c:    act( "You stop following $N.", ch, ch->master, NULL, NULL, NULL, TO_CHAR, SENSE_SIXTH );
hit:hit:hit:hit:hit:hit:act_comm.c:    ch->master = NULL;
hit:hit:hit:hit:hit:hit:act_comm.c:    ch->leader = NULL;
hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ch->master != NULL )
hit:hit:hit:hit:hit:hit:act_comm.c:    ch->leader = NULL;
hit:hit:hit:hit:hit:hit:act_comm.c:    for ( fch = char_list; fch != NULL; fch = fch->next )
hit:hit:hit:hit:hit:hit:act_comm.c:	if ( fch->master == ch )
hit:hit:hit:hit:hit:hit:act_comm.c:	if ( fch->leader == ch )
hit:hit:hit:hit:hit:hit:act_comm.c:	    fch->leader = fch;
hit:hit:hit:hit:hit:hit:act_comm.c:    for ( och = ch->in_room->people; och != NULL; och = och_next )
hit:hit:hit:hit:hit:hit:act_comm.c:	och_next = och->next_in_room;
hit:hit:hit:hit:hit:hit:act_comm.c:	&&   och->master == ch
hit:hit:hit:hit:hit:hit:act_comm.c:	leader = (ch->leader != NULL) ? ch->leader : ch;
hit:hit:hit:hit:hit:hit:act_comm.c:	for ( gch = char_list; gch != NULL; gch = gch->next )
hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ch->master != NULL || ( ch->leader != NULL && ch->leader != ch ) )
hit:hit:hit:hit:hit:hit:act_comm.c:    if ( IS_SET( ch->act, PLR_NO_TELL ) )
hit:hit:hit:hit:hit:hit:act_comm.c:    sprintf( buf, "%s tells the group '%s'.\n\r", ch->name, argument );
hit:hit:hit:hit:hit:hit:act_comm.c:    for ( gch = char_list; gch != NULL; gch = gch->next )
hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ach->leader != NULL ) ach = ach->leader;
hit:hit:hit:hit:hit:hit:act_comm.c:    if ( bch->leader != NULL ) bch = bch->leader;
hit:hit:hit:hit:hit:hit:act_info.c:    if ( ch->desc == NULL )
hit:hit:hit:hit:hit:hit:act_info.c:	    if ( IS_NPC(ch) || IS_SET(ch->act, PLR_COMBINE) )
hit:hit:hit:hit:hit:hit:act_info.c:	if ( IS_NPC(ch) || IS_SET(ch->act, PLR_COMBINE) )
hit:hit:hit:hit:hit:hit:act_info.c:	if ( IS_NPC(ch) || IS_SET(ch->act, PLR_COMBINE) )
hit:hit:hit:hit:hit:hit:act_info.c:	      rch != NULL; rch = rch->next_in_room ) {
hit:hit:hit:hit:hit:hit:act_info.c:	    if ( rch->riding == victim ) {
hit:hit:hit:hit:hit:hit:act_info.c:    for ( rch = list; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:hit:hit:act_info.c:	&&   IS_SET(rch->act, PLR_WIZINVIS)
hit:hit:hit:hit:hit:hit:act_info.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_HOLYLIGHT) )
hit:hit:hit:hit:hit:hit:act_info.c:    if ( ch->desc == NULL )
hit:hit:hit:hit:hit:hit:act_info.c:    if ( ch->position < POS_SLEEPING )
hit:hit:hit:hit:hit:hit:act_info.c:    if ( ch->position == POS_SLEEPING )
hit:hit:hit:hit:hit:hit:act_info.c:    &&   !IS_SET(ch->act, PLR_HOLYLIGHT)
hit:hit:hit:hit:hit:hit:act_info.c:    &&   room_is_dark( ch->in_room, ch ) == VISION_TOO_DARK )
hit:hit:hit:hit:hit:hit:act_info.c:	show_char_to_char( ch->in_room->people, ch );
hit:hit:hit:hit:hit:hit:act_info.c:    &&   !IS_SET(ch->act, PLR_HOLYLIGHT)
hit:hit:hit:hit:hit:hit:act_info.c:    &&   room_is_dark( ch->in_room, ch ) == VISION_TOO_BRIGHT )
hit:hit:hit:hit:hit:hit:act_info.c:	show_char_to_char( ch->in_room->people, ch );
hit:hit:hit:hit:hit:hit:act_info.c:	 sprintf(buf2,"[%d] ", ch->in_room->vnum);
hit:hit:hit:hit:hit:hit:act_info.c:     send_to_char( ch->in_room->name, ch );
hit:hit:hit:hit:hit:hit:act_info.c:	  ( !IS_NPC( ch ) && !IS_SET( ch->act, PLR_BRIEF ) ) )
hit:hit:hit:hit:hit:hit:act_info.c:	 send_to_char( ch->in_room->description, ch );
hit:hit:hit:hit:hit:hit:act_info.c:     if ( IS_SET(ch->act, PLR_AUTOWEATHER) && IS_OUTDOORS(ch))
hit:hit:hit:hit:hit:hit:act_info.c:     update_flora( ch->in_room );
hit:hit:hit:hit:hit:hit:act_info.c:     display_flora( ch, ch->in_room->flora, 0 );
hit:hit:hit:hit:hit:hit:act_info.c:     show_list_to_char( ch->in_room->contents, ch, FALSE, FALSE, FALSE );
hit:hit:hit:hit:hit:hit:act_info.c:     show_char_to_char( ch->in_room->people,   ch );
hit:hit:hit:hit:hit:hit:act_info.c:	for ( obj = ch->in_room->contents; obj != NULL; obj = obj->next_content )
hit:hit:hit:hit:hit:hit:act_info.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:hit:hit:hit:hit:hit:act_info.c:    for ( obj = ch->in_room->contents; obj != NULL; obj = obj->next_content )
hit:hit:hit:hit:hit:hit:act_info.c:    pdesc = get_extra_descr( arg1, ch->in_room->extra_descr );
hit:hit:hit:hit:hit:hit:act_info.c:	if ( (pexit = ch->in_room->exit[door]) == NULL )
hit:hit:hit:hit:hit:hit:act_info.c:    if ( ( pexit = ch->in_room->exit[door] ) == NULL )
hit:hit:hit:hit:hit:hit:act_info.c:    dist = URANGE( 1, ch->vision_range, 200 );
hit:hit:hit:hit:hit:hit:act_info.c:    in_room = ch->in_room;
hit:hit:hit:hit:hit:hit:act_info.c:    update_flora( ch->in_room );
hit:hit:hit:hit:hit:hit:act_info.c:    if ( !IS_SET( ch->in_room->sector->flags, SECTOR_OUTDOORS ) )
hit:hit:hit:hit:hit:hit:act_info.c:    soil_condition( ch, get_water_value( ch->in_room ) );
hit:hit:hit:hit:hit:hit:act_info.c:	if ( ( pexit = ch->in_room->exit[door] ) != NULL
hit:hit:hit:hit:hit:hit:act_info.c:       // && IS_SET( ch->act, PLR_HOLYLIGHT ))
hit:hit:hit:hit:hit:hit:act_info.c:	ch->name,
hit:hit:hit:hit:hit:hit:act_info.c:	IS_NPC(ch) ? "" : ch->short_descr );
hit:hit:hit:hit:hit:hit:act_info.c:	(is_vowel(race_array[ch->race]->race_name[0]) ? "an" : "a" ),
hit:hit:hit:hit:hit:hit:act_info.c:	race_array[ch->race]->race_name);
hit:hit:hit:hit:hit:hit:act_info.c:    if ( get_trust( ch ) != ch->level )
hit:hit:hit:hit:hit:hit:act_info.c:	ch->hit[HIT_LOC_BODY],  ch->max_hit,
hit:hit:hit:hit:hit:hit:act_info.c:	ch->mana, ch->max_mana,
hit:hit:hit:hit:hit:hit:act_info.c:	ch->move, ch->max_move );
hit:hit:hit:hit:hit:hit:act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->condition[COND_DRUNK]   > 10 )
hit:hit:hit:hit:hit:hit:act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->condition[COND_THIRST] ==  0 )
hit:hit:hit:hit:hit:hit:act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->condition[COND_FULL]   ==  0 )
hit:hit:hit:hit:hit:hit:act_info.c:    switch ( ch->position )
hit:hit:hit:hit:hit:hit:act_info.c:    switch( ch->move_speed )
hit:hit:hit:hit:hit:hit:act_info.c:      skill_table[*language_table[ch->language].pgsn].name );
hit:hit:hit:hit:hit:hit:act_info.c:   free_string( ch->prompt, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:act_info.c:   ch->prompt = str_dup( buf );
hit:hit:hit:hit:hit:hit:act_info.c:	if ( ( fImmortalOnly  && wch->level < LEVEL_IMMORTAL ) )
hit:hit:hit:hit:hit:hit:act_info.c:/*	switch ( wch->level )
hit:hit:hit:hit:hit:hit:act_info.c:	if ( IS_IMMORTAL( ch ) || wch->level > LEVEL_IMMORTAL )
hit:hit:hit:hit:hit:hit:act_info.c:		     (IS_SET(wch->act, PLR_AFK) ? "[AFK]" : " "),
hit:hit:hit:hit:hit:hit:act_info.c:                     (IS_SET(wch->act, PLR_WIZINVIS) ? "[INVIS]" : " "),
hit:hit:hit:hit:hit:hit:act_info.c:		     wch->name,
hit:hit:hit:hit:hit:hit:act_info.c:		     wch->short_descr);
hit:hit:hit:hit:hit:hit:act_info.c:    show_list_to_char( ch->carrying, ch, TRUE, TRUE, FALSE );
hit:hit:hit:hit:hit:hit:act_info.c:	for ( obj = ch->wearing[iWear]; obj != NULL; obj = obj->next_worn )
hit:hit:hit:hit:hit:hit:act_info.c:	for ( obj2 = ch->carrying; obj2 != NULL; obj2 = obj2->next_content )
hit:hit:hit:hit:hit:hit:act_info.c:	    &&   victim->in_room->area == ch->in_room->area
hit:hit:hit:hit:hit:hit:act_info.c:	    &&   victim->in_room->area == ch->in_room->area
hit:hit:hit:hit:hit:hit:act_info.c:	    if ( ch->description != NULL )
hit:hit:hit:hit:hit:hit:act_info.c:		strcat( buf, ch->description );
hit:hit:hit:hit:hit:hit:act_info.c:	free_string( ch->description, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:act_info.c:	ch->description = str_dup( buf );
hit:hit:hit:hit:hit:hit:act_info.c:    send_to_char( ch->description ? ch->description : "(None).\n\r", ch );
hit:hit:hit:hit:hit:hit:act_info.c:    if ( strcmp( crypt( arg1, ch->pcdata->pwd ), ch->pcdata->pwd ) )
hit:hit:hit:hit:hit:hit:act_info.c:    pwdnew = crypt( arg2, ch->name );
hit:hit:hit:hit:hit:hit:act_info.c:    free_string( ch->pcdata->pwd, MEM_PCDATA );
hit:hit:hit:hit:hit:hit:act_info.c:    ch->pcdata->pwd = str_dup( pwdnew );
hit:hit:hit:hit:hit:hit:act_info.c:	send_to_char( !IS_SET(ch->deaf, CHANNEL_CHAT)
hit:hit:hit:hit:hit:hit:act_info.c:	    send_to_char( !IS_SET(ch->deaf, CHANNEL_IMMTALK)
hit:hit:hit:hit:hit:hit:act_info.c:	    send_to_char( !IS_SET(ch->deaf, CHANNEL_LOG)
hit:hit:hit:hit:hit:hit:act_info.c:	    REMOVE_BIT (ch->deaf, bit);
hit:hit:hit:hit:hit:hit:act_info.c:	    SET_BIT    (ch->deaf, bit);
hit:hit:hit:hit:hit:hit:act_info.c:	if ( IS_SET(ch->act,PLR_BRIEF))
hit:hit:hit:hit:hit:hit:act_info.c:	    REMOVE_BIT(ch->act,PLR_BRIEF);
hit:hit:hit:hit:hit:hit:act_info.c:	    SET_BIT(ch->act,PLR_BRIEF);
hit:hit:hit:hit:hit:hit:act_info.c:	if ( IS_SET(ch->act,PLR_BLANK))
hit:hit:hit:hit:hit:hit:act_info.c:	    REMOVE_BIT(ch->act,PLR_BLANK);
hit:hit:hit:hit:hit:hit:act_info.c:	    SET_BIT(ch->act,PLR_BLANK);
hit:hit:hit:hit:hit:hit:act_info.c:	if ( IS_SET(ch->act,PLR_PEACEFUL))
hit:hit:hit:hit:hit:hit:act_info.c:	    REMOVE_BIT(ch->act,PLR_PEACEFUL);
hit:hit:hit:hit:hit:hit:act_info.c:	    SET_BIT(ch->act,PLR_PEACEFUL);
hit:hit:hit:hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_BLANK)
hit:hit:hit:hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_BRIEF)
hit:hit:hit:hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_COMBINE)
hit:hit:hit:hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_PEACEFUL)
hit:hit:hit:hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_PROMPT)
hit:hit:hit:hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_TELNET_GA)
hit:hit:hit:hit:hit:hit:act_info.c:	send_to_char( !IS_SET(ch->act, PLR_NO_EMOTE)
hit:hit:hit:hit:hit:hit:act_info.c:	send_to_char( !IS_SET(ch->act, PLR_NO_TELL)
hit:hit:hit:hit:hit:hit:act_info.c:	    SET_BIT    (ch->act, bit);
hit:hit:hit:hit:hit:hit:act_info.c:	    REMOVE_BIT (ch->act, bit);
hit:hit:hit:hit:hit:hit:act_info.c:    ch->pcdata->pagelen = i;
hit:hit:hit:hit:hit:hit:act_info.c:  sprintf( buf, "Page Length (pagelen):  %d\n\r", ch->pcdata->pagelen );
hit:hit:hit:hit:hit:hit:act_move.c:  in_room = ch->in_room;
hit:hit:hit:hit:hit:hit:act_move.c:  if ( ch->riding != NULL && ch->riding->in_room != in_room )
hit:hit:hit:hit:hit:hit:act_move.c:    ch->riding = NULL;
hit:hit:hit:hit:hit:hit:act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:hit:hit:act_move.c:       &&   ch->master != NULL
hit:hit:hit:hit:hit:hit:act_move.c:       &&   in_room == ch->master->in_room 
hit:hit:hit:hit:hit:hit:act_move.c:       &&   !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:hit:hit:act_move.c:      &&  !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:hit:hit:act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:hit:hit:act_move.c:      for ( obj = ch->carrying; obj != NULL; obj = obj->next_content) {
hit:hit:hit:hit:hit:hit:act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:hit:hit:act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:hit:hit:act_move.c:  if ( ch->move_speed < 0 || ch->move_speed >= MOVE_MAX )
hit:hit:hit:hit:hit:hit:act_move.c:    ch->move_speed = MOVE_WALK;
hit:hit:hit:hit:hit:hit:act_move.c:  if ( ch->move < move && ch->riding == NULL )
hit:hit:hit:hit:hit:hit:act_move.c:  if ( ch->riding != NULL && ch->riding->move < 2 * move )
hit:hit:hit:hit:hit:hit:act_move.c:  if ( ch->riding == NULL )
hit:hit:hit:hit:hit:hit:act_move.c:    ch->move -= move;
hit:hit:hit:hit:hit:hit:act_move.c:    ch->riding->move -= 2 * move;
hit:hit:hit:hit:hit:hit:act_move.c:  if ( ch->move_speed == MOVE_SNEAK && ch->riding == NULL )
hit:hit:hit:hit:hit:hit:act_move.c:      if ( ch->next_in_room != NULL )
hit:hit:hit:hit:hit:hit:act_move.c:    if ( ch->riding == NULL )
hit:hit:hit:hit:hit:hit:act_move.c:        move_names[ch->move_speed], TO_ROOM, SENSE_SIGHT|SENSE_HEARING );
hit:hit:hit:hit:hit:hit:act_move.c:      act( "$n leaves $t, riding $N.", ch, ch->riding, NULL, dir_name[door],
hit:hit:hit:hit:hit:hit:act_move.c:  if ( ch->riding != NULL )
hit:hit:hit:hit:hit:hit:act_move.c:    char_from_room( ch->riding );
hit:hit:hit:hit:hit:hit:act_move.c:    char_to_room( ch->riding, to_room, TRUE );
hit:hit:hit:hit:hit:hit:act_move.c:    if ( ch->riding == NULL )
hit:hit:hit:hit:hit:hit:act_move.c:        dir_name_2[rev_dir[door]], move_names[ch->move_speed],
hit:hit:hit:hit:hit:hit:act_move.c:      act( "$n has arrived from $t, riding $N.", ch, ch->riding, NULL,
hit:hit:hit:hit:hit:hit:act_move.c:    fch_next = fch->next_in_room;
hit:hit:hit:hit:hit:hit:act_move.c:    if ( fch->master == ch && fch->position == POS_STANDING
hit:hit:hit:hit:hit:hit:act_move.c:  if (!IS_UNSWITCHED_MOB(ch) && IS_SET(ch->act, PLR_HOLYWALK))
hit:hit:hit:hit:hit:hit:act_move.c:  switch( ch->move_speed )
hit:hit:hit:hit:hit:hit:act_move.c:  if (!IS_UNSWITCHED_MOB(ch) && IS_SET(ch->act, PLR_HOLYWALK))
hit:hit:hit:hit:hit:hit:act_move.c:  switch( ch->move_speed )
hit:hit:hit:hit:hit:hit:act_move.c:	    if ( ( pexit = ch->in_room->exit[door] ) != NULL
hit:hit:hit:hit:hit:hit:act_move.c:    if ( ( pexit = ch->in_room->exit[door] ) == NULL )
hit:hit:hit:hit:hit:hit:act_move.c:	    if ( ( pexit = ch->in_room->exit[dir] ) != NULL
hit:hit:hit:hit:hit:hit:act_move.c:    if ( ( pexit = ch->in_room->exit[dir] ) == NULL
hit:hit:hit:hit:hit:hit:act_move.c:	damage( ch, ch, UMIN(dice(1,pain),dice(1,ch->hit[0])), gsn_tumbling, NULL, gn_wear_none );
hit:hit:hit:hit:hit:hit:act_move.c:	pexit = ch->in_room->exit[door];
hit:hit:hit:hit:hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:hit:hit:hit:act_move.c:	    for ( rch = to_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:hit:hit:act_move.c:	pexit = ch->in_room->exit[door];
hit:hit:hit:hit:hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:hit:hit:hit:act_move.c:	    for ( rch = to_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:hit:hit:act_move.c:	pexit	= ch->in_room->exit[door];
hit:hit:hit:hit:hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:hit:hit:hit:act_move.c:	    for ( rch = to_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:hit:hit:act_move.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:hit:hit:hit:hit:hit:act_move.c:	if ( building->value[0] != ch->in_room->vnum )
hit:hit:hit:hit:hit:hit:act_move.c:	pexit	= ch->in_room->exit[door];
hit:hit:hit:hit:hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:hit:hit:hit:act_move.c:	pexit = ch->in_room->exit[door];
hit:hit:hit:hit:hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:hit:hit:hit:act_move.c:  for ( fi = ch->in_room->flora; fi != NULL; fi = fi->next )
hit:hit:hit:hit:hit:hit:act_move.c:    pexit = ch->in_room->exit[door];
hit:hit:hit:hit:hit:hit:act_move.c:    &&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:hit:hit:hit:act_move.c:    switch ( ch->position )
hit:hit:hit:hit:hit:hit:act_move.c:	ch->position = POS_STANDING;
hit:hit:hit:hit:hit:hit:act_move.c:    switch ( ch->position )
hit:hit:hit:hit:hit:hit:act_move.c:	ch->position = POS_RESTING;
hit:hit:hit:hit:hit:hit:act_move.c:	ch->position = POS_RESTING;
hit:hit:hit:hit:hit:hit:act_move.c:    switch ( ch->position )
hit:hit:hit:hit:hit:hit:act_move.c:	ch->position = POS_RESTING;
hit:hit:hit:hit:hit:hit:act_move.c:    if ( ch->riding != NULL )
hit:hit:hit:hit:hit:hit:act_move.c:    for ( rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:hit:hit:act_move.c:	if ( rch->riding == mount )
hit:hit:hit:hit:hit:hit:act_move.c:    if ( rch != NULL && rch->riding == mount )
hit:hit:hit:hit:hit:hit:act_move.c:    ch->riding = mount;
hit:hit:hit:hit:hit:hit:act_move.c:    switch ( ch->position )
hit:hit:hit:hit:hit:hit:act_move.c:	ch->position = POS_SLEEPING;
hit:hit:hit:hit:hit:hit:act_move.c:	if (ch->position != POS_SLEEPING)
hit:hit:hit:hit:hit:hit:act_move.c:	ch->position = POS_RESTING;
hit:hit:hit:hit:hit:hit:act_move.c:  ch->move_speed = MOVE_WALK;
hit:hit:hit:hit:hit:hit:act_move.c:  ch->move_speed = MOVE_RUN;
hit:hit:hit:hit:hit:hit:act_move.c:  ch->move_speed = MOVE_SNEAK;
hit:hit:hit:hit:hit:hit:act_move.c:    if ( ch->riding == NULL )
hit:hit:hit:hit:hit:hit:act_move.c:    act("You stop riding $N.", ch, ch->riding, NULL, NULL, NULL, TO_CHAR, SENSE_SIGHT );
hit:hit:hit:hit:hit:hit:act_move.c:    act("$n stops riding $N.", ch, ch->riding, NULL, NULL, NULL, TO_ROOM, SENSE_SIGHT );
hit:hit:hit:hit:hit:hit:act_move.c:    ch->riding = NULL;
hit:hit:hit:hit:hit:hit:act_move.c:    for ( controls = ch->in_room->contents; controls != NULL; controls = controls->next_content )
hit:hit:hit:hit:hit:hit:act_move.c:        in_room = ch->in_room;
hit:hit:hit:hit:hit:hit:act_move.c:    for ( vch = in_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:hit:hit:hit:act_move.c:    in_room = ch->in_room;
hit:hit:hit:hit:hit:hit:act_move.c:    for ( vch = to_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:hit:hit:hit:act_move.c:    for ( building = ch->in_room->contents; building != NULL; building = building->next_content )
hit:hit:hit:hit:hit:hit:act_move.c:	REMOVE_BIT(ch->affected_by, AFF_HIDE);
hit:hit:hit:hit:hit:hit:act_move.c:	SET_BIT(ch->affected_by, AFF_HIDE);
hit:hit:hit:hit:hit:hit:act_move.c:    if (IS_SET(ch->affected_by, AFF_INVISIBLE) )
hit:hit:hit:hit:hit:hit:act_move.c:        REMOVE_BIT   ( ch->affected_by, AFF_INVISIBLE	);
hit:hit:hit:hit:hit:hit:act_obj.c:    if ( ch->carry_number + 1 > can_carry_n( ch ) )
hit:hit:hit:hit:hit:hit:act_obj.c:    if ( ch->carry_weight + get_obj_weight( obj ) > can_carry_w( ch ) )
hit:hit:hit:hit:hit:hit:act_obj.c:	    obj = get_obj_list( ch, arg1, ch->in_room->contents );
hit:hit:hit:hit:hit:hit:act_obj.c:	    for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:hit:act_obj.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:hit:act_obj.c:	for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:hit:act_obj.c:	obj_to_room( create_money( amount, coin ), ch->in_room, TRUE );
hit:hit:hit:hit:hit:hit:act_obj.c:	obj_to_room( obj, ch->in_room, TRUE );
hit:hit:hit:hit:hit:hit:act_obj.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:hit:act_obj.c:		obj_to_room( obj, ch->in_room, TRUE );
hit:hit:hit:hit:hit:hit:act_obj.c:    if ( !str_cmp( arg, "channel" ) && is_name( arg, ch->in_room->name ) )
hit:hit:hit:hit:hit:hit:act_obj.c:    if ( !str_cmp( arg, "lake" ) && is_name( arg, ch->in_room->name ) )
hit:hit:hit:hit:hit:hit:act_obj.c:    if ( !str_cmp( arg, "river" ) && is_name( arg, ch->in_room->name ) )
hit:hit:hit:hit:hit:hit:act_obj.c:    if ( !str_cmp( arg, "stream" ) && is_name( arg, ch->in_room->name ) )
hit:hit:hit:hit:hit:hit:act_obj.c:    if ( !str_cmp( arg, "waterfall" ) && is_name( arg, ch->in_room->name ) )
hit:hit:hit:hit:hit:hit:act_obj.c:	if ( !IS_SET( ch->in_room->room_flags, ROOM_DRINKABLE_WATER )
hit:hit:hit:hit:hit:hit:act_obj.c:    && IS_SET( ch->in_room->sector->flags, SECTOR_OUTDOORS ) )
hit:hit:hit:hit:hit:hit:act_obj.c:      ch->in_room->water += obj->value[1];
hit:hit:hit:hit:hit:hit:act_obj.c:    && IS_SET( ch->in_room->sector->flags, SECTOR_OUTDOORS ) )
hit:hit:hit:hit:hit:hit:act_obj.c:	for ( obj = ch->in_room->contents; obj; obj = obj->next_content )
hit:hit:hit:hit:hit:hit:act_obj.c:	&& ( !IS_SET( ch->in_room->room_flags, ROOM_DRINKABLE_WATER )
hit:hit:hit:hit:hit:hit:act_obj.c:    && ch->pcdata->condition[COND_DRUNK] > 10
hit:hit:hit:hit:hit:hit:act_obj.c:	ch->pcdata->condition[COND_THIRST] = 48;
hit:hit:hit:hit:hit:hit:act_obj.c:	    ch->pcdata->condition[COND_THIRST] = 48;
hit:hit:hit:hit:hit:hit:act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_DRUNK]  > 10 )
hit:hit:hit:hit:hit:hit:act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_FULL]   > 40 )
hit:hit:hit:hit:hit:hit:act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_THIRST] > 40 )
hit:hit:hit:hit:hit:hit:act_obj.c:	    ch->pcdata->condition[COND_FULL] = UMIN( ch->pcdata->condition[COND_FULL], 48 );
hit:hit:hit:hit:hit:hit:act_obj.c:	    ch->pcdata->condition[COND_THIRST] = UMIN( ch->pcdata->condition[COND_THIRST], 48 );
hit:hit:hit:hit:hit:hit:act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_FULL] > 40 )
hit:hit:hit:hit:hit:hit:act_obj.c:	    condition = ch->pcdata->condition[COND_FULL];
hit:hit:hit:hit:hit:hit:act_obj.c:	    if ( condition == 0 && ch->pcdata->condition[COND_FULL] > 0 )
hit:hit:hit:hit:hit:hit:act_obj.c:	    else if ( ch->pcdata->condition[COND_FULL] > 40 )
hit:hit:hit:hit:hit:hit:act_obj.c:    && ch->wearing[*wear_info[location].dependency] == NULL )
hit:hit:hit:hit:hit:hit:act_obj.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:hit:hit:hit:hit:hit:act_obj.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:hit:act_obj.c:    && ch->wearing[*wear_info[gn_wear_on_belt].dependency] == NULL )
hit:hit:hit:hit:hit:hit:act_obj.c:    for ( obj = ch->wearing[gn_wear_on_belt]; obj != NULL; obj = obj->next_worn )
hit:hit:hit:hit:hit:hit:act_obj.c:	  for ( vch = ch->in_room->people; vch != NULL; vch = vch_next )
hit:hit:hit:hit:hit:hit:act_obj.c:	    vch_next	= vch->next_in_room;
hit:hit:hit:hit:hit:hit:act_obj.c:	if ( ( obj = get_obj_list( ch, arg1, ch->in_room->contents ) ) == NULL )
hit:hit:hit:hit:hit:hit:act_obj.c:/*        if ( IS_SET(ch->act, PLR_HOLYWALK) )
hit:hit:hit:hit:hit:hit:act_obj.c:    && ( objfrom = get_obj_list( ch, arg2, ch->in_room->contents ) ) == NULL )
hit:hit:hit:hit:hit:hit:act_obj.c:/*        if ( IS_SET(ch->act, PLR_HOLYWALK ) )
hit:hit:hit:hit:hit:hit:act_obj.c:/*    if ( IS_SET(ch->act, PLR_HOLYWALK ) )
hit:hit:hit:hit:hit:hit:act_obj.c:    if ( ch->predelay_info == NULL )
hit:hit:hit:hit:hit:hit:act_obj.c:    type =  ch->predelay_info->number;
hit:hit:hit:hit:hit:hit:act_obj.c:    victim = ch->predelay_info->victim1;
hit:hit:hit:hit:hit:hit:act_obj.c:    obj = ch->predelay_info->obj1;
hit:hit:hit:hit:hit:hit:act_obj.c:    objfrom = ch->predelay_info->obj2;
hit:hit:hit:hit:hit:hit:act_obj.c:	|| obj->in_room != ch->in_room )
hit:hit:hit:hit:hit:hit:act_obj.c:	|| objfrom->in_room != ch->in_room )
hit:hit:hit:hit:hit:hit:act_obj.c:      || victim->in_room != ch->in_room
hit:hit:hit:hit:hit:hit:act_obj.c:	sprintf( buf, "%s is a bloody thief!", ch->name );
hit:hit:hit:hit:hit:hit:act_obj.c:    if ( ch->carry_number + 1 > can_carry_n( ch ) )
hit:hit:hit:hit:hit:hit:act_obj.c:    if ( ch->carry_weight + get_obj_weight( obj ) > can_carry_w( ch ) )
hit:hit:hit:hit:hit:hit:act_obj.c:	    obj_to_room( obj, ch->in_room, TRUE );
hit:hit:hit:hit:hit:hit:act_obj.c:	obj_to_room( item, ch->in_room, TRUE );
hit:hit:hit:hit:hit:hit:act_obj.c:	obj_to_room( item, ch->in_room, TRUE );
hit:hit:hit:hit:hit:hit:act_wiz.c:	free_string( ch->pcdata->bamfin, MEM_PCDATA );
hit:hit:hit:hit:hit:hit:act_wiz.c:	ch->pcdata->bamfin = str_dup( argument );
hit:hit:hit:hit:hit:hit:act_wiz.c:    for ( rch = char_list; rch != NULL; rch = rch->next )
hit:hit:hit:hit:hit:hit:act_wiz.c:	if ( !IS_NPC(rch) && !str_cmp( rch->name, name ) )
hit:hit:hit:hit:hit:hit:act_wiz.c:    rch->next = char_list;
hit:hit:hit:hit:hit:hit:act_wiz.c:	free_string( ch->pcdata->bamfout, MEM_PCDATA );
hit:hit:hit:hit:hit:hit:act_wiz.c:	ch->pcdata->bamfout = str_dup( argument );
hit:hit:hit:hit:hit:hit:act_wiz.c:	&&   d->character->in_room == ch->in_room )
hit:hit:hit:hit:hit:hit:act_wiz.c:	location = ch->in_room;
hit:hit:hit:hit:hit:hit:act_wiz.c:	&& !can_build( ( ch->desc->original != NULL ?
hit:hit:hit:hit:hit:hit:act_wiz.c:	                 ch->desc->original : ch), victim->pIndexData->area ) )
hit:hit:hit:hit:hit:hit:act_wiz.c:    original = ch->in_room;
hit:hit:hit:hit:hit:hit:act_wiz.c:    for ( wch = char_list; wch != NULL; wch = wch->next )
hit:hit:hit:hit:hit:hit:act_wiz.c:    if ( !IS_SET(ch->act, PLR_WIZINVIS) )
hit:hit:hit:hit:hit:hit:act_wiz.c:	    (ch->pcdata != NULL && ch->pcdata->bamfout[0] != '\0')
hit:hit:hit:hit:hit:hit:act_wiz.c:	    ? ch->pcdata->bamfout : "leaves in a swirling mist",
hit:hit:hit:hit:hit:hit:act_wiz.c:    if ( !IS_SET(ch->act, PLR_WIZINVIS) )
hit:hit:hit:hit:hit:hit:act_wiz.c:	    (ch->pcdata != NULL && ch->pcdata->bamfin[0] != '\0')
hit:hit:hit:hit:hit:hit:act_wiz.c:	    ? ch->pcdata->bamfin : "appears in a swirling mist",
hit:hit:hit:hit:hit:hit:act_wiz.c:    location = ( arg[0] == '\0' ) ? ch->in_room : find_location( ch, arg );
hit:hit:hit:hit:hit:hit:act_wiz.c:    if ( ch->in_room != location && room_is_private( location )
hit:hit:hit:hit:hit:hit:act_wiz.c:    for ( rch = location->people; rch; rch = rch->next_in_room )
hit:hit:hit:hit:hit:hit:act_wiz.c:	one_argument( rch->name, buf );
hit:hit:hit:hit:hit:hit:act_wiz.c:    sprintf( buf, "Reboot by %s.", ch->name );
hit:hit:hit:hit:hit:hit:act_wiz.c:        sprintf( buf, "Reboot for code by %s.", ch->name );
hit:hit:hit:hit:hit:hit:act_wiz.c:    sprintf( buf, "Shutdown by %s.", ch->name );
hit:hit:hit:hit:hit:hit:act_wiz.c:	    if ( d->snoop_by == ch->desc )
hit:hit:hit:hit:hit:hit:act_wiz.c:    if ( ch->desc != NULL )
hit:hit:hit:hit:hit:hit:act_wiz.c:	for ( d = ch->desc->snoop_by; d != NULL; d = d->snoop_by )
hit:hit:hit:hit:hit:hit:act_wiz.c:    victim->desc->snoop_by = ch->desc;
hit:hit:hit:hit:hit:hit:act_wiz.c:    if ( ch->desc == NULL )
hit:hit:hit:hit:hit:hit:act_wiz.c:    if ( ch->desc->original != NULL )
hit:hit:hit:hit:hit:hit:act_wiz.c:    ch->desc->character = victim;
hit:hit:hit:hit:hit:hit:act_wiz.c:    ch->desc->original  = ch;
hit:hit:hit:hit:hit:hit:act_wiz.c:    victim->desc        = ch->desc;
hit:hit:hit:hit:hit:hit:act_wiz.c:    ch->desc            = NULL;
hit:hit:hit:hit:hit:hit:act_wiz.c:    ch->switched_into	= victim;
hit:hit:hit:hit:hit:hit:act_wiz.c:    if ( ch->desc == NULL )
hit:hit:hit:hit:hit:hit:act_wiz.c:    if ( ch->desc->original == NULL )
hit:hit:hit:hit:hit:hit:act_wiz.c:    ch->desc->character       = ch->desc->original;
hit:hit:hit:hit:hit:hit:act_wiz.c:    ch->desc->original        = NULL;
hit:hit:hit:hit:hit:hit:act_wiz.c:    ch->desc->character->desc = ch->desc; 
hit:hit:hit:hit:hit:hit:act_wiz.c:    ch->desc                  = NULL;
hit:hit:hit:hit:hit:hit:act_wiz.c:    ch->switched_into	      = NULL;
hit:hit:hit:hit:hit:hit:act_wiz.c:    char_to_room( victim, ch->in_room, TRUE );
hit:hit:hit:hit:hit:hit:act_wiz.c:	obj_to_room( obj, ch->in_room, TRUE );
hit:hit:hit:hit:hit:hit:act_wiz.c:	for ( victim = ch->in_room->people; victim != NULL; victim = vnext )
hit:hit:hit:hit:hit:hit:act_wiz.c:	for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:hit:act_wiz.c:    for ( rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:hit:hit:act_wiz.c:        sprintf( log_buf, "Log: %s changed %s's password.",ch->name,victim->name );
hit:hit:hit:hit:hit:hit:act_wiz.c:        sprintf( log_buf, "%s changed %s's password.",ch->name,victim->name );
hit:hit:hit:hit:hit:hit:act_wiz.c:    sprintf( log_buf, "%s: %s %s %s",ch->name,arg1,arg2,arg3 );
hit:hit:hit:hit:hit:hit:act_wiz.c:    if ( !can_build( ch, ch->in_room->area ) )
hit:hit:hit:hit:hit:hit:act_wiz.c:    location = ch->in_room;
hit:hit:hit:hit:hit:hit:act_wiz.c:      s = sector_lookup( arg3, ch->in_room->area );
hit:hit:hit:hit:hit:hit:act_wiz.c:	    vch_next = vch->next;
hit:hit:hit:hit:hit:hit:act_wiz.c:		if (IS_SET(vch->act, PLR_AFK)) {
hit:hit:hit:hit:hit:hit:act_wiz.c:		    REMOVE_BIT(vch->act, PLR_AFK);
hit:hit:hit:hit:hit:hit:act_wiz.c:		if (was_afk) SET_BIT(vch->act, PLR_AFK);
hit:hit:hit:hit:hit:hit:act_wiz.c:    if ( IS_SET(ch->act, PLR_WIZINVIS) )
hit:hit:hit:hit:hit:hit:act_wiz.c:	REMOVE_BIT(ch->act, PLR_WIZINVIS);
hit:hit:hit:hit:hit:hit:act_wiz.c:	SET_BIT(ch->act, PLR_WIZINVIS);
hit:hit:hit:hit:hit:hit:act_wiz.c:    if (IS_SET(ch->act, PLR_HOLYLIGHT)) {
hit:hit:hit:hit:hit:hit:act_wiz.c:        REMOVE_BIT(ch->act, PLR_HOLYLIGHT);
hit:hit:hit:hit:hit:hit:act_wiz.c:        SET_BIT(ch->act, PLR_HOLYLIGHT);
hit:hit:hit:hit:hit:hit:act_wiz.c:	REMOVE_BIT(ch->act, PLR_HOLYSPEECH);
hit:hit:hit:hit:hit:hit:act_wiz.c:	SET_BIT(ch->act, PLR_HOLYSPEECH);
hit:hit:hit:hit:hit:hit:act_wiz.c:    if (IS_SET(ch->act, PLR_HOLYNAME)) {
hit:hit:hit:hit:hit:hit:act_wiz.c:        REMOVE_BIT(ch->act, PLR_HOLYNAME);
hit:hit:hit:hit:hit:hit:act_wiz.c:        SET_BIT(ch->act, PLR_HOLYNAME);
hit:hit:hit:hit:hit:hit:act_wiz.c:    if (IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:hit:hit:act_wiz.c:        REMOVE_BIT(ch->act, PLR_HOLYWALK);
hit:hit:hit:hit:hit:hit:act_wiz.c:        SET_BIT(ch->act, PLR_HOLYWALK);
hit:hit:hit:hit:hit:hit:act_wiz.c:    if (IS_SET(ch->act, PLR_HOLYVNUM)) {
hit:hit:hit:hit:hit:hit:act_wiz.c:        REMOVE_BIT(ch->act, PLR_HOLYVNUM);
hit:hit:hit:hit:hit:hit:act_wiz.c:        SET_BIT(ch->act, PLR_HOLYVNUM);
hit:hit:hit:hit:hit:hit:act_wiz.c:	    IS_SET(ch->act, PLR_HOLYLIGHT) ? "ON" : "OFF");
hit:hit:hit:hit:hit:hit:act_wiz.c:	    IS_SET(ch->act, PLR_HOLYNAME) ? "ON" : "OFF");
hit:hit:hit:hit:hit:hit:act_wiz.c:	    IS_SET(ch->act, PLR_HOLYWALK) ? "ON" : "OFF");
hit:hit:hit:hit:hit:hit:act_wiz.c:	    IS_SET(ch->act, PLR_HOLYVNUM) ? "ON" : "OFF");
hit:hit:hit:hit:hit:hit:change.c:  if ( ch->dynamic_descr )
hit:hit:hit:hit:hit:hit:change.c:    free_string( ch->dynamic_descr, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:change.c:  ch->dynamic_descr = NULL;
hit:hit:hit:hit:hit:hit:change.c:        ch->dynamic_descr = str_dup( c );
hit:hit:hit:hit:hit:hit:change.c:        send_to_char( ch->dynamic_descr, ch );
hit:hit:hit:hit:hit:hit:change.c:      ch->language = i; 
hit:hit:hit:hit:hit:hit:character:act_wiz.c:	&&   d->character->in_room == ch->in_room )
hit:hit:hit:hit:hit:hit:character:act_wiz.c:	    if ( d->snoop_by == ch->desc )
hit:hit:hit:hit:hit:hit:character:act_wiz.c:	for ( d = ch->desc->snoop_by; d != NULL; d = d->snoop_by )
hit:hit:hit:hit:hit:hit:character:comm.c:	sprintf( log_buf, "%s@%s has connected.", ch->name, d->host );
hit:hit:hit:hit:hit:hit:character:comm.c:	sprintf( log_buf, "%s@%s has entered the game.", ch->name, d->host );
hit:hit:hit:hit:hit:hit:character:comm.c:	  ch->name, d->host );
hit:hit:hit:hit:hit:hit:character:comm.c:	&& !str_cmp( d->character->name, ch->name ) )
hit:hit:hit:hit:hit:hit:character:comm.c:		d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
hit:hit:hit:hit:hit:hit:character:comm.c:    sprintf( log_buf, "%s@%s reconnected.", ch->name, d->host );
hit:hit:hit:hit:hit:hit:character:handler.c:    for ( paf_old = ch->affected; paf_old != NULL; paf_old = paf_old->next )
hit:hit:hit:hit:hit:hit:character:olc.c:	for ( ed = ch->in_room->extra_descr; ed != NULL; ed = ed->next )
hit:hit:hit:hit:hit:hit:character:olc.c:	ed->description = str_dup_tab( ch->pnote->text, TRUE );
hit:hit:hit:hit:hit:hit:character:olc.c:	for ( ed = ch->in_room->extra_descr; ed != NULL; ed = ed->next )
hit:hit:hit:hit:hit:hit:character:olc.c:	ch->pnote->text = str_dup_tab( ed->description, FALSE );
hit:hit:hit:hit:hit:hit:character:olc.c:		pAppend->next = ch->in_room->area->reset_first;
hit:hit:hit:hit:hit:hit:character:olc.c:    for ( ed = ch->in_room->extra_descr; ed != NULL; ed = ed->next )
hit:hit:hit:hit:hit:hit:character:olc.c:	ed->next = ch->in_room->extra_descr;
hit:hit:hit:hit:hit:hit:character:olc.c:	    ch->in_room->extra_descr = ed->next;
hit:hit:hit:hit:hit:hit:comm.c:	sprintf( log_buf, "Closing link to %s.", ch->name );
hit:hit:hit:hit:hit:hit:comm.c:	    ch->desc = NULL;
hit:hit:hit:hit:hit:hit:comm.c:	if ( IS_SET(ch->act, PLR_BLANK) )
hit:hit:hit:hit:hit:hit:comm.c:	if ( IS_SET(ch->act, PLR_TELNET_GA) )
hit:hit:hit:hit:hit:hit:comm.c:   if( ch->prompt == NULL )
hit:hit:hit:hit:hit:hit:comm.c:   else if ( ch->prompt[0] == '\0' )
hit:hit:hit:hit:hit:hit:comm.c:            sprintf( buf2, "%d", ch->hit[HIT_LOC_BODY] );
hit:hit:hit:hit:hit:hit:comm.c:            sprintf( buf2, "%d", ch->max_hit );
hit:hit:hit:hit:hit:hit:comm.c:            if ( IS_IMMORTAL(ch) && IS_SET(ch->act, PLR_WIZINVIS) )
hit:hit:hit:hit:hit:hit:comm.c:            sprintf( buf2, "%d", ch->mana );
hit:hit:hit:hit:hit:hit:comm.c:            sprintf( buf2, "%d", ch->max_mana );
hit:hit:hit:hit:hit:hit:comm.c:            sprintf( buf2, "%d", ch->move );
hit:hit:hit:hit:hit:hit:comm.c:            sprintf( buf2, "%d", ch->max_move );
hit:hit:hit:hit:hit:hit:comm.c:            if( ch->in_room != NULL )
hit:hit:hit:hit:hit:hit:comm.c:		((!IS_NPC(ch) && IS_SET(ch->act,PLR_HOLYLIGHT)) ||
hit:hit:hit:hit:hit:hit:comm.c:		 (!IS_AFFECTED(ch,AFF_BLIND) && !room_is_dark( ch->in_room, ch ) != VISION_NORMAL))
hit:hit:hit:hit:hit:hit:comm.c:		? ch->in_room->name : "darkness");
hit:hit:hit:hit:hit:hit:comm.c:            if( ch->in_room != NULL )
hit:hit:hit:hit:hit:hit:comm.c:               sprintf( buf2, "%s", ch->in_room->name );
hit:hit:hit:hit:hit:hit:comm.c:            if( IS_IMMORTAL( ch ) && ch->in_room != NULL )
hit:hit:hit:hit:hit:hit:comm.c:               sprintf( buf2, "%d", ch->in_room->vnum );
hit:hit:hit:hit:hit:hit:comm.c:            if( IS_IMMORTAL( ch ) && ch->in_room != NULL )
hit:hit:hit:hit:hit:hit:comm.c:               sprintf( buf2, "%s", ch->in_room->area->name );
hit:hit:hit:hit:hit:hit:comm.c:   write_to_buffer( ch->desc, buf, point - buf );
hit:hit:hit:hit:hit:hit:comm.c:	if ( strcmp( crypt( argument, ch->pcdata->pwd ), ch->pcdata->pwd ) )
hit:hit:hit:hit:hit:hit:comm.c:	if ( check_reconnect( d, ch->name, TRUE ) )
hit:hit:hit:hit:hit:hit:comm.c:	if ( IS_SET( ch->act, PLR_REJECTED ) )
hit:hit:hit:hit:hit:hit:comm.c:		ch->pcdata->rejected );
hit:hit:hit:hit:hit:hit:comm.c:		REJECTED_DIR, capitalize( ch->name ) );
hit:hit:hit:hit:hit:hit:comm.c:	if (IS_SET(ch->act, PLR_AFK))
hit:hit:hit:hit:hit:hit:comm.c:	    REMOVE_BIT(ch->act, PLR_AFK);
hit:hit:hit:hit:hit:hit:comm.c:	sprintf( log_buf, "%s@%s has connected.", ch->name, d->host );
hit:hit:hit:hit:hit:hit:comm.c:	sprintf( buf, "\n\rWelcome back, %s.\n\r", ch->name );
hit:hit:hit:hit:hit:hit:comm.c:	if ( IS_SET( ch->act, PLR_UNAPPROVED ) )
hit:hit:hit:hit:hit:hit:comm.c:	ch->next	= char_list;
hit:hit:hit:hit:hit:hit:comm.c:	if ( ch->level == 0 )
hit:hit:hit:hit:hit:hit:comm.c:	    ch->perm_stat_phys_str
hit:hit:hit:hit:hit:hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_phys_str_mod;
hit:hit:hit:hit:hit:hit:comm.c:	    ch->perm_stat_phys_dex
hit:hit:hit:hit:hit:hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_phys_dex_mod;
hit:hit:hit:hit:hit:hit:comm.c:	    ch->perm_stat_phys_tou
hit:hit:hit:hit:hit:hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_phys_tou_mod;
hit:hit:hit:hit:hit:hit:comm.c:	    ch->perm_stat_phys_qui
hit:hit:hit:hit:hit:hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_phys_qui_mod;
hit:hit:hit:hit:hit:hit:comm.c:	    ch->perm_stat_ment_int
hit:hit:hit:hit:hit:hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_ment_int_mod;
hit:hit:hit:hit:hit:hit:comm.c:	    ch->perm_offense = 10;
hit:hit:hit:hit:hit:hit:comm.c:	    ch->level	= 1;
hit:hit:hit:hit:hit:hit:comm.c:	    ch->max_hit = race_array[ch->race]->hits_base
hit:hit:hit:hit:hit:hit:comm.c:    + dice( race_array[ch->race]->hitnodice, race_array[ch->race]->hitsizedice );
hit:hit:hit:hit:hit:hit:comm.c:	    ch->hit[HIT_LOC_BODY]	= ch->max_hit;
hit:hit:hit:hit:hit:hit:comm.c:	    ch->max_mana = race_array[ch->race]->mana;
hit:hit:hit:hit:hit:hit:comm.c:	    ch->mana	= ch->max_mana;
hit:hit:hit:hit:hit:hit:comm.c:	    ch->max_move = race_array[ch->race]->move;
hit:hit:hit:hit:hit:hit:comm.c:	    ch->move	= ch->max_move;
hit:hit:hit:hit:hit:hit:comm.c:	    ch->vision_min = race_array[ch->race]->vision_min;
hit:hit:hit:hit:hit:hit:comm.c:	    ch->vision_max = race_array[ch->race]->vision_max;
hit:hit:hit:hit:hit:hit:comm.c:	    ch->vision_range = race_array[ch->race]->vision_range;
hit:hit:hit:hit:hit:hit:comm.c:	    ch->prompt = NULL;
hit:hit:hit:hit:hit:hit:comm.c:	    ch->height = race_array[ch->race]->height_base
hit:hit:hit:hit:hit:hit:comm.c:                         + dice( race_array[ch->race]->heightnodice,
hit:hit:hit:hit:hit:hit:comm.c:                                 race_array[ch->race]->heightsizedice );
hit:hit:hit:hit:hit:hit:comm.c:	    ch->weight = race_array[ch->race]->weight_base
hit:hit:hit:hit:hit:hit:comm.c:                         + dice( race_array[ch->race]->weightnodice,
hit:hit:hit:hit:hit:hit:comm.c:                                 race_array[ch->race]->weightsizedice );
hit:hit:hit:hit:hit:hit:comm.c:            ch->pcdata->learned[gsn_common] = 100;
hit:hit:hit:hit:hit:hit:comm.c:	else if ( ch->in_room != NULL )
hit:hit:hit:hit:hit:hit:comm.c:	    char_to_room( ch, ch->in_room, FALSE );
hit:hit:hit:hit:hit:hit:comm.c:	sprintf( log_buf, "%s@%s has entered the game.", ch->name, d->host );
hit:hit:hit:hit:hit:hit:comm.c:	if ( IS_SET(ch->act, PLR_DENY) )
hit:hit:hit:hit:hit:hit:comm.c:        if (IS_SET(ch->act, PLR_DEAD) )
hit:hit:hit:hit:hit:hit:comm.c:	pwdnew = crypt( argument, ch->name );
hit:hit:hit:hit:hit:hit:comm.c:	free_string( ch->pcdata->pwd, MEM_PCDATA );
hit:hit:hit:hit:hit:hit:comm.c:	ch->pcdata->pwd	= str_dup( pwdnew );
hit:hit:hit:hit:hit:hit:comm.c:	if ( strcmp( crypt( argument, ch->pcdata->pwd ), ch->pcdata->pwd ) )
hit:hit:hit:hit:hit:hit:comm.c:	case 'm': case 'M': ch->sex = SEX_MALE;    break;
hit:hit:hit:hit:hit:hit:comm.c:	case 'f': case 'F': ch->sex = SEX_FEMALE;  break;
hit:hit:hit:hit:hit:hit:comm.c:		ch->race = iRace;
hit:hit:hit:hit:hit:hit:comm.c:	    if ( race_array[ch->race]->classes[iClass] == TRUE )
hit:hit:hit:hit:hit:hit:comm.c:		ch->class = iClass;
hit:hit:hit:hit:hit:hit:comm.c:	if ( iClass == MAX_CLASS || race_array[ch->race]->classes[iClass] == FALSE )
hit:hit:hit:hit:hit:hit:comm.c:	ch->long_descr = str_dup( argument );
hit:hit:hit:hit:hit:hit:comm.c:	ch->short_descr = str_dup( argument );
hit:hit:hit:hit:hit:hit:comm.c:	ch->namelist = str_dup( argument );
hit:hit:hit:hit:hit:hit:comm.c:	    strcpy( buf, ch->description );
hit:hit:hit:hit:hit:hit:comm.c:	    free_string( ch->description, MEM_PCDATA );
hit:hit:hit:hit:hit:hit:comm.c:	    ch->description = str_dup( buf );
hit:hit:hit:hit:hit:hit:comm.c:	ch->pcdata->email_address = str_dup( argument );
hit:hit:hit:hit:hit:hit:comm.c:	ch->pcdata->rejected = str_dup( "" );
hit:hit:hit:hit:hit:hit:comm.c:	SET_BIT( ch->act, PLR_UNAPPROVED );
hit:hit:hit:hit:hit:hit:comm.c:        SET_BIT( ch->act, PLR_HOLYLIGHT );
hit:hit:hit:hit:hit:hit:comm.c:	  ch->name, d->host );
hit:hit:hit:hit:hit:hit:comm.c:    for ( ch = char_list; ch != NULL; ch = ch->next )
hit:hit:hit:hit:hit:hit:comm.c:	&& ( ch->name && !str_cmp( ch->name, name ) )
hit:hit:hit:hit:hit:hit:comm.c:	&& IS_SET( ch->act, PLR_REVIEWING ) )
hit:hit:hit:hit:hit:hit:comm.c:    for ( ch = char_list; ch != NULL; ch = ch->next )
hit:hit:hit:hit:hit:hit:comm.c:	&& ( !fConn || ch->desc == NULL )
hit:hit:hit:hit:hit:hit:comm.c:	&& !str_cmp( d->character->name, ch->name ) )
hit:hit:hit:hit:hit:hit:comm.c:		d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
hit:hit:hit:hit:hit:hit:comm.c:		if ( ch->switched_into != NULL )
hit:hit:hit:hit:hit:hit:comm.c:		    do_return( ch->switched_into, "" );
hit:hit:hit:hit:hit:hit:comm.c:    if ( ch->desc != NULL )
hit:hit:hit:hit:hit:hit:comm.c:	free_descriptor( ch->desc );
hit:hit:hit:hit:hit:hit:comm.c:    ch->desc         = d;
hit:hit:hit:hit:hit:hit:comm.c:    ch->timer        = 0;
hit:hit:hit:hit:hit:hit:comm.c:    sprintf( log_buf, "%s@%s reconnected.", ch->name, d->host );
hit:hit:hit:hit:hit:hit:comm.c:    if (IS_SET(ch->act, PLR_AFK)) 
hit:hit:hit:hit:hit:hit:comm.c:	REMOVE_BIT(ch->act, PLR_AFK);
hit:hit:hit:hit:hit:hit:comm.c:    ||   ch->desc == NULL
hit:hit:hit:hit:hit:hit:comm.c:    ||   ch->desc->connected != CON_PLAYING
hit:hit:hit:hit:hit:hit:comm.c:    ||   ch->was_in_room == NULL 
hit:hit:hit:hit:hit:hit:comm.c:    ||   ch->in_room != get_room_index( ROOM_VNUM_LIMBO ) )
hit:hit:hit:hit:hit:hit:comm.c:    ch->timer = 0;
hit:hit:hit:hit:hit:hit:comm.c:    char_to_room( ch, ch->was_in_room, FALSE );
hit:hit:hit:hit:hit:hit:comm.c:    ch->was_in_room	= NULL;
hit:hit:hit:hit:hit:hit:comm.c:    if ( txt == NULL || ch->desc == NULL )
hit:hit:hit:hit:hit:hit:comm.c:    if ( ch->desc->showstr_point )
hit:hit:hit:hit:hit:hit:comm.c:	write_to_buffer( ch->desc, txt, strlen( txt ) );
hit:hit:hit:hit:hit:hit:comm.c:    ch->desc->showstr_head = alloc_mem( strlen( txt ) + 1 );
hit:hit:hit:hit:hit:hit:comm.c:    strcpy( ch->desc->showstr_head, txt );
hit:hit:hit:hit:hit:hit:comm.c:    ch->desc->showstr_point = ch->desc->showstr_head;
hit:hit:hit:hit:hit:hit:comm.c:    show_string( ch->desc, "" );
hit:hit:hit:hit:hit:hit:comm.c:    to = ch->in_room->people;
hit:hit:hit:hit:hit:hit:comm.c:	to = vch->in_room->people;
hit:hit:hit:hit:hit:hit:db.c:  pArea = ch->in_room->area;
hit:hit:hit:hit:hit:hit:db.c:    pArea = ch->in_room->area;
hit:hit:hit:hit:hit:hit:db.c:    ch->in_room->area->vnum_final = vnum;
hit:hit:hit:hit:hit:hit:db.c:    ch->next_fighting		= NULL;
hit:hit:hit:hit:hit:hit:db.c:    ch->name			= &str_empty[0];
hit:hit:hit:hit:hit:hit:db.c:    ch->short_descr		= &str_empty[0];
hit:hit:hit:hit:hit:hit:db.c:    ch->long_descr		= &str_empty[0];
hit:hit:hit:hit:hit:hit:db.c:    ch->dynamic_descr		= NULL;
hit:hit:hit:hit:hit:hit:db.c:    ch->description		= &str_empty[0];
hit:hit:hit:hit:hit:hit:db.c:    ch->prompt			= NULL;
hit:hit:hit:hit:hit:hit:db.c:    ch->predelay_time		= 0;
hit:hit:hit:hit:hit:hit:db.c:    ch->predelay_info		= NULL;
hit:hit:hit:hit:hit:hit:db.c:    ch->position		= POS_STANDING;
hit:hit:hit:hit:hit:hit:db.c:    ch->hit[HIT_LOC_BODY]	= 20;
hit:hit:hit:hit:hit:hit:db.c:    ch->max_hit			= 20;
hit:hit:hit:hit:hit:hit:db.c:    ch->mana			= 100;
hit:hit:hit:hit:hit:hit:db.c:    ch->max_mana		= 100;
hit:hit:hit:hit:hit:hit:db.c:    ch->move			= 100;
hit:hit:hit:hit:hit:hit:db.c:    ch->max_move		= 100;
hit:hit:hit:hit:hit:hit:db.c:    ch->perm_stat_phys_str	= 40;
hit:hit:hit:hit:hit:hit:db.c:    ch->perm_stat_phys_dex	= 40;
hit:hit:hit:hit:hit:hit:db.c:    ch->perm_stat_phys_tou	= 40;
hit:hit:hit:hit:hit:hit:db.c:    ch->perm_stat_phys_qui	= 40;
hit:hit:hit:hit:hit:hit:db.c:    ch->perm_stat_ment_int	= 40;
hit:hit:hit:hit:hit:hit:db.c:    ch->pReset			= NULL;
hit:hit:hit:hit:hit:hit:db.c:    ch->riding			= NULL;
hit:hit:hit:hit:hit:hit:db.c:    ch->switched_into		= NULL;
hit:hit:hit:hit:hit:hit:db.c:    ch->language		= 0;
hit:hit:hit:hit:hit:hit:db.c:    ch->move_speed		= MOVE_WALK;
hit:hit:hit:hit:hit:hit:db.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:hit:db.c:    for ( paf = ch->affected; paf != NULL; paf = paf_next )
hit:hit:hit:hit:hit:hit:db.c:    free_string( ch->name, MEM_MOB_NAME_FREE_CHAR );
hit:hit:hit:hit:hit:hit:db.c:    free_string( ch->namelist, MEM_MOB_NAMELIST_FREE_CHAR );
hit:hit:hit:hit:hit:hit:db.c:    free_string( ch->short_descr, MEM_MOB_SHORT_DESCR_FREE_CHAR );
hit:hit:hit:hit:hit:hit:db.c:    free_string( ch->long_descr, MEM_MOB_LONG_DESCR_FREE_CHAR );
hit:hit:hit:hit:hit:hit:db.c:    free_string( ch->description, MEM_MOB_DESCRIPTION_FREE_CHAR );
hit:hit:hit:hit:hit:hit:db.c:    free_string( ch->spec_fun_name, MEM_MOB_SPEC_FUN_NAME_FREE_CHAR );
hit:hit:hit:hit:hit:hit:db.c:    free_string( ch->prompt, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:db.c:    free_predelay( ch->predelay_info );
hit:hit:hit:hit:hit:hit:db.c:    if ( ch->pcdata != NULL )
hit:hit:hit:hit:hit:hit:db.c:	free_string( ch->pcdata->pwd, MEM_PCDATA );
hit:hit:hit:hit:hit:hit:db.c:	free_string( ch->pcdata->bamfin, MEM_PCDATA );
hit:hit:hit:hit:hit:hit:db.c:	free_string( ch->pcdata->bamfout, MEM_PCDATA );
hit:hit:hit:hit:hit:hit:db.c:	free_string( ch->pcdata->email_address, MEM_PCDATA );
hit:hit:hit:hit:hit:hit:db.c:	free_string( ch->pcdata->rejected, MEM_PCDATA );
hit:hit:hit:hit:hit:hit:db.c:	ch->pcdata->next = pcdata_free;
hit:hit:hit:hit:hit:hit:db.c:	pcdata_free      = ch->pcdata;
hit:hit:hit:hit:hit:hit:db.c:    ch->next	     = char_free;
hit:hit:hit:hit:hit:hit:emote.c:  if ( ach->leader != NULL ) 
hit:hit:hit:hit:hit:hit:emote.c:    ach = ach->leader;
hit:hit:hit:hit:hit:hit:emote.c:  if ( bch->leader != NULL ) 
hit:hit:hit:hit:hit:hit:emote.c:    bch = bch->leader;
hit:hit:hit:hit:hit:hit:emote.c:  for (vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room) {
hit:hit:hit:hit:hit:hit:emote.c:    vch->leader=NULL;
hit:hit:hit:hit:hit:hit:emote.c:	vch->leader=ch;
hit:hit:hit:hit:hit:hit:emote.c:  for (vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room) {              
hit:hit:hit:hit:hit:hit:emote.c:      if (vch->leader==ch) {
hit:hit:hit:hit:hit:hit:emote.c:	  wch->leader = ch;
hit:hit:hit:hit:hit:hit:emote.c:	  wch->leader = ch;
hit:hit:hit:hit:hit:hit:emote.c:	strcat(buf, ((vch == wch) ? "you" : him_her[wch->sex]));
hit:hit:hit:hit:hit:hit:emote.c:          wch->leader = ch;
hit:hit:hit:hit:hit:hit:emote.c:        strcat(buf, ((vch == wch) ? "your" : his_her[wch->sex]));
hit:hit:hit:hit:hit:hit:emote.c:          wch->leader = ch;
hit:hit:hit:hit:hit:hit:emote.c:        strcat(buf, ((vch == wch) ? "you" : he_she[wch->sex]));
hit:hit:hit:hit:hit:hit:emote.orig:  if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_NO_EMOTE) )
hit:hit:hit:hit:hit:hit:emote.orig:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:hit:hit:hit:emote.orig:		      strcat( buf, him_her[wch->sex] );
hit:hit:hit:hit:hit:hit:emote.orig:		      strcat( buf, his_her[wch->sex] );
hit:hit:hit:hit:hit:hit:emote.orig:		      strcat( buf, he_she[wch->sex] );
hit:hit:hit:hit:hit:hit:fight.c:	combat_next = ch->next_fighting;
hit:hit:hit:hit:hit:hit:fight.c:	if ( ( victim = ch->fighting ) == NULL || ch->in_room == NULL )
hit:hit:hit:hit:hit:hit:fight.c:      if ( --ch->strike_rank < 0 )
hit:hit:hit:hit:hit:hit:fight.c:	if ( IS_AWAKE(ch) && ch->in_room == victim->in_room )
hit:hit:hit:hit:hit:hit:fight.c:	ch->strike_rank = calc_strike_rank( ch );
hit:hit:hit:hit:hit:hit:fight.c:	if ( ( victim = ch->fighting ) == NULL )
hit:hit:hit:hit:hit:hit:fight.c:	&& --ch->strike_rank_2 < 0 )
hit:hit:hit:hit:hit:hit:fight.c:	    if ( IS_AWAKE(ch) && ch->in_room == victim->in_room )
hit:hit:hit:hit:hit:hit:fight.c:	    ch->strike_rank_2 = calc_strike_rank( ch ) + 100
hit:hit:hit:hit:hit:hit:fight.c:	    if ( ( victim = ch->fighting ) == NULL )
hit:hit:hit:hit:hit:hit:fight.c:	for ( rch = ch->in_room->people; rch != NULL; rch = rch_next )
hit:hit:hit:hit:hit:hit:fight.c:	    rch_next = rch->next_in_room;
hit:hit:hit:hit:hit:hit:fight.c:	    if ( IS_AWAKE(rch) && rch->fighting == NULL )
hit:hit:hit:hit:hit:hit:fight.c:    if ( victim->position == POS_DEAD || ch->in_room != victim->in_room )
hit:hit:hit:hit:hit:hit:fight.c:    attacker_roll = ch->perm_offense + ch->mod_offense;
hit:hit:hit:hit:hit:hit:fight.c:	if ( dice(1,100) > ch->perm_offense && !number_bits( 5 ) )
hit:hit:hit:hit:hit:hit:fight.c:	    ch->perm_offense++;
hit:hit:hit:hit:hit:hit:fight.c:	dam = dice( ch->damnodice, ch->damsizedice );
hit:hit:hit:hit:hit:hit:fight.c:	    dam = dam + ch->damplus;
hit:hit:hit:hit:hit:hit:fight.c:	    dam += ch->damplus;
hit:hit:hit:hit:hit:hit:fight.c:	    dam += dice( ch->damnodice, ch->damsizedice ) + ch->damplus;
hit:hit:hit:hit:hit:hit:fight.c:    if ( victim->position == POS_DEAD || ch->in_room != victim->in_room )
hit:hit:hit:hit:hit:hit:fight.c:    attacker_roll = ch->perm_offense + ch->mod_offense;
hit:hit:hit:hit:hit:hit:fight.c:	if ( dice(1,100) > ch->pcdata->learned[gsn_dual_wield]
hit:hit:hit:hit:hit:hit:fight.c:	    ch->pcdata->learned[gsn_dual_wield]++;
hit:hit:hit:hit:hit:hit:fight.c:    if ( !IS_NPC(ch) && ch->pcdata->learned[gsn_enhanced_damage] > 0 )
hit:hit:hit:hit:hit:hit:fight.c:	dam += dam * ch->pcdata->learned[gsn_enhanced_damage] / 100;
hit:hit:hit:hit:hit:hit:fight.c:	    REMOVE_BIT( ch->affected_by, AFF_INVISIBLE );
hit:hit:hit:hit:hit:hit:fight.c:	    if ( IS_NPC(ch) && number_percent( ) < ch->level / 2 )
hit:hit:hit:hit:hit:hit:fight.c:	    if ( IS_NPC(ch) && number_percent( ) < ch->level / 2 )
hit:hit:hit:hit:hit:hit:fight.c:		(IS_NPC(ch) ? ch->short_descr : ch->name),
hit:hit:hit:hit:hit:hit:fight.c:  if ( ch->fighting != NULL )
hit:hit:hit:hit:hit:hit:fight.c:    if ( ch->desc != NULL
hit:hit:hit:hit:hit:hit:fight.c:    && ch->desc->original != NULL 
hit:hit:hit:hit:hit:hit:fight.c:    && IS_SET( ch->desc->original->act, PLR_PEACEFUL ) )
hit:hit:hit:hit:hit:hit:fight.c:  else if ( IS_SET( ch->act, PLR_PEACEFUL ) )
hit:hit:hit:hit:hit:hit:fight.c:    if ( ch->fighting != NULL )
hit:hit:hit:hit:hit:hit:fight.c:    ch->fighting = victim;
hit:hit:hit:hit:hit:hit:fight.c:    ch->next_fighting = combat_list;
hit:hit:hit:hit:hit:hit:fight.c:    for ( fch = char_list; fch != NULL; fch = fch->next )
hit:hit:hit:hit:hit:hit:fight.c:	    fch->fighting	= NULL;
hit:hit:hit:hit:hit:hit:fight.c:	if ( fBoth && fch->fighting == ch )
hit:hit:hit:hit:hit:hit:fight.c:    combat_list = ch->next_fighting;
hit:hit:hit:hit:hit:hit:fight.c:    for ( fch = combat_list; fch != NULL; fch = fch->next_fighting )
hit:hit:hit:hit:hit:hit:fight.c:	if ( fch->next_fighting == ch )
hit:hit:hit:hit:hit:hit:fight.c:	    fch->next_fighting = ch->next_fighting;
hit:hit:hit:hit:hit:hit:fight.c:    ch->next_fighting = NULL;
hit:hit:hit:hit:hit:hit:fight.c:	name		= ch->short_descr;
hit:hit:hit:hit:hit:hit:fight.c:    if ( IS_NPC( ch ) && ( pMobIndex = ch->pIndexData ) != NULL )
hit:hit:hit:hit:hit:hit:fight.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:hit:fight.c:    obj_to_room( corpse, ch->in_room, TRUE );
hit:hit:hit:hit:hit:hit:fight.c:    was_in_room = ch->in_room;
hit:hit:hit:hit:hit:hit:fight.c:	    ch->in_room = pexit->to_room;
hit:hit:hit:hit:hit:hit:fight.c:    ch->in_room = was_in_room;
hit:hit:hit:hit:hit:hit:fight.c:    lch = (ch->leader != NULL) ? ch->leader : ch;
hit:hit:hit:hit:hit:hit:fight.c:    for ( gch = ch->in_room->people; gch != NULL; gch = gch->next_in_room )
hit:hit:hit:hit:hit:hit:fight.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:hit:fight.c:		obj_to_room( obj, ch->in_room, TRUE );
hit:hit:hit:hit:hit:hit:fight.c:  if ( IS_AFFECTED(ch, AFF_CHARM) && ch->master == victim )
hit:hit:hit:hit:hit:hit:fight.c:  if ( ch->fighting != NULL )
hit:hit:hit:hit:hit:hit:fight.c:    if ( ch->fighting == victim )
hit:hit:hit:hit:hit:hit:fight.c:    ch->fighting = victim;
hit:hit:hit:hit:hit:hit:fight.c:    if ( arg[0] == '\0' && ch->fighting == NULL )
hit:hit:hit:hit:hit:hit:fight.c:	victim = ch->fighting;
hit:hit:hit:hit:hit:hit:fight.c:	if ( get_skill( ch, gsn_bash ) < ch->perm_stat_phys_str )
hit:hit:hit:hit:hit:hit:fight.c:	ch->position = POS_RESTING;
hit:hit:hit:hit:hit:hit:fight.c:    if ( ch->position < POS_STANDING )
hit:hit:hit:hit:hit:hit:fight.c:    was_in = ch->in_room;
hit:hit:hit:hit:hit:hit:fight.c:	if ( ( now_in = ch->in_room ) == was_in )
hit:hit:hit:hit:hit:hit:fight.c:	ch->in_room = was_in;
hit:hit:hit:hit:hit:hit:fight.c:	ch->in_room = now_in;
hit:hit:hit:hit:hit:hit:fight.c:    if ( ch->fighting == victim )
hit:hit:hit:hit:hit:hit:fight.c:    if ( arg[0] == '\0' && ch->fighting == NULL )
hit:hit:hit:hit:hit:hit:fight.c:	victim = ch->fighting;
hit:hit:hit:hit:hit:hit:fight.c:    if ( ( victim = ch->fighting ) == NULL )
hit:hit:hit:hit:hit:hit:fight.c:	act("$n attempted to disarm you.", ch, ch->fighting, NULL, NULL, NULL, TO_VICT, SENSE_SIGHT );
hit:hit:hit:hit:hit:hit:fight.c:	act("$N maintained their grip on their weapon.", ch, ch->fighting, NULL, NULL, NULL, TO_CHAR, SENSE_SIGHT|SENSE_TOUCH );
hit:hit:hit:hit:hit:hit:fight.c:    if ( !IS_NPC(victim) && victim->level >= ch->level )
hit:hit:hit:hit:hit:hit:fight.c:  if ( ch->in_room == NULL )
hit:hit:hit:hit:hit:hit:fight.c:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:hit:hit:hit:fight.c:    if ( vch->fighting == ch )
hit:hit:hit:hit:hit:hit:fight.c:  if ( i == 0 && ch->fighting != NULL )
hit:hit:hit:hit:hit:hit:fileio.c:            ch->in_room ? ch->in_room->vnum : 0, ch->name, str );
hit:hit:hit:hit:hit:hit:flora.c:  for ( fi = ch->in_room->flora; fi != NULL; fi = fi->next )
hit:hit:hit:hit:hit:hit:flora.c:    write_environment_area( ch->in_room->area );
hit:hit:hit:hit:hit:hit:flora.c:    if ( ch->in_room->flora == NULL )
hit:hit:hit:hit:hit:hit:flora.c:    update_flora( ch->in_room );
hit:hit:hit:hit:hit:hit:flora.c:    for ( fi = ch->in_room->flora; fi != NULL; fi = fi->next )
hit:hit:hit:hit:hit:hit:flora.c:    fi->next = ch->in_room->flora;
hit:hit:hit:hit:hit:hit:flora.c:    ch->in_room->flora = fi;
hit:hit:hit:hit:hit:hit:flora.c:    destroy_flora( fi, ch->in_room );
hit:hit:hit:hit:hit:hit:handler.c:    if ( ch->desc != NULL && ch->desc->original != NULL )
hit:hit:hit:hit:hit:hit:handler.c:	ch = ch->desc->original;
hit:hit:hit:hit:hit:hit:handler.c:    if ( ch->trust != 0 )
hit:hit:hit:hit:hit:hit:handler.c:	return ch->trust;
hit:hit:hit:hit:hit:hit:handler.c:    if ( IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
hit:hit:hit:hit:hit:hit:handler.c:	return ch->level;
hit:hit:hit:hit:hit:hit:handler.c:    year = (long) current_time - (long) ch->pcdata->birth;
hit:hit:hit:hit:hit:hit:handler.c:    return ( ch->pcdata->played + (int) (current_time - ch->pcdata->logon) ) / 3600;
hit:hit:hit:hit:hit:hit:handler.c:    return URANGE( 3, ch->perm_stat_phys_str + ch->mod_stat_phys_str, 200 );
hit:hit:hit:hit:hit:hit:handler.c:    return URANGE( 3, ch->perm_stat_ment_int + ch->mod_stat_ment_int, 200 );
hit:hit:hit:hit:hit:hit:handler.c:    return URANGE( 3, ch->perm_stat_phys_dex + ch->mod_stat_phys_dex, 200 );
hit:hit:hit:hit:hit:hit:handler.c:    return URANGE( 3, ch->perm_stat_phys_qui + ch->mod_stat_phys_qui, 200 );
hit:hit:hit:hit:hit:hit:handler.c:    return URANGE( 3, ch->perm_stat_phys_tou + ch->mod_stat_phys_tou, 200 );
hit:hit:hit:hit:hit:hit:handler.c:	return ch->pcdata->learned[sn];
hit:hit:hit:hit:hit:hit:handler.c:    if ( ch->pIndexData == NULL )
hit:hit:hit:hit:hit:hit:handler.c:    return ch->pIndexData->learned[sn];
hit:hit:hit:hit:hit:hit:handler.c:	return ch->pcdata->power_level[sn];
hit:hit:hit:hit:hit:hit:handler.c:    if ( ch->pIndexData == NULL )
hit:hit:hit:hit:hit:hit:handler.c:    return ch->pIndexData->power_level[sn];
hit:hit:hit:hit:hit:hit:handler.c:    if ( !IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
hit:hit:hit:hit:hit:hit:handler.c:    if ( !IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
hit:hit:hit:hit:hit:hit:handler.c:    delay_new->next	= ch->pcdata->skill_delays;
hit:hit:hit:hit:hit:hit:handler.c:    ch->pcdata->skill_delays	= delay_new;
hit:hit:hit:hit:hit:hit:handler.c:    if ( ch->pcdata->skill_delays == NULL )
hit:hit:hit:hit:hit:hit:handler.c:    if ( delay == ch->pcdata->skill_delays )
hit:hit:hit:hit:hit:hit:handler.c:	ch->pcdata->skill_delays	= delay->next;
hit:hit:hit:hit:hit:hit:handler.c:	for ( prev = ch->pcdata->skill_delays; prev != NULL; prev = prev->next )
hit:hit:hit:hit:hit:hit:handler.c:  for ( delay = ch->pcdata->skill_delays; delay != NULL; delay = delay->next )
hit:hit:hit:hit:hit:hit:handler.c:	SET_BIT( ch->affected_by, paf->bitvector );
hit:hit:hit:hit:hit:hit:handler.c:	REMOVE_BIT( ch->affected_by, paf->bitvector );
hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_STAT_PHYS_STR: ch->mod_stat_phys_str	+= mod;	break;
hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_STAT_PHYS_DEX: ch->mod_stat_phys_dex	+= mod;	break;
hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_STAT_PHYS_TOU: ch->mod_stat_phys_tou	+= mod;	break;
hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_STAT_PHYS_QUI: ch->mod_stat_phys_qui	+= mod;	break;
hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_STAT_MENT_INT: ch->mod_stat_ment_int	+= mod;	break;
hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_SEX:           ch->sex			+= mod;	break;
hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_MANA:          ch->max_mana		+= mod;	break;
hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_HIT:           ch->max_hit		+= mod;	break;
hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_MOVE:          ch->max_move		+= mod;	break;
hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_HITROLL:       ch->hitroll		+= mod;	break;
hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_DAMROLL:       ch->damroll		+= mod;	break;
hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_SAVING_PARA:   ch->saving_throw		+= mod;	break;
hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_SAVING_ROD:    ch->saving_throw		+= mod;	break;
hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_SAVING_PETRI:  ch->saving_throw		+= mod;	break;
hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_SAVING_BREATH: ch->saving_throw		+= mod;	break;
hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_SAVING_SPELL:  ch->saving_throw		+= mod;	break;
hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_ABSORBTION:    ch->general_absorb	+= mod; break;
hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_CHANNELING:    ch->channeling		+= mod; break;
hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_VISION_PROFILE:  ch->vision_min += mod;
hit:hit:hit:hit:hit:hit:handler.c:				ch->vision_max += mod;		break;
hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_VISION_RANGE:	ch->vision_range += mod;	break;
hit:hit:hit:hit:hit:hit:handler.c:	    obj_to_room( wield, ch->in_room, TRUE );
hit:hit:hit:hit:hit:hit:handler.c:    paf_new->next	= ch->affected;
hit:hit:hit:hit:hit:hit:handler.c:    ch->affected	= paf_new;
hit:hit:hit:hit:hit:hit:handler.c:    if ( ch->affected == NULL )
hit:hit:hit:hit:hit:hit:handler.c:    if ( paf == ch->affected )
hit:hit:hit:hit:hit:hit:handler.c:	ch->affected	= paf->next;
hit:hit:hit:hit:hit:hit:handler.c:	for ( prev = ch->affected; prev != NULL; prev = prev->next )
hit:hit:hit:hit:hit:hit:handler.c:    for ( paf = ch->affected; paf != NULL; paf = paf_next )
hit:hit:hit:hit:hit:hit:handler.c:    for ( paf = ch->affected; paf != NULL; paf = paf->next )
hit:hit:hit:hit:hit:hit:handler.c:    for ( paf_old = ch->affected; paf_old != NULL; paf_old = paf_old->next )
hit:hit:hit:hit:hit:hit:handler.c:    if ( (room = ch->in_room) == NULL )
hit:hit:hit:hit:hit:hit:handler.c:	--ch->in_room->area->nplayer;
hit:hit:hit:hit:hit:hit:handler.c:    ch->in_room->light_mod -= ch->light;
hit:hit:hit:hit:hit:hit:handler.c:    if ( ch == ch->in_room->people )
hit:hit:hit:hit:hit:hit:handler.c:	ch->in_room->people = ch->next_in_room;
hit:hit:hit:hit:hit:hit:handler.c:	for ( prev = ch->in_room->people; prev; prev = prev->next_in_room )
hit:hit:hit:hit:hit:hit:handler.c:		prev->next_in_room = ch->next_in_room;
hit:hit:hit:hit:hit:hit:handler.c:    ch->in_room      = NULL;
hit:hit:hit:hit:hit:hit:handler.c:    ch->next_in_room = NULL;
hit:hit:hit:hit:hit:hit:handler.c:    ch->in_room		= pRoomIndex;
hit:hit:hit:hit:hit:hit:handler.c:    ch->next_in_room	= pRoomIndex->people;
hit:hit:hit:hit:hit:hit:handler.c:	++ch->in_room->area->nplayer;
hit:hit:hit:hit:hit:hit:handler.c:    ch->in_room->light_mod += ch->light;
hit:hit:hit:hit:hit:hit:handler.c:    obj->next_content	 = ch->carrying;
hit:hit:hit:hit:hit:hit:handler.c:    ch->carrying	 = obj;
hit:hit:hit:hit:hit:hit:handler.c:    ch->carry_number	+= 1;
hit:hit:hit:hit:hit:hit:handler.c:    ch->carry_weight	+= get_obj_weight( obj );
hit:hit:hit:hit:hit:hit:handler.c:    if ( ch->carrying == obj )
hit:hit:hit:hit:hit:hit:handler.c:	ch->carrying = obj->next_content;
hit:hit:hit:hit:hit:hit:handler.c:	for ( prev = ch->carrying; prev != NULL; prev = prev->next_content )
hit:hit:hit:hit:hit:hit:handler.c:    ch->carry_number	-= 1;
hit:hit:hit:hit:hit:hit:handler.c:    ch->carry_weight	-= get_obj_weight( obj );
hit:hit:hit:hit:hit:hit:handler.c:    return ch->wearing[iWear];
hit:hit:hit:hit:hit:hit:handler.c:    iWear = race_array[ch->race]->hit_loc_location[hit_loc];
hit:hit:hit:hit:hit:hit:handler.c:	obj_to_room( obj, ch->in_room, TRUE );
hit:hit:hit:hit:hit:hit:handler.c:    if ( ch->wearing[iWear] == NULL )
hit:hit:hit:hit:hit:hit:handler.c:	ch->wearing[iWear] = obj;
hit:hit:hit:hit:hit:hit:handler.c:    else if ( ch->wearing[iWear]->size > 50 )
hit:hit:hit:hit:hit:hit:handler.c:	obj->next_worn = ch->wearing[iWear]->next_worn;
hit:hit:hit:hit:hit:hit:handler.c:	ch->wearing[iWear]->next_worn = obj;
hit:hit:hit:hit:hit:hit:handler.c:	obj->next_worn = ch->wearing[iWear];
hit:hit:hit:hit:hit:hit:handler.c:	ch->wearing[iWear] = obj;
hit:hit:hit:hit:hit:hit:handler.c:    &&   ch->in_room != NULL )
hit:hit:hit:hit:hit:hit:handler.c:	ch->in_room->light_mod += obj->value[0];
hit:hit:hit:hit:hit:hit:handler.c:	ch->light += obj->value[0];
hit:hit:hit:hit:hit:hit:handler.c:	ch->in_room->light_mod += GLOW_LIGHT;
hit:hit:hit:hit:hit:hit:handler.c:	ch->light += GLOW_LIGHT;
hit:hit:hit:hit:hit:hit:handler.c:	ch->in_room->light_mod += DARK_LIGHT;
hit:hit:hit:hit:hit:hit:handler.c:	ch->light += DARK_LIGHT;
hit:hit:hit:hit:hit:hit:handler.c:    if ( ch->wearing[wear_loc] == NULL )
hit:hit:hit:hit:hit:hit:handler.c:    else if ( ch->wearing[wear_loc] == obj )
hit:hit:hit:hit:hit:hit:handler.c:	ch->wearing[wear_loc] = obj->next_worn;
hit:hit:hit:hit:hit:hit:handler.c:	for ( o = ch->wearing[wear_loc]; o != NULL; o = o->next_worn )
hit:hit:hit:hit:hit:hit:handler.c:    if ( obj != ch->carrying )
hit:hit:hit:hit:hit:hit:handler.c:	for ( prev = ch->carrying; prev != NULL; prev = prev->next_content )
hit:hit:hit:hit:hit:hit:handler.c:	obj->next_content = ch->carrying;
hit:hit:hit:hit:hit:hit:handler.c:	ch->carrying = obj;
hit:hit:hit:hit:hit:hit:handler.c:    &&   ch->in_room != NULL )
hit:hit:hit:hit:hit:hit:handler.c:	ch->in_room->light_mod -= obj->value[0];
hit:hit:hit:hit:hit:hit:handler.c:	ch->light -= obj->value[0];
hit:hit:hit:hit:hit:hit:handler.c:	ch->in_room->light_mod -= GLOW_LIGHT;
hit:hit:hit:hit:hit:hit:handler.c:	ch->light -= GLOW_LIGHT;
hit:hit:hit:hit:hit:hit:handler.c:	ch->in_room->light_mod -= DARK_LIGHT;
hit:hit:hit:hit:hit:hit:handler.c:	ch->light -= DARK_LIGHT;
hit:hit:hit:hit:hit:hit:handler.c:    if ( ch->wearing[wear_loc] != NULL
hit:hit:hit:hit:hit:hit:handler.c:    || ch->in_room == NULL )
hit:hit:hit:hit:hit:hit:handler.c:	    while( (od = ch->wearing[i]) != NULL )
hit:hit:hit:hit:hit:hit:handler.c:		obj_to_room( od, ch->in_room, TRUE );
hit:hit:hit:hit:hit:hit:handler.c:    for ( ch = char_list; ch != NULL; ch = ch->next )
hit:hit:hit:hit:hit:hit:handler.c:	if ( (p = ch->predelay_info) != NULL )
hit:hit:hit:hit:hit:hit:handler.c:    if ( ch->in_room == NULL )
hit:hit:hit:hit:hit:hit:handler.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:hit:handler.c:	if ( ch->pReset != NULL )
hit:hit:hit:hit:hit:hit:handler.c:	    ch->pReset->target = NULL;
hit:hit:hit:hit:hit:hit:handler.c:    if ( ch->desc != NULL && ch->desc->original != NULL )
hit:hit:hit:hit:hit:hit:handler.c:    for ( wch = char_list; wch != NULL; wch = wch->next )
hit:hit:hit:hit:hit:hit:handler.c:	if ( wch->reply == ch )
hit:hit:hit:hit:hit:hit:handler.c:	    wch->reply = NULL;
hit:hit:hit:hit:hit:hit:handler.c:	if ( (p = wch->predelay_info) != NULL )
hit:hit:hit:hit:hit:hit:handler.c:    while ( ch->hunting != NULL )
hit:hit:hit:hit:hit:hit:handler.c:	remove_hunting( ch, ch->hunting->victim, TRUE );
hit:hit:hit:hit:hit:hit:handler.c:       char_list = ch->next;
hit:hit:hit:hit:hit:hit:handler.c:		prev->next = ch->next;
hit:hit:hit:hit:hit:hit:handler.c:    if ( ch->desc )
hit:hit:hit:hit:hit:hit:handler.c:        ch->desc->character = NULL;
hit:hit:hit:hit:hit:hit:handler.c:    for ( rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:hit:hit:handler.c:	( !is_name( arg, rch->name ) && !is_name( arg, rch->namelist ) ) )
hit:hit:hit:hit:hit:hit:handler.c:    for ( wch = char_list; wch != NULL ; wch = wch->next )
hit:hit:hit:hit:hit:hit:handler.c:	( !is_name( arg, wch->name ) && !is_name( arg, wch->namelist ) ) )
hit:hit:hit:hit:hit:hit:handler.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:hit:hit:hit:hit:hit:handler.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:hit:hit:hit:hit:hit:handler.c:    obj = get_obj_list( ch, argument, ch->in_room->contents );
hit:hit:hit:hit:hit:hit:handler.c:    diff = ch->vision_current - room_light( pRoomIndex );
hit:hit:hit:hit:hit:hit:handler.c:    for ( rch = pRoomIndex->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:hit:hit:handler.c:    if ( (!IS_NPC(ch) && IS_SET(ch->act, PLR_HOLYLIGHT)) 
hit:hit:hit:hit:hit:hit:handler.c:    if ( room_is_dark( ch->in_room, ch ) == VISION_TOO_DARK
hit:hit:hit:hit:hit:hit:handler.c:    || room_is_dark( ch->in_room, ch ) == VISION_TOO_BRIGHT )
hit:hit:hit:hit:hit:hit:handler.c:    if ( room_is_dark( ch->in_room, ch ) == VISION_HAZY )
hit:hit:hit:hit:hit:hit:handler.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_HOLYLIGHT) )
hit:hit:hit:hit:hit:hit:handler.c:    if ( room_is_dark( ch->in_room, ch ) == VISION_TOO_DARK
hit:hit:hit:hit:hit:hit:handler.c:    || room_is_dark( ch->in_room, ch ) == VISION_TOO_BRIGHT )
hit:hit:hit:hit:hit:hit:handler.c:    if ( !IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
hit:hit:hit:hit:hit:hit:handler.c:    if ( IS_NPC( victim ) && ch->pIndexData == victim->pIndexData )
hit:hit:hit:hit:hit:hit:handler.c:    aggr_bits = ch->aggression;
hit:hit:hit:hit:hit:hit:handler.c:	if ( victim->weight > ch->weight )
hit:hit:hit:hit:hit:hit:handler.c:	aggr += ch->weight - victim->weight;
hit:hit:hit:hit:hit:hit:handler.c:	aggr -= (ch->max_hit - ch->hit[HIT_LOC_BODY])*100/ch->max_hit;
hit:hit:hit:hit:hit:hit:handler.c:	aggr -= race_array[ch->race]->relations[victim->race];
hit:hit:hit:hit:hit:hit:handler.c:    if ( ch->predelay_info != NULL )
hit:hit:hit:hit:hit:hit:handler.c:	free_predelay( ch->predelay_info );
hit:hit:hit:hit:hit:hit:handler.c:    ch->predelay_info = p;
hit:hit:hit:hit:hit:hit:handler.c:    ch->predelay_time = delay;
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( !str_cmp( ch->name, pnote->sender ) )
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( is_name( ch->name, pnote->to_list ) )
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ch->pnote != NULL )
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	pnote	  = alloc_perm( sizeof(*ch->pnote) );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    pnote->sender	= str_dup( ch->name );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    ch->pnote		= pnote;
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	REMOVE_BIT(ch->act, PLR_AFK);
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if (IS_SET(ch->act, PLR_AFK)) {
hit:hit:hit:hit:hit:hit:hit:act_comm.c:       REMOVE_BIT(ch->act, PLR_AFK);
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	SET_BIT(ch->act, PLR_AFK);
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	if ( to_one[0] != '\0' && str_cmp( ch->name, to_one ) )
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( str_cmp( ch->name, pnote->sender ) && to_new[0] != '\0' 
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ch->pnote == NULL || ch->pnote->text[0] == '\0' )
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    oldb = ch->pnote->text;
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	send_to_char( ch->pnote->text, ch );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	strcpy( buf, ch->pnote->text );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->subject, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->subject = str_dup( argument );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->to_list, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->to_list = str_dup( argument );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	if ( ch->pnote != NULL )
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    free_string( ch->pnote->subject, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    free_string( ch->pnote->to_list, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    free_string( ch->pnote->date, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    free_string( ch->pnote->sender, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    ch->pnote->next	= note_free;
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    note_free		= ch->pnote;
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    ch->pnote		= NULL;
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	if ( ch->pnote == NULL )
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    ch->pnote->sender,
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    ch->pnote->subject,
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    ch->pnote->to_list
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	send_to_char( ch->pnote->text, ch );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	if ( ch->pnote == NULL )
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->next			= NULL;
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->date			= str_dup( strtime );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    note_list	= ch->pnote;
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    pnote->next	= ch->pnote;
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	pnote		= ch->pnote;
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	ch->pnote	= NULL;
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    REMOVE_BIT(ch->deaf, channel);
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	position	= ch->position;
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	ch->position	= POS_STANDING;
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	ch->position	= position;
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	&&  !IS_SET(och->deaf, channel) )
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    position		= vch->position;
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    vch->position	= position;
hit:hit:hit:hit:hit:hit:hit:act_comm.c:  gsn = *language_table[ch->language].pgsn;
hit:hit:hit:hit:hit:hit:hit:act_comm.c:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ch->in_room->exit[door] == NULL
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    || ( room = ch->in_room->exit[door]->to_room ) == NULL )
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    for ( vch = room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:hit:hit:hit:hit:act_comm.c:  gsn = *language_table[ch->language].pgsn;
hit:hit:hit:hit:hit:hit:hit:act_comm.c:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:hit:hit:hit:hit:act_comm.c:           sprintf(log_buf, "%s wishes to all \"%s\"",ch->name,argument );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    || ( IS_NPC(victim) && victim->in_room != ch->in_room ) )
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	 || IS_SET(ch->act, PLR_WIZINVIS))
hit:hit:hit:hit:hit:hit:hit:act_comm.c:        sprintf( log_buf, "%s sends to %s \"%s\"", ch->name, victim->name, argument );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:        sprintf( log_buf, "%s wishes to %s \"%s\"", ch->name, victim->name, argument );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ( victim = ch->reply ) == NULL )
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_NO_EMOTE) )
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ch->position  < POS_STUNNED  )
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ch->in_room && !IS_SET( ch->in_room->room_flags, ROOM_RENT )
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    sprintf( log_buf, "%s has quit.", ch->name );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:  //  d = ch->desc;
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    d = ch->desc;
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if (!IS_SET(ch->act, PLR_AFK))
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( IS_AFFECTED(ch, AFF_CHARM) && ch->master != NULL )
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	act( "You don't wish to leave your beloved master!", ch, ch->master, NULL, NULL, NULL, TO_CHAR, SENSE_SIXTH );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	if ( ch->master == NULL )
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ch->master != NULL )
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ch->master != NULL )
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    ch->master        = master;
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    ch->leader        = NULL;
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ch->master == NULL )
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	REMOVE_BIT( ch->affected_by, AFF_CHARM );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    act( "You stop following $N.", ch, ch->master, NULL, NULL, NULL, TO_CHAR, SENSE_SIXTH );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    ch->master = NULL;
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    ch->leader = NULL;
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ch->master != NULL )
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    ch->leader = NULL;
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    for ( fch = char_list; fch != NULL; fch = fch->next )
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	if ( fch->master == ch )
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	if ( fch->leader == ch )
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    fch->leader = fch;
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    for ( och = ch->in_room->people; och != NULL; och = och_next )
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	och_next = och->next_in_room;
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	&&   och->master == ch
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	leader = (ch->leader != NULL) ? ch->leader : ch;
hit:hit:hit:hit:hit:hit:hit:act_comm.c:	for ( gch = char_list; gch != NULL; gch = gch->next )
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ch->master != NULL || ( ch->leader != NULL && ch->leader != ch ) )
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( IS_SET( ch->act, PLR_NO_TELL ) )
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    sprintf( buf, "%s tells the group '%s'.\n\r", ch->name, argument );
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    for ( gch = char_list; gch != NULL; gch = gch->next )
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ach->leader != NULL ) ach = ach->leader;
hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( bch->leader != NULL ) bch = bch->leader;
hit:hit:hit:hit:hit:hit:hit:act_info.c:    if ( ch->desc == NULL )
hit:hit:hit:hit:hit:hit:hit:act_info.c:	    if ( IS_NPC(ch) || IS_SET(ch->act, PLR_COMBINE) )
hit:hit:hit:hit:hit:hit:hit:act_info.c:	if ( IS_NPC(ch) || IS_SET(ch->act, PLR_COMBINE) )
hit:hit:hit:hit:hit:hit:hit:act_info.c:	if ( IS_NPC(ch) || IS_SET(ch->act, PLR_COMBINE) )
hit:hit:hit:hit:hit:hit:hit:act_info.c:	      rch != NULL; rch = rch->next_in_room ) {
hit:hit:hit:hit:hit:hit:hit:act_info.c:	    if ( rch->riding == victim ) {
hit:hit:hit:hit:hit:hit:hit:act_info.c:    for ( rch = list; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:hit:hit:hit:act_info.c:	&&   IS_SET(rch->act, PLR_WIZINVIS)
hit:hit:hit:hit:hit:hit:hit:act_info.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_HOLYLIGHT) )
hit:hit:hit:hit:hit:hit:hit:act_info.c:    if ( ch->desc == NULL )
hit:hit:hit:hit:hit:hit:hit:act_info.c:    if ( ch->position < POS_SLEEPING )
hit:hit:hit:hit:hit:hit:hit:act_info.c:    if ( ch->position == POS_SLEEPING )
hit:hit:hit:hit:hit:hit:hit:act_info.c:    &&   !IS_SET(ch->act, PLR_HOLYLIGHT)
hit:hit:hit:hit:hit:hit:hit:act_info.c:    &&   room_is_dark( ch->in_room, ch ) == VISION_TOO_DARK )
hit:hit:hit:hit:hit:hit:hit:act_info.c:	show_char_to_char( ch->in_room->people, ch );
hit:hit:hit:hit:hit:hit:hit:act_info.c:    &&   !IS_SET(ch->act, PLR_HOLYLIGHT)
hit:hit:hit:hit:hit:hit:hit:act_info.c:    &&   room_is_dark( ch->in_room, ch ) == VISION_TOO_BRIGHT )
hit:hit:hit:hit:hit:hit:hit:act_info.c:	show_char_to_char( ch->in_room->people, ch );
hit:hit:hit:hit:hit:hit:hit:act_info.c:	 sprintf(buf2,"[%d] ", ch->in_room->vnum);
hit:hit:hit:hit:hit:hit:hit:act_info.c:     send_to_char( ch->in_room->name, ch );
hit:hit:hit:hit:hit:hit:hit:act_info.c:	  ( !IS_NPC( ch ) && !IS_SET( ch->act, PLR_BRIEF ) ) )
hit:hit:hit:hit:hit:hit:hit:act_info.c:	 send_to_char( ch->in_room->description, ch );
hit:hit:hit:hit:hit:hit:hit:act_info.c:     if ( IS_SET(ch->act, PLR_AUTOWEATHER) && IS_OUTDOORS(ch))
hit:hit:hit:hit:hit:hit:hit:act_info.c:     update_flora( ch->in_room );
hit:hit:hit:hit:hit:hit:hit:act_info.c:     display_flora( ch, ch->in_room->flora, 0 );
hit:hit:hit:hit:hit:hit:hit:act_info.c:     show_list_to_char( ch->in_room->contents, ch, FALSE, FALSE, FALSE );
hit:hit:hit:hit:hit:hit:hit:act_info.c:     show_char_to_char( ch->in_room->people,   ch );
hit:hit:hit:hit:hit:hit:hit:act_info.c:	for ( obj = ch->in_room->contents; obj != NULL; obj = obj->next_content )
hit:hit:hit:hit:hit:hit:hit:act_info.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:hit:hit:hit:hit:hit:hit:act_info.c:    for ( obj = ch->in_room->contents; obj != NULL; obj = obj->next_content )
hit:hit:hit:hit:hit:hit:hit:act_info.c:    pdesc = get_extra_descr( arg1, ch->in_room->extra_descr );
hit:hit:hit:hit:hit:hit:hit:act_info.c:	if ( (pexit = ch->in_room->exit[door]) == NULL )
hit:hit:hit:hit:hit:hit:hit:act_info.c:    if ( ( pexit = ch->in_room->exit[door] ) == NULL )
hit:hit:hit:hit:hit:hit:hit:act_info.c:    dist = URANGE( 1, ch->vision_range, 200 );
hit:hit:hit:hit:hit:hit:hit:act_info.c:    in_room = ch->in_room;
hit:hit:hit:hit:hit:hit:hit:act_info.c:    update_flora( ch->in_room );
hit:hit:hit:hit:hit:hit:hit:act_info.c:    if ( !IS_SET( ch->in_room->sector->flags, SECTOR_OUTDOORS ) )
hit:hit:hit:hit:hit:hit:hit:act_info.c:    soil_condition( ch, get_water_value( ch->in_room ) );
hit:hit:hit:hit:hit:hit:hit:act_info.c:	if ( ( pexit = ch->in_room->exit[door] ) != NULL
hit:hit:hit:hit:hit:hit:hit:act_info.c:       // && IS_SET( ch->act, PLR_HOLYLIGHT ))
hit:hit:hit:hit:hit:hit:hit:act_info.c:	ch->name,
hit:hit:hit:hit:hit:hit:hit:act_info.c:	IS_NPC(ch) ? "" : ch->short_descr );
hit:hit:hit:hit:hit:hit:hit:act_info.c:	(is_vowel(race_array[ch->race]->race_name[0]) ? "an" : "a" ),
hit:hit:hit:hit:hit:hit:hit:act_info.c:	race_array[ch->race]->race_name);
hit:hit:hit:hit:hit:hit:hit:act_info.c:    if ( get_trust( ch ) != ch->level )
hit:hit:hit:hit:hit:hit:hit:act_info.c:	ch->hit[HIT_LOC_BODY],  ch->max_hit,
hit:hit:hit:hit:hit:hit:hit:act_info.c:	ch->mana, ch->max_mana,
hit:hit:hit:hit:hit:hit:hit:act_info.c:	ch->move, ch->max_move );
hit:hit:hit:hit:hit:hit:hit:act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->condition[COND_DRUNK]   > 10 )
hit:hit:hit:hit:hit:hit:hit:act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->condition[COND_THIRST] ==  0 )
hit:hit:hit:hit:hit:hit:hit:act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->condition[COND_FULL]   ==  0 )
hit:hit:hit:hit:hit:hit:hit:act_info.c:    switch ( ch->position )
hit:hit:hit:hit:hit:hit:hit:act_info.c:    switch( ch->move_speed )
hit:hit:hit:hit:hit:hit:hit:act_info.c:      skill_table[*language_table[ch->language].pgsn].name );
hit:hit:hit:hit:hit:hit:hit:act_info.c:   free_string( ch->prompt, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:act_info.c:   ch->prompt = str_dup( buf );
hit:hit:hit:hit:hit:hit:hit:act_info.c:	if ( ( fImmortalOnly  && wch->level < LEVEL_IMMORTAL ) )
hit:hit:hit:hit:hit:hit:hit:act_info.c:/*	switch ( wch->level )
hit:hit:hit:hit:hit:hit:hit:act_info.c:	if ( IS_IMMORTAL( ch ) || wch->level > LEVEL_IMMORTAL )
hit:hit:hit:hit:hit:hit:hit:act_info.c:		     (IS_SET(wch->act, PLR_AFK) ? "[AFK]" : " "),
hit:hit:hit:hit:hit:hit:hit:act_info.c:                     (IS_SET(wch->act, PLR_WIZINVIS) ? "[INVIS]" : " "),
hit:hit:hit:hit:hit:hit:hit:act_info.c:		     wch->name,
hit:hit:hit:hit:hit:hit:hit:act_info.c:		     wch->short_descr);
hit:hit:hit:hit:hit:hit:hit:act_info.c:    show_list_to_char( ch->carrying, ch, TRUE, TRUE, FALSE );
hit:hit:hit:hit:hit:hit:hit:act_info.c:	for ( obj = ch->wearing[iWear]; obj != NULL; obj = obj->next_worn )
hit:hit:hit:hit:hit:hit:hit:act_info.c:	for ( obj2 = ch->carrying; obj2 != NULL; obj2 = obj2->next_content )
hit:hit:hit:hit:hit:hit:hit:act_info.c:	    &&   victim->in_room->area == ch->in_room->area
hit:hit:hit:hit:hit:hit:hit:act_info.c:	    &&   victim->in_room->area == ch->in_room->area
hit:hit:hit:hit:hit:hit:hit:act_info.c:	    if ( ch->description != NULL )
hit:hit:hit:hit:hit:hit:hit:act_info.c:		strcat( buf, ch->description );
hit:hit:hit:hit:hit:hit:hit:act_info.c:	free_string( ch->description, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:act_info.c:	ch->description = str_dup( buf );
hit:hit:hit:hit:hit:hit:hit:act_info.c:    send_to_char( ch->description ? ch->description : "(None).\n\r", ch );
hit:hit:hit:hit:hit:hit:hit:act_info.c:    if ( strcmp( crypt( arg1, ch->pcdata->pwd ), ch->pcdata->pwd ) )
hit:hit:hit:hit:hit:hit:hit:act_info.c:    pwdnew = crypt( arg2, ch->name );
hit:hit:hit:hit:hit:hit:hit:act_info.c:    free_string( ch->pcdata->pwd, MEM_PCDATA );
hit:hit:hit:hit:hit:hit:hit:act_info.c:    ch->pcdata->pwd = str_dup( pwdnew );
hit:hit:hit:hit:hit:hit:hit:act_info.c:	send_to_char( !IS_SET(ch->deaf, CHANNEL_CHAT)
hit:hit:hit:hit:hit:hit:hit:act_info.c:	    send_to_char( !IS_SET(ch->deaf, CHANNEL_IMMTALK)
hit:hit:hit:hit:hit:hit:hit:act_info.c:	    send_to_char( !IS_SET(ch->deaf, CHANNEL_LOG)
hit:hit:hit:hit:hit:hit:hit:act_info.c:	    REMOVE_BIT (ch->deaf, bit);
hit:hit:hit:hit:hit:hit:hit:act_info.c:	    SET_BIT    (ch->deaf, bit);
hit:hit:hit:hit:hit:hit:hit:act_info.c:	if ( IS_SET(ch->act,PLR_BRIEF))
hit:hit:hit:hit:hit:hit:hit:act_info.c:	    REMOVE_BIT(ch->act,PLR_BRIEF);
hit:hit:hit:hit:hit:hit:hit:act_info.c:	    SET_BIT(ch->act,PLR_BRIEF);
hit:hit:hit:hit:hit:hit:hit:act_info.c:	if ( IS_SET(ch->act,PLR_BLANK))
hit:hit:hit:hit:hit:hit:hit:act_info.c:	    REMOVE_BIT(ch->act,PLR_BLANK);
hit:hit:hit:hit:hit:hit:hit:act_info.c:	    SET_BIT(ch->act,PLR_BLANK);
hit:hit:hit:hit:hit:hit:hit:act_info.c:	if ( IS_SET(ch->act,PLR_PEACEFUL))
hit:hit:hit:hit:hit:hit:hit:act_info.c:	    REMOVE_BIT(ch->act,PLR_PEACEFUL);
hit:hit:hit:hit:hit:hit:hit:act_info.c:	    SET_BIT(ch->act,PLR_PEACEFUL);
hit:hit:hit:hit:hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_BLANK)
hit:hit:hit:hit:hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_BRIEF)
hit:hit:hit:hit:hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_COMBINE)
hit:hit:hit:hit:hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_PEACEFUL)
hit:hit:hit:hit:hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_PROMPT)
hit:hit:hit:hit:hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_TELNET_GA)
hit:hit:hit:hit:hit:hit:hit:act_info.c:	send_to_char( !IS_SET(ch->act, PLR_NO_EMOTE)
hit:hit:hit:hit:hit:hit:hit:act_info.c:	send_to_char( !IS_SET(ch->act, PLR_NO_TELL)
hit:hit:hit:hit:hit:hit:hit:act_info.c:	    SET_BIT    (ch->act, bit);
hit:hit:hit:hit:hit:hit:hit:act_info.c:	    REMOVE_BIT (ch->act, bit);
hit:hit:hit:hit:hit:hit:hit:act_info.c:    ch->pcdata->pagelen = i;
hit:hit:hit:hit:hit:hit:hit:act_info.c:  sprintf( buf, "Page Length (pagelen):  %d\n\r", ch->pcdata->pagelen );
hit:hit:hit:hit:hit:hit:hit:act_move.c:  in_room = ch->in_room;
hit:hit:hit:hit:hit:hit:hit:act_move.c:  if ( ch->riding != NULL && ch->riding->in_room != in_room )
hit:hit:hit:hit:hit:hit:hit:act_move.c:    ch->riding = NULL;
hit:hit:hit:hit:hit:hit:hit:act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:hit:hit:hit:act_move.c:       &&   ch->master != NULL
hit:hit:hit:hit:hit:hit:hit:act_move.c:       &&   in_room == ch->master->in_room 
hit:hit:hit:hit:hit:hit:hit:act_move.c:       &&   !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:hit:hit:hit:act_move.c:      &&  !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:hit:hit:hit:act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:hit:hit:hit:act_move.c:      for ( obj = ch->carrying; obj != NULL; obj = obj->next_content) {
hit:hit:hit:hit:hit:hit:hit:act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:hit:hit:hit:act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:hit:hit:hit:act_move.c:  if ( ch->move_speed < 0 || ch->move_speed >= MOVE_MAX )
hit:hit:hit:hit:hit:hit:hit:act_move.c:    ch->move_speed = MOVE_WALK;
hit:hit:hit:hit:hit:hit:hit:act_move.c:  if ( ch->move < move && ch->riding == NULL )
hit:hit:hit:hit:hit:hit:hit:act_move.c:  if ( ch->riding != NULL && ch->riding->move < 2 * move )
hit:hit:hit:hit:hit:hit:hit:act_move.c:  if ( ch->riding == NULL )
hit:hit:hit:hit:hit:hit:hit:act_move.c:    ch->move -= move;
hit:hit:hit:hit:hit:hit:hit:act_move.c:    ch->riding->move -= 2 * move;
hit:hit:hit:hit:hit:hit:hit:act_move.c:  if ( ch->move_speed == MOVE_SNEAK && ch->riding == NULL )
hit:hit:hit:hit:hit:hit:hit:act_move.c:      if ( ch->next_in_room != NULL )
hit:hit:hit:hit:hit:hit:hit:act_move.c:    if ( ch->riding == NULL )
hit:hit:hit:hit:hit:hit:hit:act_move.c:        move_names[ch->move_speed], TO_ROOM, SENSE_SIGHT|SENSE_HEARING );
hit:hit:hit:hit:hit:hit:hit:act_move.c:      act( "$n leaves $t, riding $N.", ch, ch->riding, NULL, dir_name[door],
hit:hit:hit:hit:hit:hit:hit:act_move.c:  if ( ch->riding != NULL )
hit:hit:hit:hit:hit:hit:hit:act_move.c:    char_from_room( ch->riding );
hit:hit:hit:hit:hit:hit:hit:act_move.c:    char_to_room( ch->riding, to_room, TRUE );
hit:hit:hit:hit:hit:hit:hit:act_move.c:    if ( ch->riding == NULL )
hit:hit:hit:hit:hit:hit:hit:act_move.c:        dir_name_2[rev_dir[door]], move_names[ch->move_speed],
hit:hit:hit:hit:hit:hit:hit:act_move.c:      act( "$n has arrived from $t, riding $N.", ch, ch->riding, NULL,
hit:hit:hit:hit:hit:hit:hit:act_move.c:    fch_next = fch->next_in_room;
hit:hit:hit:hit:hit:hit:hit:act_move.c:    if ( fch->master == ch && fch->position == POS_STANDING
hit:hit:hit:hit:hit:hit:hit:act_move.c:  if (!IS_UNSWITCHED_MOB(ch) && IS_SET(ch->act, PLR_HOLYWALK))
hit:hit:hit:hit:hit:hit:hit:act_move.c:  switch( ch->move_speed )
hit:hit:hit:hit:hit:hit:hit:act_move.c:  if (!IS_UNSWITCHED_MOB(ch) && IS_SET(ch->act, PLR_HOLYWALK))
hit:hit:hit:hit:hit:hit:hit:act_move.c:  switch( ch->move_speed )
hit:hit:hit:hit:hit:hit:hit:act_move.c:	    if ( ( pexit = ch->in_room->exit[door] ) != NULL
hit:hit:hit:hit:hit:hit:hit:act_move.c:    if ( ( pexit = ch->in_room->exit[door] ) == NULL )
hit:hit:hit:hit:hit:hit:hit:act_move.c:	    if ( ( pexit = ch->in_room->exit[dir] ) != NULL
hit:hit:hit:hit:hit:hit:hit:act_move.c:    if ( ( pexit = ch->in_room->exit[dir] ) == NULL
hit:hit:hit:hit:hit:hit:hit:act_move.c:	damage( ch, ch, UMIN(dice(1,pain),dice(1,ch->hit[0])), gsn_tumbling, NULL, gn_wear_none );
hit:hit:hit:hit:hit:hit:hit:act_move.c:	pexit = ch->in_room->exit[door];
hit:hit:hit:hit:hit:hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:hit:hit:hit:hit:act_move.c:	    for ( rch = to_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:hit:hit:hit:act_move.c:	pexit = ch->in_room->exit[door];
hit:hit:hit:hit:hit:hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:hit:hit:hit:hit:act_move.c:	    for ( rch = to_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:hit:hit:hit:act_move.c:	pexit	= ch->in_room->exit[door];
hit:hit:hit:hit:hit:hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:hit:hit:hit:hit:act_move.c:	    for ( rch = to_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:hit:hit:hit:act_move.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:hit:hit:hit:hit:hit:hit:act_move.c:	if ( building->value[0] != ch->in_room->vnum )
hit:hit:hit:hit:hit:hit:hit:act_move.c:	pexit	= ch->in_room->exit[door];
hit:hit:hit:hit:hit:hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:hit:hit:hit:hit:act_move.c:	pexit = ch->in_room->exit[door];
hit:hit:hit:hit:hit:hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:hit:hit:hit:hit:act_move.c:  for ( fi = ch->in_room->flora; fi != NULL; fi = fi->next )
hit:hit:hit:hit:hit:hit:hit:act_move.c:    pexit = ch->in_room->exit[door];
hit:hit:hit:hit:hit:hit:hit:act_move.c:    &&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:hit:hit:hit:hit:act_move.c:    switch ( ch->position )
hit:hit:hit:hit:hit:hit:hit:act_move.c:	ch->position = POS_STANDING;
hit:hit:hit:hit:hit:hit:hit:act_move.c:    switch ( ch->position )
hit:hit:hit:hit:hit:hit:hit:act_move.c:	ch->position = POS_RESTING;
hit:hit:hit:hit:hit:hit:hit:act_move.c:	ch->position = POS_RESTING;
hit:hit:hit:hit:hit:hit:hit:act_move.c:    switch ( ch->position )
hit:hit:hit:hit:hit:hit:hit:act_move.c:	ch->position = POS_RESTING;
hit:hit:hit:hit:hit:hit:hit:act_move.c:    if ( ch->riding != NULL )
hit:hit:hit:hit:hit:hit:hit:act_move.c:    for ( rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:hit:hit:hit:act_move.c:	if ( rch->riding == mount )
hit:hit:hit:hit:hit:hit:hit:act_move.c:    if ( rch != NULL && rch->riding == mount )
hit:hit:hit:hit:hit:hit:hit:act_move.c:    ch->riding = mount;
hit:hit:hit:hit:hit:hit:hit:act_move.c:    switch ( ch->position )
hit:hit:hit:hit:hit:hit:hit:act_move.c:	ch->position = POS_SLEEPING;
hit:hit:hit:hit:hit:hit:hit:act_move.c:	if (ch->position != POS_SLEEPING)
hit:hit:hit:hit:hit:hit:hit:act_move.c:	ch->position = POS_RESTING;
hit:hit:hit:hit:hit:hit:hit:act_move.c:  ch->move_speed = MOVE_WALK;
hit:hit:hit:hit:hit:hit:hit:act_move.c:  ch->move_speed = MOVE_RUN;
hit:hit:hit:hit:hit:hit:hit:act_move.c:  ch->move_speed = MOVE_SNEAK;
hit:hit:hit:hit:hit:hit:hit:act_move.c:    if ( ch->riding == NULL )
hit:hit:hit:hit:hit:hit:hit:act_move.c:    act("You stop riding $N.", ch, ch->riding, NULL, NULL, NULL, TO_CHAR, SENSE_SIGHT );
hit:hit:hit:hit:hit:hit:hit:act_move.c:    act("$n stops riding $N.", ch, ch->riding, NULL, NULL, NULL, TO_ROOM, SENSE_SIGHT );
hit:hit:hit:hit:hit:hit:hit:act_move.c:    ch->riding = NULL;
hit:hit:hit:hit:hit:hit:hit:act_move.c:    for ( controls = ch->in_room->contents; controls != NULL; controls = controls->next_content )
hit:hit:hit:hit:hit:hit:hit:act_move.c:        in_room = ch->in_room;
hit:hit:hit:hit:hit:hit:hit:act_move.c:    for ( vch = in_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:hit:hit:hit:hit:act_move.c:    in_room = ch->in_room;
hit:hit:hit:hit:hit:hit:hit:act_move.c:    for ( vch = to_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:hit:hit:hit:hit:act_move.c:    for ( building = ch->in_room->contents; building != NULL; building = building->next_content )
hit:hit:hit:hit:hit:hit:hit:act_move.c:	REMOVE_BIT(ch->affected_by, AFF_HIDE);
hit:hit:hit:hit:hit:hit:hit:act_move.c:	SET_BIT(ch->affected_by, AFF_HIDE);
hit:hit:hit:hit:hit:hit:hit:act_move.c:    if (IS_SET(ch->affected_by, AFF_INVISIBLE) )
hit:hit:hit:hit:hit:hit:hit:act_move.c:        REMOVE_BIT   ( ch->affected_by, AFF_INVISIBLE	);
hit:hit:hit:hit:hit:hit:hit:act_obj.c:    if ( ch->carry_number + 1 > can_carry_n( ch ) )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:    if ( ch->carry_weight + get_obj_weight( obj ) > can_carry_w( ch ) )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:	    obj = get_obj_list( ch, arg1, ch->in_room->contents );
hit:hit:hit:hit:hit:hit:hit:act_obj.c:	    for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:	for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:	obj_to_room( create_money( amount, coin ), ch->in_room, TRUE );
hit:hit:hit:hit:hit:hit:hit:act_obj.c:	obj_to_room( obj, ch->in_room, TRUE );
hit:hit:hit:hit:hit:hit:hit:act_obj.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:		obj_to_room( obj, ch->in_room, TRUE );
hit:hit:hit:hit:hit:hit:hit:act_obj.c:    if ( !str_cmp( arg, "channel" ) && is_name( arg, ch->in_room->name ) )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:    if ( !str_cmp( arg, "lake" ) && is_name( arg, ch->in_room->name ) )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:    if ( !str_cmp( arg, "river" ) && is_name( arg, ch->in_room->name ) )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:    if ( !str_cmp( arg, "stream" ) && is_name( arg, ch->in_room->name ) )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:    if ( !str_cmp( arg, "waterfall" ) && is_name( arg, ch->in_room->name ) )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:	if ( !IS_SET( ch->in_room->room_flags, ROOM_DRINKABLE_WATER )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:    && IS_SET( ch->in_room->sector->flags, SECTOR_OUTDOORS ) )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:      ch->in_room->water += obj->value[1];
hit:hit:hit:hit:hit:hit:hit:act_obj.c:    && IS_SET( ch->in_room->sector->flags, SECTOR_OUTDOORS ) )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:	for ( obj = ch->in_room->contents; obj; obj = obj->next_content )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:	&& ( !IS_SET( ch->in_room->room_flags, ROOM_DRINKABLE_WATER )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:    && ch->pcdata->condition[COND_DRUNK] > 10
hit:hit:hit:hit:hit:hit:hit:act_obj.c:	ch->pcdata->condition[COND_THIRST] = 48;
hit:hit:hit:hit:hit:hit:hit:act_obj.c:	    ch->pcdata->condition[COND_THIRST] = 48;
hit:hit:hit:hit:hit:hit:hit:act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_DRUNK]  > 10 )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_FULL]   > 40 )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_THIRST] > 40 )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:	    ch->pcdata->condition[COND_FULL] = UMIN( ch->pcdata->condition[COND_FULL], 48 );
hit:hit:hit:hit:hit:hit:hit:act_obj.c:	    ch->pcdata->condition[COND_THIRST] = UMIN( ch->pcdata->condition[COND_THIRST], 48 );
hit:hit:hit:hit:hit:hit:hit:act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_FULL] > 40 )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:	    condition = ch->pcdata->condition[COND_FULL];
hit:hit:hit:hit:hit:hit:hit:act_obj.c:	    if ( condition == 0 && ch->pcdata->condition[COND_FULL] > 0 )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:	    else if ( ch->pcdata->condition[COND_FULL] > 40 )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:    && ch->wearing[*wear_info[location].dependency] == NULL )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:    && ch->wearing[*wear_info[gn_wear_on_belt].dependency] == NULL )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:    for ( obj = ch->wearing[gn_wear_on_belt]; obj != NULL; obj = obj->next_worn )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:	  for ( vch = ch->in_room->people; vch != NULL; vch = vch_next )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:	    vch_next	= vch->next_in_room;
hit:hit:hit:hit:hit:hit:hit:act_obj.c:	if ( ( obj = get_obj_list( ch, arg1, ch->in_room->contents ) ) == NULL )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:/*        if ( IS_SET(ch->act, PLR_HOLYWALK) )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:    && ( objfrom = get_obj_list( ch, arg2, ch->in_room->contents ) ) == NULL )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:/*        if ( IS_SET(ch->act, PLR_HOLYWALK ) )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:/*    if ( IS_SET(ch->act, PLR_HOLYWALK ) )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:    if ( ch->predelay_info == NULL )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:    type =  ch->predelay_info->number;
hit:hit:hit:hit:hit:hit:hit:act_obj.c:    victim = ch->predelay_info->victim1;
hit:hit:hit:hit:hit:hit:hit:act_obj.c:    obj = ch->predelay_info->obj1;
hit:hit:hit:hit:hit:hit:hit:act_obj.c:    objfrom = ch->predelay_info->obj2;
hit:hit:hit:hit:hit:hit:hit:act_obj.c:	|| obj->in_room != ch->in_room )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:	|| objfrom->in_room != ch->in_room )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:      || victim->in_room != ch->in_room
hit:hit:hit:hit:hit:hit:hit:act_obj.c:	sprintf( buf, "%s is a bloody thief!", ch->name );
hit:hit:hit:hit:hit:hit:hit:act_obj.c:    if ( ch->carry_number + 1 > can_carry_n( ch ) )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:    if ( ch->carry_weight + get_obj_weight( obj ) > can_carry_w( ch ) )
hit:hit:hit:hit:hit:hit:hit:act_obj.c:	    obj_to_room( obj, ch->in_room, TRUE );
hit:hit:hit:hit:hit:hit:hit:act_obj.c:	obj_to_room( item, ch->in_room, TRUE );
hit:hit:hit:hit:hit:hit:hit:act_obj.c:	obj_to_room( item, ch->in_room, TRUE );
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:	free_string( ch->pcdata->bamfin, MEM_PCDATA );
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:	ch->pcdata->bamfin = str_dup( argument );
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    for ( rch = char_list; rch != NULL; rch = rch->next )
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:	if ( !IS_NPC(rch) && !str_cmp( rch->name, name ) )
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    rch->next = char_list;
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:	free_string( ch->pcdata->bamfout, MEM_PCDATA );
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:	ch->pcdata->bamfout = str_dup( argument );
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:	&&   d->character->in_room == ch->in_room )
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:	location = ch->in_room;
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:	&& !can_build( ( ch->desc->original != NULL ?
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:	                 ch->desc->original : ch), victim->pIndexData->area ) )
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    original = ch->in_room;
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    for ( wch = char_list; wch != NULL; wch = wch->next )
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    if ( !IS_SET(ch->act, PLR_WIZINVIS) )
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:	    (ch->pcdata != NULL && ch->pcdata->bamfout[0] != '\0')
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:	    ? ch->pcdata->bamfout : "leaves in a swirling mist",
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    if ( !IS_SET(ch->act, PLR_WIZINVIS) )
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:	    (ch->pcdata != NULL && ch->pcdata->bamfin[0] != '\0')
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:	    ? ch->pcdata->bamfin : "appears in a swirling mist",
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    location = ( arg[0] == '\0' ) ? ch->in_room : find_location( ch, arg );
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    if ( ch->in_room != location && room_is_private( location )
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    for ( rch = location->people; rch; rch = rch->next_in_room )
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:	one_argument( rch->name, buf );
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    sprintf( buf, "Reboot by %s.", ch->name );
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:        sprintf( buf, "Reboot for code by %s.", ch->name );
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    sprintf( buf, "Shutdown by %s.", ch->name );
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:	    if ( d->snoop_by == ch->desc )
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    if ( ch->desc != NULL )
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:	for ( d = ch->desc->snoop_by; d != NULL; d = d->snoop_by )
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    victim->desc->snoop_by = ch->desc;
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    if ( ch->desc == NULL )
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    if ( ch->desc->original != NULL )
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    ch->desc->character = victim;
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    ch->desc->original  = ch;
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    victim->desc        = ch->desc;
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    ch->desc            = NULL;
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    ch->switched_into	= victim;
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    if ( ch->desc == NULL )
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    if ( ch->desc->original == NULL )
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    ch->desc->character       = ch->desc->original;
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    ch->desc->original        = NULL;
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    ch->desc->character->desc = ch->desc; 
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    ch->desc                  = NULL;
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    ch->switched_into	      = NULL;
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    char_to_room( victim, ch->in_room, TRUE );
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:	obj_to_room( obj, ch->in_room, TRUE );
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:	for ( victim = ch->in_room->people; victim != NULL; victim = vnext )
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:	for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    for ( rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:        sprintf( log_buf, "Log: %s changed %s's password.",ch->name,victim->name );
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:        sprintf( log_buf, "%s changed %s's password.",ch->name,victim->name );
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    sprintf( log_buf, "%s: %s %s %s",ch->name,arg1,arg2,arg3 );
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    if ( !can_build( ch, ch->in_room->area ) )
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    location = ch->in_room;
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:      s = sector_lookup( arg3, ch->in_room->area );
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:	    vch_next = vch->next;
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:		if (IS_SET(vch->act, PLR_AFK)) {
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:		    REMOVE_BIT(vch->act, PLR_AFK);
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:		if (was_afk) SET_BIT(vch->act, PLR_AFK);
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    if ( IS_SET(ch->act, PLR_WIZINVIS) )
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:	REMOVE_BIT(ch->act, PLR_WIZINVIS);
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:	SET_BIT(ch->act, PLR_WIZINVIS);
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    if (IS_SET(ch->act, PLR_HOLYLIGHT)) {
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:        REMOVE_BIT(ch->act, PLR_HOLYLIGHT);
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:        SET_BIT(ch->act, PLR_HOLYLIGHT);
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:	REMOVE_BIT(ch->act, PLR_HOLYSPEECH);
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:	SET_BIT(ch->act, PLR_HOLYSPEECH);
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    if (IS_SET(ch->act, PLR_HOLYNAME)) {
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:        REMOVE_BIT(ch->act, PLR_HOLYNAME);
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:        SET_BIT(ch->act, PLR_HOLYNAME);
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    if (IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:        REMOVE_BIT(ch->act, PLR_HOLYWALK);
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:        SET_BIT(ch->act, PLR_HOLYWALK);
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:    if (IS_SET(ch->act, PLR_HOLYVNUM)) {
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:        REMOVE_BIT(ch->act, PLR_HOLYVNUM);
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:        SET_BIT(ch->act, PLR_HOLYVNUM);
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:	    IS_SET(ch->act, PLR_HOLYLIGHT) ? "ON" : "OFF");
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:	    IS_SET(ch->act, PLR_HOLYNAME) ? "ON" : "OFF");
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:	    IS_SET(ch->act, PLR_HOLYWALK) ? "ON" : "OFF");
hit:hit:hit:hit:hit:hit:hit:act_wiz.c:	    IS_SET(ch->act, PLR_HOLYVNUM) ? "ON" : "OFF");
hit:hit:hit:hit:hit:hit:hit:change.c:  if ( ch->dynamic_descr )
hit:hit:hit:hit:hit:hit:hit:change.c:    free_string( ch->dynamic_descr, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:change.c:  ch->dynamic_descr = NULL;
hit:hit:hit:hit:hit:hit:hit:change.c:        ch->dynamic_descr = str_dup( c );
hit:hit:hit:hit:hit:hit:hit:change.c:        send_to_char( ch->dynamic_descr, ch );
hit:hit:hit:hit:hit:hit:hit:change.c:      ch->language = i; 
hit:hit:hit:hit:hit:hit:hit:character:act_wiz.c:	&&   d->character->in_room == ch->in_room )
hit:hit:hit:hit:hit:hit:hit:character:act_wiz.c:	    if ( d->snoop_by == ch->desc )
hit:hit:hit:hit:hit:hit:hit:character:act_wiz.c:	for ( d = ch->desc->snoop_by; d != NULL; d = d->snoop_by )
hit:hit:hit:hit:hit:hit:hit:character:comm.c:	sprintf( log_buf, "%s@%s has connected.", ch->name, d->host );
hit:hit:hit:hit:hit:hit:hit:character:comm.c:	sprintf( log_buf, "%s@%s has entered the game.", ch->name, d->host );
hit:hit:hit:hit:hit:hit:hit:character:comm.c:	  ch->name, d->host );
hit:hit:hit:hit:hit:hit:hit:character:comm.c:	&& !str_cmp( d->character->name, ch->name ) )
hit:hit:hit:hit:hit:hit:hit:character:comm.c:		d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
hit:hit:hit:hit:hit:hit:hit:character:comm.c:    sprintf( log_buf, "%s@%s reconnected.", ch->name, d->host );
hit:hit:hit:hit:hit:hit:hit:character:handler.c:    for ( paf_old = ch->affected; paf_old != NULL; paf_old = paf_old->next )
hit:hit:hit:hit:hit:hit:hit:character:olc.c:	for ( ed = ch->in_room->extra_descr; ed != NULL; ed = ed->next )
hit:hit:hit:hit:hit:hit:hit:character:olc.c:	ed->description = str_dup_tab( ch->pnote->text, TRUE );
hit:hit:hit:hit:hit:hit:hit:character:olc.c:	for ( ed = ch->in_room->extra_descr; ed != NULL; ed = ed->next )
hit:hit:hit:hit:hit:hit:hit:character:olc.c:	ch->pnote->text = str_dup_tab( ed->description, FALSE );
hit:hit:hit:hit:hit:hit:hit:character:olc.c:		pAppend->next = ch->in_room->area->reset_first;
hit:hit:hit:hit:hit:hit:hit:character:olc.c:    for ( ed = ch->in_room->extra_descr; ed != NULL; ed = ed->next )
hit:hit:hit:hit:hit:hit:hit:character:olc.c:	ed->next = ch->in_room->extra_descr;
hit:hit:hit:hit:hit:hit:hit:character:olc.c:	    ch->in_room->extra_descr = ed->next;
hit:hit:hit:hit:hit:hit:hit:comm.c:	sprintf( log_buf, "Closing link to %s.", ch->name );
hit:hit:hit:hit:hit:hit:hit:comm.c:	    ch->desc = NULL;
hit:hit:hit:hit:hit:hit:hit:comm.c:	if ( IS_SET(ch->act, PLR_BLANK) )
hit:hit:hit:hit:hit:hit:hit:comm.c:	if ( IS_SET(ch->act, PLR_TELNET_GA) )
hit:hit:hit:hit:hit:hit:hit:comm.c:   if( ch->prompt == NULL )
hit:hit:hit:hit:hit:hit:hit:comm.c:   else if ( ch->prompt[0] == '\0' )
hit:hit:hit:hit:hit:hit:hit:comm.c:            sprintf( buf2, "%d", ch->hit[HIT_LOC_BODY] );
hit:hit:hit:hit:hit:hit:hit:comm.c:            sprintf( buf2, "%d", ch->max_hit );
hit:hit:hit:hit:hit:hit:hit:comm.c:            if ( IS_IMMORTAL(ch) && IS_SET(ch->act, PLR_WIZINVIS) )
hit:hit:hit:hit:hit:hit:hit:comm.c:            sprintf( buf2, "%d", ch->mana );
hit:hit:hit:hit:hit:hit:hit:comm.c:            sprintf( buf2, "%d", ch->max_mana );
hit:hit:hit:hit:hit:hit:hit:comm.c:            sprintf( buf2, "%d", ch->move );
hit:hit:hit:hit:hit:hit:hit:comm.c:            sprintf( buf2, "%d", ch->max_move );
hit:hit:hit:hit:hit:hit:hit:comm.c:            if( ch->in_room != NULL )
hit:hit:hit:hit:hit:hit:hit:comm.c:		((!IS_NPC(ch) && IS_SET(ch->act,PLR_HOLYLIGHT)) ||
hit:hit:hit:hit:hit:hit:hit:comm.c:		 (!IS_AFFECTED(ch,AFF_BLIND) && !room_is_dark( ch->in_room, ch ) != VISION_NORMAL))
hit:hit:hit:hit:hit:hit:hit:comm.c:		? ch->in_room->name : "darkness");
hit:hit:hit:hit:hit:hit:hit:comm.c:            if( ch->in_room != NULL )
hit:hit:hit:hit:hit:hit:hit:comm.c:               sprintf( buf2, "%s", ch->in_room->name );
hit:hit:hit:hit:hit:hit:hit:comm.c:            if( IS_IMMORTAL( ch ) && ch->in_room != NULL )
hit:hit:hit:hit:hit:hit:hit:comm.c:               sprintf( buf2, "%d", ch->in_room->vnum );
hit:hit:hit:hit:hit:hit:hit:comm.c:            if( IS_IMMORTAL( ch ) && ch->in_room != NULL )
hit:hit:hit:hit:hit:hit:hit:comm.c:               sprintf( buf2, "%s", ch->in_room->area->name );
hit:hit:hit:hit:hit:hit:hit:comm.c:   write_to_buffer( ch->desc, buf, point - buf );
hit:hit:hit:hit:hit:hit:hit:comm.c:	if ( strcmp( crypt( argument, ch->pcdata->pwd ), ch->pcdata->pwd ) )
hit:hit:hit:hit:hit:hit:hit:comm.c:	if ( check_reconnect( d, ch->name, TRUE ) )
hit:hit:hit:hit:hit:hit:hit:comm.c:	if ( IS_SET( ch->act, PLR_REJECTED ) )
hit:hit:hit:hit:hit:hit:hit:comm.c:		ch->pcdata->rejected );
hit:hit:hit:hit:hit:hit:hit:comm.c:		REJECTED_DIR, capitalize( ch->name ) );
hit:hit:hit:hit:hit:hit:hit:comm.c:	if (IS_SET(ch->act, PLR_AFK))
hit:hit:hit:hit:hit:hit:hit:comm.c:	    REMOVE_BIT(ch->act, PLR_AFK);
hit:hit:hit:hit:hit:hit:hit:comm.c:	sprintf( log_buf, "%s@%s has connected.", ch->name, d->host );
hit:hit:hit:hit:hit:hit:hit:comm.c:	sprintf( buf, "\n\rWelcome back, %s.\n\r", ch->name );
hit:hit:hit:hit:hit:hit:hit:comm.c:	if ( IS_SET( ch->act, PLR_UNAPPROVED ) )
hit:hit:hit:hit:hit:hit:hit:comm.c:	ch->next	= char_list;
hit:hit:hit:hit:hit:hit:hit:comm.c:	if ( ch->level == 0 )
hit:hit:hit:hit:hit:hit:hit:comm.c:	    ch->perm_stat_phys_str
hit:hit:hit:hit:hit:hit:hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_phys_str_mod;
hit:hit:hit:hit:hit:hit:hit:comm.c:	    ch->perm_stat_phys_dex
hit:hit:hit:hit:hit:hit:hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_phys_dex_mod;
hit:hit:hit:hit:hit:hit:hit:comm.c:	    ch->perm_stat_phys_tou
hit:hit:hit:hit:hit:hit:hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_phys_tou_mod;
hit:hit:hit:hit:hit:hit:hit:comm.c:	    ch->perm_stat_phys_qui
hit:hit:hit:hit:hit:hit:hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_phys_qui_mod;
hit:hit:hit:hit:hit:hit:hit:comm.c:	    ch->perm_stat_ment_int
hit:hit:hit:hit:hit:hit:hit:comm.c:	      = number_stat() + race_array[ch->race]->stat_ment_int_mod;
hit:hit:hit:hit:hit:hit:hit:comm.c:	    ch->perm_offense = 10;
hit:hit:hit:hit:hit:hit:hit:comm.c:	    ch->level	= 1;
hit:hit:hit:hit:hit:hit:hit:comm.c:	    ch->max_hit = race_array[ch->race]->hits_base
hit:hit:hit:hit:hit:hit:hit:comm.c:    + dice( race_array[ch->race]->hitnodice, race_array[ch->race]->hitsizedice );
hit:hit:hit:hit:hit:hit:hit:comm.c:	    ch->hit[HIT_LOC_BODY]	= ch->max_hit;
hit:hit:hit:hit:hit:hit:hit:comm.c:	    ch->max_mana = race_array[ch->race]->mana;
hit:hit:hit:hit:hit:hit:hit:comm.c:	    ch->mana	= ch->max_mana;
hit:hit:hit:hit:hit:hit:hit:comm.c:	    ch->max_move = race_array[ch->race]->move;
hit:hit:hit:hit:hit:hit:hit:comm.c:	    ch->move	= ch->max_move;
hit:hit:hit:hit:hit:hit:hit:comm.c:	    ch->vision_min = race_array[ch->race]->vision_min;
hit:hit:hit:hit:hit:hit:hit:comm.c:	    ch->vision_max = race_array[ch->race]->vision_max;
hit:hit:hit:hit:hit:hit:hit:comm.c:	    ch->vision_range = race_array[ch->race]->vision_range;
hit:hit:hit:hit:hit:hit:hit:comm.c:	    ch->prompt = NULL;
hit:hit:hit:hit:hit:hit:hit:comm.c:	    ch->height = race_array[ch->race]->height_base
hit:hit:hit:hit:hit:hit:hit:comm.c:                         + dice( race_array[ch->race]->heightnodice,
hit:hit:hit:hit:hit:hit:hit:comm.c:                                 race_array[ch->race]->heightsizedice );
hit:hit:hit:hit:hit:hit:hit:comm.c:	    ch->weight = race_array[ch->race]->weight_base
hit:hit:hit:hit:hit:hit:hit:comm.c:                         + dice( race_array[ch->race]->weightnodice,
hit:hit:hit:hit:hit:hit:hit:comm.c:                                 race_array[ch->race]->weightsizedice );
hit:hit:hit:hit:hit:hit:hit:comm.c:            ch->pcdata->learned[gsn_common] = 100;
hit:hit:hit:hit:hit:hit:hit:comm.c:	else if ( ch->in_room != NULL )
hit:hit:hit:hit:hit:hit:hit:comm.c:	    char_to_room( ch, ch->in_room, FALSE );
hit:hit:hit:hit:hit:hit:hit:comm.c:	sprintf( log_buf, "%s@%s has entered the game.", ch->name, d->host );
hit:hit:hit:hit:hit:hit:hit:comm.c:	if ( IS_SET(ch->act, PLR_DENY) )
hit:hit:hit:hit:hit:hit:hit:comm.c:        if (IS_SET(ch->act, PLR_DEAD) )
hit:hit:hit:hit:hit:hit:hit:comm.c:	pwdnew = crypt( argument, ch->name );
hit:hit:hit:hit:hit:hit:hit:comm.c:	free_string( ch->pcdata->pwd, MEM_PCDATA );
hit:hit:hit:hit:hit:hit:hit:comm.c:	ch->pcdata->pwd	= str_dup( pwdnew );
hit:hit:hit:hit:hit:hit:hit:comm.c:	if ( strcmp( crypt( argument, ch->pcdata->pwd ), ch->pcdata->pwd ) )
hit:hit:hit:hit:hit:hit:hit:comm.c:	case 'm': case 'M': ch->sex = SEX_MALE;    break;
hit:hit:hit:hit:hit:hit:hit:comm.c:	case 'f': case 'F': ch->sex = SEX_FEMALE;  break;
hit:hit:hit:hit:hit:hit:hit:comm.c:		ch->race = iRace;
hit:hit:hit:hit:hit:hit:hit:comm.c:	    if ( race_array[ch->race]->classes[iClass] == TRUE )
hit:hit:hit:hit:hit:hit:hit:comm.c:		ch->class = iClass;
hit:hit:hit:hit:hit:hit:hit:comm.c:	if ( iClass == MAX_CLASS || race_array[ch->race]->classes[iClass] == FALSE )
hit:hit:hit:hit:hit:hit:hit:comm.c:	ch->long_descr = str_dup( argument );
hit:hit:hit:hit:hit:hit:hit:comm.c:	ch->short_descr = str_dup( argument );
hit:hit:hit:hit:hit:hit:hit:comm.c:	ch->namelist = str_dup( argument );
hit:hit:hit:hit:hit:hit:hit:comm.c:	    strcpy( buf, ch->description );
hit:hit:hit:hit:hit:hit:hit:comm.c:	    free_string( ch->description, MEM_PCDATA );
hit:hit:hit:hit:hit:hit:hit:comm.c:	    ch->description = str_dup( buf );
hit:hit:hit:hit:hit:hit:hit:comm.c:	ch->pcdata->email_address = str_dup( argument );
hit:hit:hit:hit:hit:hit:hit:comm.c:	ch->pcdata->rejected = str_dup( "" );
hit:hit:hit:hit:hit:hit:hit:comm.c:	SET_BIT( ch->act, PLR_UNAPPROVED );
hit:hit:hit:hit:hit:hit:hit:comm.c:        SET_BIT( ch->act, PLR_HOLYLIGHT );
hit:hit:hit:hit:hit:hit:hit:comm.c:	  ch->name, d->host );
hit:hit:hit:hit:hit:hit:hit:comm.c:    for ( ch = char_list; ch != NULL; ch = ch->next )
hit:hit:hit:hit:hit:hit:hit:comm.c:	&& ( ch->name && !str_cmp( ch->name, name ) )
hit:hit:hit:hit:hit:hit:hit:comm.c:	&& IS_SET( ch->act, PLR_REVIEWING ) )
hit:hit:hit:hit:hit:hit:hit:comm.c:    for ( ch = char_list; ch != NULL; ch = ch->next )
hit:hit:hit:hit:hit:hit:hit:comm.c:	&& ( !fConn || ch->desc == NULL )
hit:hit:hit:hit:hit:hit:hit:comm.c:	&& !str_cmp( d->character->name, ch->name ) )
hit:hit:hit:hit:hit:hit:hit:comm.c:		d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
hit:hit:hit:hit:hit:hit:hit:comm.c:		if ( ch->switched_into != NULL )
hit:hit:hit:hit:hit:hit:hit:comm.c:		    do_return( ch->switched_into, "" );
hit:hit:hit:hit:hit:hit:hit:comm.c:    if ( ch->desc != NULL )
hit:hit:hit:hit:hit:hit:hit:comm.c:	free_descriptor( ch->desc );
hit:hit:hit:hit:hit:hit:hit:comm.c:    ch->desc         = d;
hit:hit:hit:hit:hit:hit:hit:comm.c:    ch->timer        = 0;
hit:hit:hit:hit:hit:hit:hit:comm.c:    sprintf( log_buf, "%s@%s reconnected.", ch->name, d->host );
hit:hit:hit:hit:hit:hit:hit:comm.c:    if (IS_SET(ch->act, PLR_AFK)) 
hit:hit:hit:hit:hit:hit:hit:comm.c:	REMOVE_BIT(ch->act, PLR_AFK);
hit:hit:hit:hit:hit:hit:hit:comm.c:    ||   ch->desc == NULL
hit:hit:hit:hit:hit:hit:hit:comm.c:    ||   ch->desc->connected != CON_PLAYING
hit:hit:hit:hit:hit:hit:hit:comm.c:    ||   ch->was_in_room == NULL 
hit:hit:hit:hit:hit:hit:hit:comm.c:    ||   ch->in_room != get_room_index( ROOM_VNUM_LIMBO ) )
hit:hit:hit:hit:hit:hit:hit:comm.c:    ch->timer = 0;
hit:hit:hit:hit:hit:hit:hit:comm.c:    char_to_room( ch, ch->was_in_room, FALSE );
hit:hit:hit:hit:hit:hit:hit:comm.c:    ch->was_in_room	= NULL;
hit:hit:hit:hit:hit:hit:hit:comm.c:    if ( txt == NULL || ch->desc == NULL )
hit:hit:hit:hit:hit:hit:hit:comm.c:    if ( ch->desc->showstr_point )
hit:hit:hit:hit:hit:hit:hit:comm.c:	write_to_buffer( ch->desc, txt, strlen( txt ) );
hit:hit:hit:hit:hit:hit:hit:comm.c:    ch->desc->showstr_head = alloc_mem( strlen( txt ) + 1 );
hit:hit:hit:hit:hit:hit:hit:comm.c:    strcpy( ch->desc->showstr_head, txt );
hit:hit:hit:hit:hit:hit:hit:comm.c:    ch->desc->showstr_point = ch->desc->showstr_head;
hit:hit:hit:hit:hit:hit:hit:comm.c:    show_string( ch->desc, "" );
hit:hit:hit:hit:hit:hit:hit:comm.c:    to = ch->in_room->people;
hit:hit:hit:hit:hit:hit:hit:comm.c:	to = vch->in_room->people;
hit:hit:hit:hit:hit:hit:hit:db.c:  pArea = ch->in_room->area;
hit:hit:hit:hit:hit:hit:hit:db.c:    pArea = ch->in_room->area;
hit:hit:hit:hit:hit:hit:hit:db.c:    ch->in_room->area->vnum_final = vnum;
hit:hit:hit:hit:hit:hit:hit:db.c:    ch->next_fighting		= NULL;
hit:hit:hit:hit:hit:hit:hit:db.c:    ch->name			= &str_empty[0];
hit:hit:hit:hit:hit:hit:hit:db.c:    ch->short_descr		= &str_empty[0];
hit:hit:hit:hit:hit:hit:hit:db.c:    ch->long_descr		= &str_empty[0];
hit:hit:hit:hit:hit:hit:hit:db.c:    ch->dynamic_descr		= NULL;
hit:hit:hit:hit:hit:hit:hit:db.c:    ch->description		= &str_empty[0];
hit:hit:hit:hit:hit:hit:hit:db.c:    ch->prompt			= NULL;
hit:hit:hit:hit:hit:hit:hit:db.c:    ch->predelay_time		= 0;
hit:hit:hit:hit:hit:hit:hit:db.c:    ch->predelay_info		= NULL;
hit:hit:hit:hit:hit:hit:hit:db.c:    ch->position		= POS_STANDING;
hit:hit:hit:hit:hit:hit:hit:db.c:    ch->hit[HIT_LOC_BODY]	= 20;
hit:hit:hit:hit:hit:hit:hit:db.c:    ch->max_hit			= 20;
hit:hit:hit:hit:hit:hit:hit:db.c:    ch->mana			= 100;
hit:hit:hit:hit:hit:hit:hit:db.c:    ch->max_mana		= 100;
hit:hit:hit:hit:hit:hit:hit:db.c:    ch->move			= 100;
hit:hit:hit:hit:hit:hit:hit:db.c:    ch->max_move		= 100;
hit:hit:hit:hit:hit:hit:hit:db.c:    ch->perm_stat_phys_str	= 40;
hit:hit:hit:hit:hit:hit:hit:db.c:    ch->perm_stat_phys_dex	= 40;
hit:hit:hit:hit:hit:hit:hit:db.c:    ch->perm_stat_phys_tou	= 40;
hit:hit:hit:hit:hit:hit:hit:db.c:    ch->perm_stat_phys_qui	= 40;
hit:hit:hit:hit:hit:hit:hit:db.c:    ch->perm_stat_ment_int	= 40;
hit:hit:hit:hit:hit:hit:hit:db.c:    ch->pReset			= NULL;
hit:hit:hit:hit:hit:hit:hit:db.c:    ch->riding			= NULL;
hit:hit:hit:hit:hit:hit:hit:db.c:    ch->switched_into		= NULL;
hit:hit:hit:hit:hit:hit:hit:db.c:    ch->language		= 0;
hit:hit:hit:hit:hit:hit:hit:db.c:    ch->move_speed		= MOVE_WALK;
hit:hit:hit:hit:hit:hit:hit:db.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:hit:hit:db.c:    for ( paf = ch->affected; paf != NULL; paf = paf_next )
hit:hit:hit:hit:hit:hit:hit:db.c:    free_string( ch->name, MEM_MOB_NAME_FREE_CHAR );
hit:hit:hit:hit:hit:hit:hit:db.c:    free_string( ch->namelist, MEM_MOB_NAMELIST_FREE_CHAR );
hit:hit:hit:hit:hit:hit:hit:db.c:    free_string( ch->short_descr, MEM_MOB_SHORT_DESCR_FREE_CHAR );
hit:hit:hit:hit:hit:hit:hit:db.c:    free_string( ch->long_descr, MEM_MOB_LONG_DESCR_FREE_CHAR );
hit:hit:hit:hit:hit:hit:hit:db.c:    free_string( ch->description, MEM_MOB_DESCRIPTION_FREE_CHAR );
hit:hit:hit:hit:hit:hit:hit:db.c:    free_string( ch->spec_fun_name, MEM_MOB_SPEC_FUN_NAME_FREE_CHAR );
hit:hit:hit:hit:hit:hit:hit:db.c:    free_string( ch->prompt, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:db.c:    free_predelay( ch->predelay_info );
hit:hit:hit:hit:hit:hit:hit:db.c:    if ( ch->pcdata != NULL )
hit:hit:hit:hit:hit:hit:hit:db.c:	free_string( ch->pcdata->pwd, MEM_PCDATA );
hit:hit:hit:hit:hit:hit:hit:db.c:	free_string( ch->pcdata->bamfin, MEM_PCDATA );
hit:hit:hit:hit:hit:hit:hit:db.c:	free_string( ch->pcdata->bamfout, MEM_PCDATA );
hit:hit:hit:hit:hit:hit:hit:db.c:	free_string( ch->pcdata->email_address, MEM_PCDATA );
hit:hit:hit:hit:hit:hit:hit:db.c:	free_string( ch->pcdata->rejected, MEM_PCDATA );
hit:hit:hit:hit:hit:hit:hit:db.c:	ch->pcdata->next = pcdata_free;
hit:hit:hit:hit:hit:hit:hit:db.c:	pcdata_free      = ch->pcdata;
hit:hit:hit:hit:hit:hit:hit:db.c:    ch->next	     = char_free;
hit:hit:hit:hit:hit:hit:hit:emote.c:  if ( ach->leader != NULL ) 
hit:hit:hit:hit:hit:hit:hit:emote.c:    ach = ach->leader;
hit:hit:hit:hit:hit:hit:hit:emote.c:  if ( bch->leader != NULL ) 
hit:hit:hit:hit:hit:hit:hit:emote.c:    bch = bch->leader;
hit:hit:hit:hit:hit:hit:hit:emote.c:  for (vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room) {
hit:hit:hit:hit:hit:hit:hit:emote.c:    vch->leader=NULL;
hit:hit:hit:hit:hit:hit:hit:emote.c:	vch->leader=ch;
hit:hit:hit:hit:hit:hit:hit:emote.c:  for (vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room) {              
hit:hit:hit:hit:hit:hit:hit:emote.c:      if (vch->leader==ch) {
hit:hit:hit:hit:hit:hit:hit:emote.c:	  wch->leader = ch;
hit:hit:hit:hit:hit:hit:hit:emote.c:	  wch->leader = ch;
hit:hit:hit:hit:hit:hit:hit:emote.c:	strcat(buf, ((vch == wch) ? "you" : him_her[wch->sex]));
hit:hit:hit:hit:hit:hit:hit:emote.c:          wch->leader = ch;
hit:hit:hit:hit:hit:hit:hit:emote.c:        strcat(buf, ((vch == wch) ? "your" : his_her[wch->sex]));
hit:hit:hit:hit:hit:hit:hit:emote.c:          wch->leader = ch;
hit:hit:hit:hit:hit:hit:hit:emote.c:        strcat(buf, ((vch == wch) ? "you" : he_she[wch->sex]));
hit:hit:hit:hit:hit:hit:hit:emote.orig:  if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_NO_EMOTE) )
hit:hit:hit:hit:hit:hit:hit:emote.orig:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:hit:hit:hit:hit:emote.orig:		      strcat( buf, him_her[wch->sex] );
hit:hit:hit:hit:hit:hit:hit:emote.orig:		      strcat( buf, his_her[wch->sex] );
hit:hit:hit:hit:hit:hit:hit:emote.orig:		      strcat( buf, he_she[wch->sex] );
hit:hit:hit:hit:hit:hit:hit:fight.c:	combat_next = ch->next_fighting;
hit:hit:hit:hit:hit:hit:hit:fight.c:	if ( ( victim = ch->fighting ) == NULL || ch->in_room == NULL )
hit:hit:hit:hit:hit:hit:hit:fight.c:      if ( --ch->strike_rank < 0 )
hit:hit:hit:hit:hit:hit:hit:fight.c:	if ( IS_AWAKE(ch) && ch->in_room == victim->in_room )
hit:hit:hit:hit:hit:hit:hit:fight.c:	ch->strike_rank = calc_strike_rank( ch );
hit:hit:hit:hit:hit:hit:hit:fight.c:	if ( ( victim = ch->fighting ) == NULL )
hit:hit:hit:hit:hit:hit:hit:fight.c:	&& --ch->strike_rank_2 < 0 )
hit:hit:hit:hit:hit:hit:hit:fight.c:	    if ( IS_AWAKE(ch) && ch->in_room == victim->in_room )
hit:hit:hit:hit:hit:hit:hit:fight.c:	    ch->strike_rank_2 = calc_strike_rank( ch ) + 100
hit:hit:hit:hit:hit:hit:hit:fight.c:	    if ( ( victim = ch->fighting ) == NULL )
hit:hit:hit:hit:hit:hit:hit:fight.c:	for ( rch = ch->in_room->people; rch != NULL; rch = rch_next )
hit:hit:hit:hit:hit:hit:hit:fight.c:	    rch_next = rch->next_in_room;
hit:hit:hit:hit:hit:hit:hit:fight.c:	    if ( IS_AWAKE(rch) && rch->fighting == NULL )
hit:hit:hit:hit:hit:hit:hit:fight.c:    if ( victim->position == POS_DEAD || ch->in_room != victim->in_room )
hit:hit:hit:hit:hit:hit:hit:fight.c:    attacker_roll = ch->perm_offense + ch->mod_offense;
hit:hit:hit:hit:hit:hit:hit:fight.c:	if ( dice(1,100) > ch->perm_offense && !number_bits( 5 ) )
hit:hit:hit:hit:hit:hit:hit:fight.c:	    ch->perm_offense++;
hit:hit:hit:hit:hit:hit:hit:fight.c:	dam = dice( ch->damnodice, ch->damsizedice );
hit:hit:hit:hit:hit:hit:hit:fight.c:	    dam = dam + ch->damplus;
hit:hit:hit:hit:hit:hit:hit:fight.c:	    dam += ch->damplus;
hit:hit:hit:hit:hit:hit:hit:fight.c:	    dam += dice( ch->damnodice, ch->damsizedice ) + ch->damplus;
hit:hit:hit:hit:hit:hit:hit:fight.c:    if ( victim->position == POS_DEAD || ch->in_room != victim->in_room )
hit:hit:hit:hit:hit:hit:hit:fight.c:    attacker_roll = ch->perm_offense + ch->mod_offense;
hit:hit:hit:hit:hit:hit:hit:fight.c:	if ( dice(1,100) > ch->pcdata->learned[gsn_dual_wield]
hit:hit:hit:hit:hit:hit:hit:fight.c:	    ch->pcdata->learned[gsn_dual_wield]++;
hit:hit:hit:hit:hit:hit:hit:fight.c:    if ( !IS_NPC(ch) && ch->pcdata->learned[gsn_enhanced_damage] > 0 )
hit:hit:hit:hit:hit:hit:hit:fight.c:	dam += dam * ch->pcdata->learned[gsn_enhanced_damage] / 100;
hit:hit:hit:hit:hit:hit:hit:fight.c:	    REMOVE_BIT( ch->affected_by, AFF_INVISIBLE );
hit:hit:hit:hit:hit:hit:hit:fight.c:	    if ( IS_NPC(ch) && number_percent( ) < ch->level / 2 )
hit:hit:hit:hit:hit:hit:hit:fight.c:	    if ( IS_NPC(ch) && number_percent( ) < ch->level / 2 )
hit:hit:hit:hit:hit:hit:hit:fight.c:		(IS_NPC(ch) ? ch->short_descr : ch->name),
hit:hit:hit:hit:hit:hit:hit:fight.c:  if ( ch->fighting != NULL )
hit:hit:hit:hit:hit:hit:hit:fight.c:    if ( ch->desc != NULL
hit:hit:hit:hit:hit:hit:hit:fight.c:    && ch->desc->original != NULL 
hit:hit:hit:hit:hit:hit:hit:fight.c:    && IS_SET( ch->desc->original->act, PLR_PEACEFUL ) )
hit:hit:hit:hit:hit:hit:hit:fight.c:  else if ( IS_SET( ch->act, PLR_PEACEFUL ) )
hit:hit:hit:hit:hit:hit:hit:fight.c:    if ( ch->fighting != NULL )
hit:hit:hit:hit:hit:hit:hit:fight.c:    ch->fighting = victim;
hit:hit:hit:hit:hit:hit:hit:fight.c:    ch->next_fighting = combat_list;
hit:hit:hit:hit:hit:hit:hit:fight.c:    for ( fch = char_list; fch != NULL; fch = fch->next )
hit:hit:hit:hit:hit:hit:hit:fight.c:	    fch->fighting	= NULL;
hit:hit:hit:hit:hit:hit:hit:fight.c:	if ( fBoth && fch->fighting == ch )
hit:hit:hit:hit:hit:hit:hit:fight.c:    combat_list = ch->next_fighting;
hit:hit:hit:hit:hit:hit:hit:fight.c:    for ( fch = combat_list; fch != NULL; fch = fch->next_fighting )
hit:hit:hit:hit:hit:hit:hit:fight.c:	if ( fch->next_fighting == ch )
hit:hit:hit:hit:hit:hit:hit:fight.c:	    fch->next_fighting = ch->next_fighting;
hit:hit:hit:hit:hit:hit:hit:fight.c:    ch->next_fighting = NULL;
hit:hit:hit:hit:hit:hit:hit:fight.c:	name		= ch->short_descr;
hit:hit:hit:hit:hit:hit:hit:fight.c:    if ( IS_NPC( ch ) && ( pMobIndex = ch->pIndexData ) != NULL )
hit:hit:hit:hit:hit:hit:hit:fight.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:hit:hit:fight.c:    obj_to_room( corpse, ch->in_room, TRUE );
hit:hit:hit:hit:hit:hit:hit:fight.c:    was_in_room = ch->in_room;
hit:hit:hit:hit:hit:hit:hit:fight.c:	    ch->in_room = pexit->to_room;
hit:hit:hit:hit:hit:hit:hit:fight.c:    ch->in_room = was_in_room;
hit:hit:hit:hit:hit:hit:hit:fight.c:    lch = (ch->leader != NULL) ? ch->leader : ch;
hit:hit:hit:hit:hit:hit:hit:fight.c:    for ( gch = ch->in_room->people; gch != NULL; gch = gch->next_in_room )
hit:hit:hit:hit:hit:hit:hit:fight.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:hit:hit:fight.c:		obj_to_room( obj, ch->in_room, TRUE );
hit:hit:hit:hit:hit:hit:hit:fight.c:  if ( IS_AFFECTED(ch, AFF_CHARM) && ch->master == victim )
hit:hit:hit:hit:hit:hit:hit:fight.c:  if ( ch->fighting != NULL )
hit:hit:hit:hit:hit:hit:hit:fight.c:    if ( ch->fighting == victim )
hit:hit:hit:hit:hit:hit:hit:fight.c:    ch->fighting = victim;
hit:hit:hit:hit:hit:hit:hit:fight.c:    if ( arg[0] == '\0' && ch->fighting == NULL )
hit:hit:hit:hit:hit:hit:hit:fight.c:	victim = ch->fighting;
hit:hit:hit:hit:hit:hit:hit:fight.c:	if ( get_skill( ch, gsn_bash ) < ch->perm_stat_phys_str )
hit:hit:hit:hit:hit:hit:hit:fight.c:	ch->position = POS_RESTING;
hit:hit:hit:hit:hit:hit:hit:fight.c:    if ( ch->position < POS_STANDING )
hit:hit:hit:hit:hit:hit:hit:fight.c:    was_in = ch->in_room;
hit:hit:hit:hit:hit:hit:hit:fight.c:	if ( ( now_in = ch->in_room ) == was_in )
hit:hit:hit:hit:hit:hit:hit:fight.c:	ch->in_room = was_in;
hit:hit:hit:hit:hit:hit:hit:fight.c:	ch->in_room = now_in;
hit:hit:hit:hit:hit:hit:hit:fight.c:    if ( ch->fighting == victim )
hit:hit:hit:hit:hit:hit:hit:fight.c:    if ( arg[0] == '\0' && ch->fighting == NULL )
hit:hit:hit:hit:hit:hit:hit:fight.c:	victim = ch->fighting;
hit:hit:hit:hit:hit:hit:hit:fight.c:    if ( ( victim = ch->fighting ) == NULL )
hit:hit:hit:hit:hit:hit:hit:fight.c:	act("$n attempted to disarm you.", ch, ch->fighting, NULL, NULL, NULL, TO_VICT, SENSE_SIGHT );
hit:hit:hit:hit:hit:hit:hit:fight.c:	act("$N maintained their grip on their weapon.", ch, ch->fighting, NULL, NULL, NULL, TO_CHAR, SENSE_SIGHT|SENSE_TOUCH );
hit:hit:hit:hit:hit:hit:hit:fight.c:    if ( !IS_NPC(victim) && victim->level >= ch->level )
hit:hit:hit:hit:hit:hit:hit:fight.c:  if ( ch->in_room == NULL )
hit:hit:hit:hit:hit:hit:hit:fight.c:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:hit:hit:hit:hit:fight.c:    if ( vch->fighting == ch )
hit:hit:hit:hit:hit:hit:hit:fight.c:  if ( i == 0 && ch->fighting != NULL )
hit:hit:hit:hit:hit:hit:hit:fileio.c:            ch->in_room ? ch->in_room->vnum : 0, ch->name, str );
hit:hit:hit:hit:hit:hit:hit:flora.c:  for ( fi = ch->in_room->flora; fi != NULL; fi = fi->next )
hit:hit:hit:hit:hit:hit:hit:flora.c:    write_environment_area( ch->in_room->area );
hit:hit:hit:hit:hit:hit:hit:flora.c:    if ( ch->in_room->flora == NULL )
hit:hit:hit:hit:hit:hit:hit:flora.c:    update_flora( ch->in_room );
hit:hit:hit:hit:hit:hit:hit:flora.c:    for ( fi = ch->in_room->flora; fi != NULL; fi = fi->next )
hit:hit:hit:hit:hit:hit:hit:flora.c:    fi->next = ch->in_room->flora;
hit:hit:hit:hit:hit:hit:hit:flora.c:    ch->in_room->flora = fi;
hit:hit:hit:hit:hit:hit:hit:flora.c:    destroy_flora( fi, ch->in_room );
hit:hit:hit:hit:hit:hit:hit:handler.c:    if ( ch->desc != NULL && ch->desc->original != NULL )
hit:hit:hit:hit:hit:hit:hit:handler.c:	ch = ch->desc->original;
hit:hit:hit:hit:hit:hit:hit:handler.c:    if ( ch->trust != 0 )
hit:hit:hit:hit:hit:hit:hit:handler.c:	return ch->trust;
hit:hit:hit:hit:hit:hit:hit:handler.c:    if ( IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
hit:hit:hit:hit:hit:hit:hit:handler.c:	return ch->level;
hit:hit:hit:hit:hit:hit:hit:handler.c:    year = (long) current_time - (long) ch->pcdata->birth;
hit:hit:hit:hit:hit:hit:hit:handler.c:    return ( ch->pcdata->played + (int) (current_time - ch->pcdata->logon) ) / 3600;
hit:hit:hit:hit:hit:hit:hit:handler.c:    return URANGE( 3, ch->perm_stat_phys_str + ch->mod_stat_phys_str, 200 );
hit:hit:hit:hit:hit:hit:hit:handler.c:    return URANGE( 3, ch->perm_stat_ment_int + ch->mod_stat_ment_int, 200 );
hit:hit:hit:hit:hit:hit:hit:handler.c:    return URANGE( 3, ch->perm_stat_phys_dex + ch->mod_stat_phys_dex, 200 );
hit:hit:hit:hit:hit:hit:hit:handler.c:    return URANGE( 3, ch->perm_stat_phys_qui + ch->mod_stat_phys_qui, 200 );
hit:hit:hit:hit:hit:hit:hit:handler.c:    return URANGE( 3, ch->perm_stat_phys_tou + ch->mod_stat_phys_tou, 200 );
hit:hit:hit:hit:hit:hit:hit:handler.c:	return ch->pcdata->learned[sn];
hit:hit:hit:hit:hit:hit:hit:handler.c:    if ( ch->pIndexData == NULL )
hit:hit:hit:hit:hit:hit:hit:handler.c:    return ch->pIndexData->learned[sn];
hit:hit:hit:hit:hit:hit:hit:handler.c:	return ch->pcdata->power_level[sn];
hit:hit:hit:hit:hit:hit:hit:handler.c:    if ( ch->pIndexData == NULL )
hit:hit:hit:hit:hit:hit:hit:handler.c:    return ch->pIndexData->power_level[sn];
hit:hit:hit:hit:hit:hit:hit:handler.c:    if ( !IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
hit:hit:hit:hit:hit:hit:hit:handler.c:    if ( !IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
hit:hit:hit:hit:hit:hit:hit:handler.c:    delay_new->next	= ch->pcdata->skill_delays;
hit:hit:hit:hit:hit:hit:hit:handler.c:    ch->pcdata->skill_delays	= delay_new;
hit:hit:hit:hit:hit:hit:hit:handler.c:    if ( ch->pcdata->skill_delays == NULL )
hit:hit:hit:hit:hit:hit:hit:handler.c:    if ( delay == ch->pcdata->skill_delays )
hit:hit:hit:hit:hit:hit:hit:handler.c:	ch->pcdata->skill_delays	= delay->next;
hit:hit:hit:hit:hit:hit:hit:handler.c:	for ( prev = ch->pcdata->skill_delays; prev != NULL; prev = prev->next )
hit:hit:hit:hit:hit:hit:hit:handler.c:  for ( delay = ch->pcdata->skill_delays; delay != NULL; delay = delay->next )
hit:hit:hit:hit:hit:hit:hit:handler.c:	SET_BIT( ch->affected_by, paf->bitvector );
hit:hit:hit:hit:hit:hit:hit:handler.c:	REMOVE_BIT( ch->affected_by, paf->bitvector );
hit:hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_STAT_PHYS_STR: ch->mod_stat_phys_str	+= mod;	break;
hit:hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_STAT_PHYS_DEX: ch->mod_stat_phys_dex	+= mod;	break;
hit:hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_STAT_PHYS_TOU: ch->mod_stat_phys_tou	+= mod;	break;
hit:hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_STAT_PHYS_QUI: ch->mod_stat_phys_qui	+= mod;	break;
hit:hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_STAT_MENT_INT: ch->mod_stat_ment_int	+= mod;	break;
hit:hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_SEX:           ch->sex			+= mod;	break;
hit:hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_MANA:          ch->max_mana		+= mod;	break;
hit:hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_HIT:           ch->max_hit		+= mod;	break;
hit:hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_MOVE:          ch->max_move		+= mod;	break;
hit:hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_HITROLL:       ch->hitroll		+= mod;	break;
hit:hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_DAMROLL:       ch->damroll		+= mod;	break;
hit:hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_SAVING_PARA:   ch->saving_throw		+= mod;	break;
hit:hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_SAVING_ROD:    ch->saving_throw		+= mod;	break;
hit:hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_SAVING_PETRI:  ch->saving_throw		+= mod;	break;
hit:hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_SAVING_BREATH: ch->saving_throw		+= mod;	break;
hit:hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_SAVING_SPELL:  ch->saving_throw		+= mod;	break;
hit:hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_ABSORBTION:    ch->general_absorb	+= mod; break;
hit:hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_CHANNELING:    ch->channeling		+= mod; break;
hit:hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_VISION_PROFILE:  ch->vision_min += mod;
hit:hit:hit:hit:hit:hit:hit:handler.c:				ch->vision_max += mod;		break;
hit:hit:hit:hit:hit:hit:hit:handler.c:    case APPLY_VISION_RANGE:	ch->vision_range += mod;	break;
hit:hit:hit:hit:hit:hit:hit:handler.c:	    obj_to_room( wield, ch->in_room, TRUE );
hit:hit:hit:hit:hit:hit:hit:handler.c:    paf_new->next	= ch->affected;
hit:hit:hit:hit:hit:hit:hit:handler.c:    ch->affected	= paf_new;
hit:hit:hit:hit:hit:hit:hit:handler.c:    if ( ch->affected == NULL )
hit:hit:hit:hit:hit:hit:hit:handler.c:    if ( paf == ch->affected )
hit:hit:hit:hit:hit:hit:hit:handler.c:	ch->affected	= paf->next;
hit:hit:hit:hit:hit:hit:hit:handler.c:	for ( prev = ch->affected; prev != NULL; prev = prev->next )
hit:hit:hit:hit:hit:hit:hit:handler.c:    for ( paf = ch->affected; paf != NULL; paf = paf_next )
hit:hit:hit:hit:hit:hit:hit:handler.c:    for ( paf = ch->affected; paf != NULL; paf = paf->next )
hit:hit:hit:hit:hit:hit:hit:handler.c:    for ( paf_old = ch->affected; paf_old != NULL; paf_old = paf_old->next )
hit:hit:hit:hit:hit:hit:hit:handler.c:    if ( (room = ch->in_room) == NULL )
hit:hit:hit:hit:hit:hit:hit:handler.c:	--ch->in_room->area->nplayer;
hit:hit:hit:hit:hit:hit:hit:handler.c:    ch->in_room->light_mod -= ch->light;
hit:hit:hit:hit:hit:hit:hit:handler.c:    if ( ch == ch->in_room->people )
hit:hit:hit:hit:hit:hit:hit:handler.c:	ch->in_room->people = ch->next_in_room;
hit:hit:hit:hit:hit:hit:hit:handler.c:	for ( prev = ch->in_room->people; prev; prev = prev->next_in_room )
hit:hit:hit:hit:hit:hit:hit:handler.c:		prev->next_in_room = ch->next_in_room;
hit:hit:hit:hit:hit:hit:hit:handler.c:    ch->in_room      = NULL;
hit:hit:hit:hit:hit:hit:hit:handler.c:    ch->next_in_room = NULL;
hit:hit:hit:hit:hit:hit:hit:handler.c:    ch->in_room		= pRoomIndex;
hit:hit:hit:hit:hit:hit:hit:handler.c:    ch->next_in_room	= pRoomIndex->people;
hit:hit:hit:hit:hit:hit:hit:handler.c:	++ch->in_room->area->nplayer;
hit:hit:hit:hit:hit:hit:hit:handler.c:    ch->in_room->light_mod += ch->light;
hit:hit:hit:hit:hit:hit:hit:handler.c:    obj->next_content	 = ch->carrying;
hit:hit:hit:hit:hit:hit:hit:handler.c:    ch->carrying	 = obj;
hit:hit:hit:hit:hit:hit:hit:handler.c:    ch->carry_number	+= 1;
hit:hit:hit:hit:hit:hit:hit:handler.c:    ch->carry_weight	+= get_obj_weight( obj );
hit:hit:hit:hit:hit:hit:hit:handler.c:    if ( ch->carrying == obj )
hit:hit:hit:hit:hit:hit:hit:handler.c:	ch->carrying = obj->next_content;
hit:hit:hit:hit:hit:hit:hit:handler.c:	for ( prev = ch->carrying; prev != NULL; prev = prev->next_content )
hit:hit:hit:hit:hit:hit:hit:handler.c:    ch->carry_number	-= 1;
hit:hit:hit:hit:hit:hit:hit:handler.c:    ch->carry_weight	-= get_obj_weight( obj );
hit:hit:hit:hit:hit:hit:hit:handler.c:    return ch->wearing[iWear];
hit:hit:hit:hit:hit:hit:hit:handler.c:    iWear = race_array[ch->race]->hit_loc_location[hit_loc];
hit:hit:hit:hit:hit:hit:hit:handler.c:	obj_to_room( obj, ch->in_room, TRUE );
hit:hit:hit:hit:hit:hit:hit:handler.c:    if ( ch->wearing[iWear] == NULL )
hit:hit:hit:hit:hit:hit:hit:handler.c:	ch->wearing[iWear] = obj;
hit:hit:hit:hit:hit:hit:hit:handler.c:    else if ( ch->wearing[iWear]->size > 50 )
hit:hit:hit:hit:hit:hit:hit:handler.c:	obj->next_worn = ch->wearing[iWear]->next_worn;
hit:hit:hit:hit:hit:hit:hit:handler.c:	ch->wearing[iWear]->next_worn = obj;
hit:hit:hit:hit:hit:hit:hit:handler.c:	obj->next_worn = ch->wearing[iWear];
hit:hit:hit:hit:hit:hit:hit:handler.c:	ch->wearing[iWear] = obj;
hit:hit:hit:hit:hit:hit:hit:handler.c:    &&   ch->in_room != NULL )
hit:hit:hit:hit:hit:hit:hit:handler.c:	ch->in_room->light_mod += obj->value[0];
hit:hit:hit:hit:hit:hit:hit:handler.c:	ch->light += obj->value[0];
hit:hit:hit:hit:hit:hit:hit:handler.c:	ch->in_room->light_mod += GLOW_LIGHT;
hit:hit:hit:hit:hit:hit:hit:handler.c:	ch->light += GLOW_LIGHT;
hit:hit:hit:hit:hit:hit:hit:handler.c:	ch->in_room->light_mod += DARK_LIGHT;
hit:hit:hit:hit:hit:hit:hit:handler.c:	ch->light += DARK_LIGHT;
hit:hit:hit:hit:hit:hit:hit:handler.c:    if ( ch->wearing[wear_loc] == NULL )
hit:hit:hit:hit:hit:hit:hit:handler.c:    else if ( ch->wearing[wear_loc] == obj )
hit:hit:hit:hit:hit:hit:hit:handler.c:	ch->wearing[wear_loc] = obj->next_worn;
hit:hit:hit:hit:hit:hit:hit:handler.c:	for ( o = ch->wearing[wear_loc]; o != NULL; o = o->next_worn )
hit:hit:hit:hit:hit:hit:hit:handler.c:    if ( obj != ch->carrying )
hit:hit:hit:hit:hit:hit:hit:handler.c:	for ( prev = ch->carrying; prev != NULL; prev = prev->next_content )
hit:hit:hit:hit:hit:hit:hit:handler.c:	obj->next_content = ch->carrying;
hit:hit:hit:hit:hit:hit:hit:handler.c:	ch->carrying = obj;
hit:hit:hit:hit:hit:hit:hit:handler.c:    &&   ch->in_room != NULL )
hit:hit:hit:hit:hit:hit:hit:handler.c:	ch->in_room->light_mod -= obj->value[0];
hit:hit:hit:hit:hit:hit:hit:handler.c:	ch->light -= obj->value[0];
hit:hit:hit:hit:hit:hit:hit:handler.c:	ch->in_room->light_mod -= GLOW_LIGHT;
hit:hit:hit:hit:hit:hit:hit:handler.c:	ch->light -= GLOW_LIGHT;
hit:hit:hit:hit:hit:hit:hit:handler.c:	ch->in_room->light_mod -= DARK_LIGHT;
hit:hit:hit:hit:hit:hit:hit:handler.c:	ch->light -= DARK_LIGHT;
hit:hit:hit:hit:hit:hit:hit:handler.c:    if ( ch->wearing[wear_loc] != NULL
hit:hit:hit:hit:hit:hit:hit:handler.c:    || ch->in_room == NULL )
hit:hit:hit:hit:hit:hit:hit:handler.c:	    while( (od = ch->wearing[i]) != NULL )
hit:hit:hit:hit:hit:hit:hit:handler.c:		obj_to_room( od, ch->in_room, TRUE );
hit:hit:hit:hit:hit:hit:hit:handler.c:    for ( ch = char_list; ch != NULL; ch = ch->next )
hit:hit:hit:hit:hit:hit:hit:handler.c:	if ( (p = ch->predelay_info) != NULL )
hit:hit:hit:hit:hit:hit:hit:handler.c:    if ( ch->in_room == NULL )
hit:hit:hit:hit:hit:hit:hit:handler.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:hit:hit:handler.c:	if ( ch->pReset != NULL )
hit:hit:hit:hit:hit:hit:hit:handler.c:	    ch->pReset->target = NULL;
hit:hit:hit:hit:hit:hit:hit:handler.c:    if ( ch->desc != NULL && ch->desc->original != NULL )
hit:hit:hit:hit:hit:hit:hit:handler.c:    for ( wch = char_list; wch != NULL; wch = wch->next )
hit:hit:hit:hit:hit:hit:hit:handler.c:	if ( wch->reply == ch )
hit:hit:hit:hit:hit:hit:hit:handler.c:	    wch->reply = NULL;
hit:hit:hit:hit:hit:hit:hit:handler.c:	if ( (p = wch->predelay_info) != NULL )
hit:hit:hit:hit:hit:hit:hit:handler.c:    while ( ch->hunting != NULL )
hit:hit:hit:hit:hit:hit:hit:handler.c:	remove_hunting( ch, ch->hunting->victim, TRUE );
hit:hit:hit:hit:hit:hit:hit:handler.c:       char_list = ch->next;
hit:hit:hit:hit:hit:hit:hit:handler.c:		prev->next = ch->next;
hit:hit:hit:hit:hit:hit:hit:handler.c:    if ( ch->desc )
hit:hit:hit:hit:hit:hit:hit:handler.c:        ch->desc->character = NULL;
hit:hit:hit:hit:hit:hit:hit:handler.c:    for ( rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:hit:hit:hit:handler.c:	( !is_name( arg, rch->name ) && !is_name( arg, rch->namelist ) ) )
hit:hit:hit:hit:hit:hit:hit:handler.c:    for ( wch = char_list; wch != NULL ; wch = wch->next )
hit:hit:hit:hit:hit:hit:hit:handler.c:	( !is_name( arg, wch->name ) && !is_name( arg, wch->namelist ) ) )
hit:hit:hit:hit:hit:hit:hit:handler.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:hit:hit:hit:hit:hit:hit:handler.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:hit:hit:hit:hit:hit:hit:handler.c:    obj = get_obj_list( ch, argument, ch->in_room->contents );
hit:hit:hit:hit:hit:hit:hit:handler.c:    diff = ch->vision_current - room_light( pRoomIndex );
hit:hit:hit:hit:hit:hit:hit:handler.c:    for ( rch = pRoomIndex->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:hit:hit:hit:handler.c:    if ( (!IS_NPC(ch) && IS_SET(ch->act, PLR_HOLYLIGHT)) 
hit:hit:hit:hit:hit:hit:hit:handler.c:    if ( room_is_dark( ch->in_room, ch ) == VISION_TOO_DARK
hit:hit:hit:hit:hit:hit:hit:handler.c:    || room_is_dark( ch->in_room, ch ) == VISION_TOO_BRIGHT )
hit:hit:hit:hit:hit:hit:hit:handler.c:    if ( room_is_dark( ch->in_room, ch ) == VISION_HAZY )
hit:hit:hit:hit:hit:hit:hit:handler.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_HOLYLIGHT) )
hit:hit:hit:hit:hit:hit:hit:handler.c:    if ( room_is_dark( ch->in_room, ch ) == VISION_TOO_DARK
hit:hit:hit:hit:hit:hit:hit:handler.c:    || room_is_dark( ch->in_room, ch ) == VISION_TOO_BRIGHT )
hit:hit:hit:hit:hit:hit:hit:handler.c:    if ( !IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
hit:hit:hit:hit:hit:hit:hit:handler.c:    if ( IS_NPC( victim ) && ch->pIndexData == victim->pIndexData )
hit:hit:hit:hit:hit:hit:hit:handler.c:    aggr_bits = ch->aggression;
hit:hit:hit:hit:hit:hit:hit:handler.c:	if ( victim->weight > ch->weight )
hit:hit:hit:hit:hit:hit:hit:handler.c:	aggr += ch->weight - victim->weight;
hit:hit:hit:hit:hit:hit:hit:handler.c:	aggr -= (ch->max_hit - ch->hit[HIT_LOC_BODY])*100/ch->max_hit;
hit:hit:hit:hit:hit:hit:hit:handler.c:	aggr -= race_array[ch->race]->relations[victim->race];
hit:hit:hit:hit:hit:hit:hit:handler.c:    if ( ch->predelay_info != NULL )
hit:hit:hit:hit:hit:hit:hit:handler.c:	free_predelay( ch->predelay_info );
hit:hit:hit:hit:hit:hit:hit:handler.c:    ch->predelay_info = p;
hit:hit:hit:hit:hit:hit:hit:handler.c:    ch->predelay_time = delay;
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( !str_cmp( ch->name, pnote->sender ) )
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( is_name( ch->name, pnote->to_list ) )
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ch->pnote != NULL )
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	pnote	  = alloc_perm( sizeof(*ch->pnote) );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    pnote->sender	= str_dup( ch->name );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    ch->pnote		= pnote;
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	REMOVE_BIT(ch->act, PLR_AFK);
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if (IS_SET(ch->act, PLR_AFK)) {
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:       REMOVE_BIT(ch->act, PLR_AFK);
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	SET_BIT(ch->act, PLR_AFK);
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	if ( to_one[0] != '\0' && str_cmp( ch->name, to_one ) )
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( str_cmp( ch->name, pnote->sender ) && to_new[0] != '\0' 
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ch->pnote == NULL || ch->pnote->text[0] == '\0' )
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    oldb = ch->pnote->text;
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	send_to_char( ch->pnote->text, ch );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	strcpy( buf, ch->pnote->text );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->text = str_dup( buf );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->subject, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->subject = str_dup( argument );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	free_string( ch->pnote->to_list, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->to_list = str_dup( argument );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	if ( ch->pnote != NULL )
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    free_string( ch->pnote->text, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    free_string( ch->pnote->subject, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    free_string( ch->pnote->to_list, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    free_string( ch->pnote->date, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    free_string( ch->pnote->sender, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    ch->pnote->next	= note_free;
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    note_free		= ch->pnote;
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    ch->pnote		= NULL;
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	if ( ch->pnote == NULL )
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    ch->pnote->sender,
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    ch->pnote->subject,
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    ch->pnote->to_list
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	send_to_char( ch->pnote->text, ch );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	if ( ch->pnote == NULL )
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->next			= NULL;
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	ch->pnote->date			= str_dup( strtime );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    note_list	= ch->pnote;
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    pnote->next	= ch->pnote;
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	pnote		= ch->pnote;
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	ch->pnote	= NULL;
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    REMOVE_BIT(ch->deaf, channel);
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	position	= ch->position;
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	ch->position	= POS_STANDING;
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	ch->position	= position;
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	&&  !IS_SET(och->deaf, channel) )
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    position		= vch->position;
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    vch->position	= position;
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:  gsn = *language_table[ch->language].pgsn;
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ch->in_room->exit[door] == NULL
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    || ( room = ch->in_room->exit[door]->to_room ) == NULL )
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    for ( vch = room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:  gsn = *language_table[ch->language].pgsn;
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:           sprintf(log_buf, "%s wishes to all \"%s\"",ch->name,argument );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    || ( IS_NPC(victim) && victim->in_room != ch->in_room ) )
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	 || IS_SET(ch->act, PLR_WIZINVIS))
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:        sprintf( log_buf, "%s sends to %s \"%s\"", ch->name, victim->name, argument );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:        sprintf( log_buf, "%s wishes to %s \"%s\"", ch->name, victim->name, argument );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ( victim = ch->reply ) == NULL )
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_NO_EMOTE) )
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ch->position  < POS_STUNNED  )
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ch->in_room && !IS_SET( ch->in_room->room_flags, ROOM_RENT )
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    sprintf( log_buf, "%s has quit.", ch->name );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:  //  d = ch->desc;
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    d = ch->desc;
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if (!IS_SET(ch->act, PLR_AFK))
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( IS_AFFECTED(ch, AFF_CHARM) && ch->master != NULL )
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	act( "You don't wish to leave your beloved master!", ch, ch->master, NULL, NULL, NULL, TO_CHAR, SENSE_SIXTH );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	if ( ch->master == NULL )
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ch->master != NULL )
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ch->master != NULL )
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    ch->master        = master;
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    ch->leader        = NULL;
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ch->master == NULL )
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	REMOVE_BIT( ch->affected_by, AFF_CHARM );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    act( "You stop following $N.", ch, ch->master, NULL, NULL, NULL, TO_CHAR, SENSE_SIXTH );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    ch->master = NULL;
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    ch->leader = NULL;
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ch->master != NULL )
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    ch->leader = NULL;
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    for ( fch = char_list; fch != NULL; fch = fch->next )
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	if ( fch->master == ch )
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	if ( fch->leader == ch )
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	    fch->leader = fch;
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    for ( och = ch->in_room->people; och != NULL; och = och_next )
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	och_next = och->next_in_room;
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	&&   och->master == ch
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	leader = (ch->leader != NULL) ? ch->leader : ch;
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:	for ( gch = char_list; gch != NULL; gch = gch->next )
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ch->master != NULL || ( ch->leader != NULL && ch->leader != ch ) )
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( IS_SET( ch->act, PLR_NO_TELL ) )
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    sprintf( buf, "%s tells the group '%s'.\n\r", ch->name, argument );
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    for ( gch = char_list; gch != NULL; gch = gch->next )
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( ach->leader != NULL ) ach = ach->leader;
hit:hit:hit:hit:hit:hit:hit:hit:act_comm.c:    if ( bch->leader != NULL ) bch = bch->leader;
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:    if ( ch->desc == NULL )
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	    if ( IS_NPC(ch) || IS_SET(ch->act, PLR_COMBINE) )
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	if ( IS_NPC(ch) || IS_SET(ch->act, PLR_COMBINE) )
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	if ( IS_NPC(ch) || IS_SET(ch->act, PLR_COMBINE) )
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	      rch != NULL; rch = rch->next_in_room ) {
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	    if ( rch->riding == victim ) {
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:    for ( rch = list; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	&&   IS_SET(rch->act, PLR_WIZINVIS)
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_HOLYLIGHT) )
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:    if ( ch->desc == NULL )
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:    if ( ch->position < POS_SLEEPING )
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:    if ( ch->position == POS_SLEEPING )
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:    &&   !IS_SET(ch->act, PLR_HOLYLIGHT)
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:    &&   room_is_dark( ch->in_room, ch ) == VISION_TOO_DARK )
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	show_char_to_char( ch->in_room->people, ch );
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:    &&   !IS_SET(ch->act, PLR_HOLYLIGHT)
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:    &&   room_is_dark( ch->in_room, ch ) == VISION_TOO_BRIGHT )
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	show_char_to_char( ch->in_room->people, ch );
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	 sprintf(buf2,"[%d] ", ch->in_room->vnum);
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:     send_to_char( ch->in_room->name, ch );
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	  ( !IS_NPC( ch ) && !IS_SET( ch->act, PLR_BRIEF ) ) )
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	 send_to_char( ch->in_room->description, ch );
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:     if ( IS_SET(ch->act, PLR_AUTOWEATHER) && IS_OUTDOORS(ch))
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:     update_flora( ch->in_room );
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:     display_flora( ch, ch->in_room->flora, 0 );
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:     show_list_to_char( ch->in_room->contents, ch, FALSE, FALSE, FALSE );
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:     show_char_to_char( ch->in_room->people,   ch );
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	for ( obj = ch->in_room->contents; obj != NULL; obj = obj->next_content )
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:    for ( obj = ch->in_room->contents; obj != NULL; obj = obj->next_content )
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:    pdesc = get_extra_descr( arg1, ch->in_room->extra_descr );
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	if ( (pexit = ch->in_room->exit[door]) == NULL )
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:    if ( ( pexit = ch->in_room->exit[door] ) == NULL )
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:    dist = URANGE( 1, ch->vision_range, 200 );
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:    in_room = ch->in_room;
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:    update_flora( ch->in_room );
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:    if ( !IS_SET( ch->in_room->sector->flags, SECTOR_OUTDOORS ) )
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:    soil_condition( ch, get_water_value( ch->in_room ) );
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	if ( ( pexit = ch->in_room->exit[door] ) != NULL
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:       // && IS_SET( ch->act, PLR_HOLYLIGHT ))
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	ch->name,
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	IS_NPC(ch) ? "" : ch->short_descr );
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	(is_vowel(race_array[ch->race]->race_name[0]) ? "an" : "a" ),
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	race_array[ch->race]->race_name);
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:    if ( get_trust( ch ) != ch->level )
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	ch->hit[HIT_LOC_BODY],  ch->max_hit,
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	ch->mana, ch->max_mana,
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	ch->move, ch->max_move );
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->condition[COND_DRUNK]   > 10 )
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->condition[COND_THIRST] ==  0 )
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->condition[COND_FULL]   ==  0 )
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:    switch ( ch->position )
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:    switch( ch->move_speed )
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:      skill_table[*language_table[ch->language].pgsn].name );
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:   free_string( ch->prompt, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:   ch->prompt = str_dup( buf );
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	if ( ( fImmortalOnly  && wch->level < LEVEL_IMMORTAL ) )
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:/*	switch ( wch->level )
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	if ( IS_IMMORTAL( ch ) || wch->level > LEVEL_IMMORTAL )
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:		     (IS_SET(wch->act, PLR_AFK) ? "[AFK]" : " "),
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:                     (IS_SET(wch->act, PLR_WIZINVIS) ? "[INVIS]" : " "),
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:		     wch->name,
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:		     wch->short_descr);
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:    show_list_to_char( ch->carrying, ch, TRUE, TRUE, FALSE );
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	for ( obj = ch->wearing[iWear]; obj != NULL; obj = obj->next_worn )
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	for ( obj2 = ch->carrying; obj2 != NULL; obj2 = obj2->next_content )
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	    &&   victim->in_room->area == ch->in_room->area
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	    &&   victim->in_room->area == ch->in_room->area
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	    if ( ch->description != NULL )
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:		strcat( buf, ch->description );
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	free_string( ch->description, MEM_GENERAL );
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	ch->description = str_dup( buf );
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:    send_to_char( ch->description ? ch->description : "(None).\n\r", ch );
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:    if ( strcmp( crypt( arg1, ch->pcdata->pwd ), ch->pcdata->pwd ) )
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:    pwdnew = crypt( arg2, ch->name );
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:    free_string( ch->pcdata->pwd, MEM_PCDATA );
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:    ch->pcdata->pwd = str_dup( pwdnew );
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	send_to_char( !IS_SET(ch->deaf, CHANNEL_CHAT)
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	    send_to_char( !IS_SET(ch->deaf, CHANNEL_IMMTALK)
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	    send_to_char( !IS_SET(ch->deaf, CHANNEL_LOG)
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	    REMOVE_BIT (ch->deaf, bit);
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	    SET_BIT    (ch->deaf, bit);
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	if ( IS_SET(ch->act,PLR_BRIEF))
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	    REMOVE_BIT(ch->act,PLR_BRIEF);
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	    SET_BIT(ch->act,PLR_BRIEF);
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	if ( IS_SET(ch->act,PLR_BLANK))
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	    REMOVE_BIT(ch->act,PLR_BLANK);
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	    SET_BIT(ch->act,PLR_BLANK);
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	if ( IS_SET(ch->act,PLR_PEACEFUL))
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	    REMOVE_BIT(ch->act,PLR_PEACEFUL);
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	    SET_BIT(ch->act,PLR_PEACEFUL);
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_BLANK)
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_BRIEF)
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_COMBINE)
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_PEACEFUL)
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_PROMPT)
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	send_to_char(  IS_SET(ch->act, PLR_TELNET_GA)
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	send_to_char( !IS_SET(ch->act, PLR_NO_EMOTE)
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	send_to_char( !IS_SET(ch->act, PLR_NO_TELL)
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	    SET_BIT    (ch->act, bit);
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:	    REMOVE_BIT (ch->act, bit);
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:    ch->pcdata->pagelen = i;
hit:hit:hit:hit:hit:hit:hit:hit:act_info.c:  sprintf( buf, "Page Length (pagelen):  %d\n\r", ch->pcdata->pagelen );
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:  in_room = ch->in_room;
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:  if ( ch->riding != NULL && ch->riding->in_room != in_room )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:    ch->riding = NULL;
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:       &&   ch->master != NULL
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:       &&   in_room == ch->master->in_room 
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:       &&   !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:      &&  !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:      for ( obj = ch->carrying; obj != NULL; obj = obj->next_content) {
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:      && !IS_SET(ch->act, PLR_HOLYWALK)) {
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:  if ( ch->move_speed < 0 || ch->move_speed >= MOVE_MAX )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:    ch->move_speed = MOVE_WALK;
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:  if ( ch->move < move && ch->riding == NULL )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:  if ( ch->riding != NULL && ch->riding->move < 2 * move )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:  if ( ch->riding == NULL )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:    ch->move -= move;
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:    ch->riding->move -= 2 * move;
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:  if ( ch->move_speed == MOVE_SNEAK && ch->riding == NULL )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:      if ( ch->next_in_room != NULL )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:    if ( ch->riding == NULL )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:        move_names[ch->move_speed], TO_ROOM, SENSE_SIGHT|SENSE_HEARING );
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:      act( "$n leaves $t, riding $N.", ch, ch->riding, NULL, dir_name[door],
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:  if ( ch->riding != NULL )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:    char_from_room( ch->riding );
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:    char_to_room( ch->riding, to_room, TRUE );
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:    if ( ch->riding == NULL )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:        dir_name_2[rev_dir[door]], move_names[ch->move_speed],
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:      act( "$n has arrived from $t, riding $N.", ch, ch->riding, NULL,
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:    fch_next = fch->next_in_room;
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:    if ( fch->master == ch && fch->position == POS_STANDING
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:  if (!IS_UNSWITCHED_MOB(ch) && IS_SET(ch->act, PLR_HOLYWALK))
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:  switch( ch->move_speed )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:  if (!IS_UNSWITCHED_MOB(ch) && IS_SET(ch->act, PLR_HOLYWALK))
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:  switch( ch->move_speed )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:	    if ( ( pexit = ch->in_room->exit[door] ) != NULL
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:    if ( ( pexit = ch->in_room->exit[door] ) == NULL )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:	    if ( ( pexit = ch->in_room->exit[dir] ) != NULL
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:    if ( ( pexit = ch->in_room->exit[dir] ) == NULL
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:	damage( ch, ch, UMIN(dice(1,pain),dice(1,ch->hit[0])), gsn_tumbling, NULL, gn_wear_none );
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:	pexit = ch->in_room->exit[door];
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:	    for ( rch = to_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:	pexit = ch->in_room->exit[door];
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:	    for ( rch = to_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:	pexit	= ch->in_room->exit[door];
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:	    for ( rch = to_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:	if ( building->value[0] != ch->in_room->vnum )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:	pexit	= ch->in_room->exit[door];
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:	pexit = ch->in_room->exit[door];
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:	&&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:  for ( fi = ch->in_room->flora; fi != NULL; fi = fi->next )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:    pexit = ch->in_room->exit[door];
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:    &&   pexit_rev->to_room == ch->in_room )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:    switch ( ch->position )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:	ch->position = POS_STANDING;
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:    switch ( ch->position )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:	ch->position = POS_RESTING;
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:	ch->position = POS_RESTING;
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:    switch ( ch->position )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:	ch->position = POS_RESTING;
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:    if ( ch->riding != NULL )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:    for ( rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:	if ( rch->riding == mount )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:    if ( rch != NULL && rch->riding == mount )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:    ch->riding = mount;
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:    switch ( ch->position )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:	ch->position = POS_SLEEPING;
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:	if (ch->position != POS_SLEEPING)
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:	ch->position = POS_RESTING;
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:  ch->move_speed = MOVE_WALK;
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:  ch->move_speed = MOVE_RUN;
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:  ch->move_speed = MOVE_SNEAK;
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:    if ( ch->riding == NULL )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:    act("You stop riding $N.", ch, ch->riding, NULL, NULL, NULL, TO_CHAR, SENSE_SIGHT );
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:    act("$n stops riding $N.", ch, ch->riding, NULL, NULL, NULL, TO_ROOM, SENSE_SIGHT );
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:    ch->riding = NULL;
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:    for ( controls = ch->in_room->contents; controls != NULL; controls = controls->next_content )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:        in_room = ch->in_room;
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:    for ( vch = in_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:    in_room = ch->in_room;
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:    for ( vch = to_room->people; vch != NULL; vch = vch->next_in_room )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:    for ( building = ch->in_room->contents; building != NULL; building = building->next_content )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:	REMOVE_BIT(ch->affected_by, AFF_HIDE);
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:	SET_BIT(ch->affected_by, AFF_HIDE);
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:    if (IS_SET(ch->affected_by, AFF_INVISIBLE) )
hit:hit:hit:hit:hit:hit:hit:hit:act_move.c:        REMOVE_BIT   ( ch->affected_by, AFF_INVISIBLE	);
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:    if ( ch->carry_number + 1 > can_carry_n( ch ) )
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:    if ( ch->carry_weight + get_obj_weight( obj ) > can_carry_w( ch ) )
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:	    obj = get_obj_list( ch, arg1, ch->in_room->contents );
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:	    for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:	for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:	obj_to_room( create_money( amount, coin ), ch->in_room, TRUE );
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:	obj_to_room( obj, ch->in_room, TRUE );
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:		obj_to_room( obj, ch->in_room, TRUE );
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:    if ( !str_cmp( arg, "channel" ) && is_name( arg, ch->in_room->name ) )
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:    if ( !str_cmp( arg, "lake" ) && is_name( arg, ch->in_room->name ) )
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:    if ( !str_cmp( arg, "river" ) && is_name( arg, ch->in_room->name ) )
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:    if ( !str_cmp( arg, "stream" ) && is_name( arg, ch->in_room->name ) )
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:    if ( !str_cmp( arg, "waterfall" ) && is_name( arg, ch->in_room->name ) )
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:	if ( !IS_SET( ch->in_room->room_flags, ROOM_DRINKABLE_WATER )
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:    && IS_SET( ch->in_room->sector->flags, SECTOR_OUTDOORS ) )
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:      ch->in_room->water += obj->value[1];
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:    && IS_SET( ch->in_room->sector->flags, SECTOR_OUTDOORS ) )
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:	for ( obj = ch->in_room->contents; obj; obj = obj->next_content )
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:	&& ( !IS_SET( ch->in_room->room_flags, ROOM_DRINKABLE_WATER )
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:    && ch->pcdata->condition[COND_DRUNK] > 10
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:	ch->pcdata->condition[COND_THIRST] = 48;
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:	    ch->pcdata->condition[COND_THIRST] = 48;
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_DRUNK]  > 10 )
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_FULL]   > 40 )
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_THIRST] > 40 )
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:	    ch->pcdata->condition[COND_FULL] = UMIN( ch->pcdata->condition[COND_FULL], 48 );
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:	    ch->pcdata->condition[COND_THIRST] = UMIN( ch->pcdata->condition[COND_THIRST], 48 );
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_FULL] > 40 )
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:	    condition = ch->pcdata->condition[COND_FULL];
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:	    if ( condition == 0 && ch->pcdata->condition[COND_FULL] > 0 )
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:	    else if ( ch->pcdata->condition[COND_FULL] > 40 )
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:    && ch->wearing[*wear_info[location].dependency] == NULL )
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:    && ch->wearing[*wear_info[gn_wear_on_belt].dependency] == NULL )
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:    for ( obj = ch->wearing[gn_wear_on_belt]; obj != NULL; obj = obj->next_worn )
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:	  for ( vch = ch->in_room->people; vch != NULL; vch = vch_next )
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:	    vch_next	= vch->next_in_room;
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:	if ( ( obj = get_obj_list( ch, arg1, ch->in_room->contents ) ) == NULL )
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:/*        if ( IS_SET(ch->act, PLR_HOLYWALK) )
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:    && ( objfrom = get_obj_list( ch, arg2, ch->in_room->contents ) ) == NULL )
hit:hit:hit:hit:hit:hit:hit:hit:act_obj.c:/* 