#include <sys/types.h>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include "merc.h"

static char * const he_she  [] = { "it",  "he",  "she" };
static char * const him_her [] = { "it",  "him", "her" };
static char * const his_her [] = { "its", "his", "her" };

bool execute_emote( CHAR_DATA *ch, char *argument, bool fPemote );


void do_emote( CHAR_DATA *ch, char *argument )
{
    execute_emote( ch, argument, FALSE );
}


void do_pemote( CHAR_DATA *ch, char *argument )
{
    execute_emote( ch, argument, TRUE );
}


/* 0 on success */
bool execute_emote( CHAR_DATA *ch, char *argument, bool fPemote )
{
  CHAR_DATA *vch;

  if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_NO_EMOTE) )
  {
    send_to_char( "You can't show your emotions.\n\r", ch );
    return 1;
  }

  if ( argument[0] == '\0' )
  {
    send_to_char( "Emote what?\n\r", ch );
    return 1;
  }

  if ( !emote_processor( ch, argument, fPemote, ch ) )
    return 1;

  for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
    send_to_char( emote_processor( ch, argument, fPemote, vch ), vch );

  return 0;
}



char *emote_processor( CHAR_DATA *ch, char *argument, bool fPemote,
  CHAR_DATA *vch )
{
  static char buf[MAX_STRING_LENGTH];
  CHAR_DATA *wch;
  OBJ_DATA *obj;
  bool fBegin = TRUE, fPoss = FALSE, fObj = FALSE;
  char word[MAX_INPUT_LENGTH];
  char *pin = argument;

  for ( pin = argument; *pin != '\0'; pin++ ) {
    if ( *pin == '@' ) {
	fBegin = FALSE;
	break;
    }
  }

  pin = argument;
  buf[0] = '\0';

  /* If no @, copy emoter's short desc. */
  if ( fBegin ) {
      strcpy( buf, person( vch, ch ) );
      if ( fPemote ) {
	  if ( buf[strlen(buf)-1] == 's' )
	      strcat( buf, "'" );
	  else
	      strcat( buf, "'s" );
      }
      strcat( buf, " " );
  }

  while ( *pin != '\0' ) {
      switch( *pin ) {
	  default:
	      one_argument( pin, word );
	      strcat( buf, word );
	      pin = pin + (strlen( word ) - 1);
	      break;

	  case ' ':
	      strcat( buf, " " );
	      break;

	  case '@':
	      strcat(buf, person(vch, ch));
	      if ( fPemote ) {
		  if ( buf[strlen(buf)-1] == 's' )
		      strcat( buf, "'" );
		  else
		      strcat( buf, "'s" );
	      }
	      break;

	  case '%':
	      fPoss = TRUE;
	  case '~':
	      one_argument( &pin[1], word );
	      if ((wch = get_char_room(ch, word)) == NULL) {
		  if ((obj = get_obj_here(ch, word)) != NULL) {
		      fObj = TRUE;
		  } else {
		      sprintf( buf, "%s is not here.\n\r", word );
		      send_to_char( buf, ch );
		      return NULL;
		  }
	      }
      
	      if (vch == wch) {
		  strcat(buf, "you");
		  if (fPoss)
		      strcat(buf, "r");
	      } else {
		  if (!fObj) {
		      strcat(buf, person(vch, wch));
		      if (fPoss) {
			  if ( buf[strlen(buf)-1] == 's' )
			      strcat( buf, "'" );
			  else
			      strcat( buf, "'s" );
		      }
		  } else {
		      obj = get_obj_here(ch, word);
		      if (can_see_obj(vch, obj)) {
			  strcat( buf, obj->short_descr );
			  if ( fPoss ) {
			      if ( word[strlen(word) - 1] == 's' )
				  strcat( buf, "'" );
			      else
				  strcat( buf, "'s" );
			  }
		      } else
			  if ( fPoss )
			      strcat( buf, "something's" );
			  else
			      strcat( buf, "something" );
		  }
	      }
	      
	      pin = pin + strlen( word );
	      fPoss = FALSE;
	      break;

	      /* %m  him/her */
	  case '!':
	      one_argument( &pin[1], word );
	      if ((wch = get_char_room(ch, word)) == NULL) {
		  if ((obj = get_obj_here(ch, word)) != NULL) {
		      fObj = TRUE;
		  } else {
		      sprintf( buf, "%s is not here.\n\r", word );
		      send_to_char( buf, ch );
		      return NULL;
		  }
	      }
	      
	      if ( vch == wch ) {
		  strcat( buf, "you" );
	      } else {
		  if (!fObj) {  
		      strcat( buf, him_her[wch->sex] );
		  } else {
		      obj = get_obj_here(ch, word);
		      if (can_see_obj(vch, obj))
			  strcat(buf, "it");
		      else
			  strcat(buf, "something");
		  }
	      }
	      
	      pin = pin + strlen( word );
	      break;

	      /* %s  his/her */
	  case '^':
	      one_argument( &pin[1], word );
	      if ((wch = get_char_room(ch, word)) == NULL) {
		  if ((obj = get_obj_here(ch, word)) != NULL) {
		      fObj = TRUE;
		  } else {
		      sprintf( buf, "%s is not here.\n\r", word );
		      send_to_char( buf, ch );
		      return NULL;
		  }
	      }

	      if ( vch == wch ) {
		  strcat( buf, "your" );
	      } else {
		  if (!fObj) {
		      strcat( buf, his_her[wch->sex] );
		  } else {
		      obj = get_obj_here(ch,word);
		      if (can_see_obj(vch, obj))
			  strcat(buf, "its");
		      else
			  strcat(buf, "something's");
		  }
	      }
 
	      pin = pin + strlen( word );
	      break;
	      
	      /* %s  he/she */
	  case '#':
	      one_argument( &pin[1], word );
	      if ((wch = get_char_room(ch, word)) == NULL) {
		  if ((obj = get_obj_here(ch, word)) != NULL) {
		      fObj = TRUE;
		  } else {
		      sprintf( buf, "%s is not here.\n\r", word );
		      send_to_char( buf, ch );
		      return NULL;
		  }
	      }
	      
	      if ( vch == wch ) {
		  strcat( buf, "you" );
	      } else {
		  if (!fObj) {
		      strcat( buf, he_she[wch->sex] );
		  } else {
		      obj = get_obj_here(ch,word);

		      if (can_see_obj(vch,obj))
			  strcat(buf, "it");
		      else
			  strcat(buf, "something");
		  }
	      }
	      
	      pin = pin + strlen( word );
	      break;
/*	      
	  case '|':
	      fPoss = TRUE;
	  case '*':
	      one_argument( &pin[1], word );
	      if ( ( obj = get_obj_here( ch, word ) ) == NULL ) {
		  sprintf( buf, "%s is not here.\n\r", word );
		  send_to_char( buf, ch );
		  return NULL;
	      }
	      
	      if ( can_see_obj( vch, obj ) ) {
		  strcat( buf, obj->short_descr );
		  if ( fPoss ) {
		      if ( word[strlen(word) - 1] == 's' )
			  strcat( buf, "'" );
		      else
			  strcat( buf, "'s" );
		  }
	      } else
		  if ( fPoss )
		      strcat( buf, "something's" );
		  else
		      strcat( buf, "something" );
	      
	      pin = pin + strlen( word );
	      fPoss = FALSE;
	      break;
*/
      }

      pin++;
  }

  strcat( buf, "\n\r" );
  buf[0] = UPPER( buf[0] );
  return buf;
}
